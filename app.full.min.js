;
(function () {
  function n(n, t, e) {
    e = (e || 0) - 1;
    for (var r = n ? n.length : 0; ++e < r;)
      if (n[e] === t)
        return e;
    return -1;
  }
  function t(t, e) {
    var r = typeof e;
    if (t = t.l, 'boolean' == r || null == e)
      return t[e] ? 0 : -1;
    'number' != r && 'string' != r && (r = 'object');
    var u = 'number' == r ? e : m + e;
    return t = (t = t[r]) && t[u], 'object' == r ? t && -1 < n(t, e) ? 0 : -1 : t ? 0 : -1;
  }
  function e(n) {
    var t = this.l, e = typeof n;
    if ('boolean' == e || null == n)
      t[n] = true;
    else {
      'number' != e && 'string' != e && (e = 'object');
      var r = 'number' == e ? n : m + n, t = t[e] || (t[e] = {});
      'object' == e ? (t[r] || (t[r] = [])).push(n) : t[r] = true;
    }
  }
  function r(n) {
    return n.charCodeAt(0);
  }
  function u(n, t) {
    for (var e = n.m, r = t.m, u = -1, o = e.length; ++u < o;) {
      var i = e[u], a = r[u];
      if (i !== a) {
        if (i > a || typeof i == 'undefined')
          return 1;
        if (i < a || typeof a == 'undefined')
          return -1;
      }
    }
    return n.n - t.n;
  }
  function o(n) {
    var t = -1, r = n.length, u = n[0], o = n[r / 2 | 0], i = n[r - 1];
    if (u && typeof u == 'object' && o && typeof o == 'object' && i && typeof i == 'object')
      return false;
    for (u = f(), u['false'] = u['null'] = u['true'] = u.undefined = false, o = f(), o.k = n, o.l = u, o.push = e; ++t < r;)
      o.push(n[t]);
    return o;
  }
  function i(n) {
    return '\\' + U[n];
  }
  function a() {
    return h.pop() || [];
  }
  function f() {
    return g.pop() || {
      k: null,
      l: null,
      m: null,
      'false': false,
      n: 0,
      'null': false,
      number: null,
      object: null,
      push: null,
      string: null,
      'true': false,
      undefined: false,
      o: null
    };
  }
  function l(n) {
    n.length = 0, h.length < _ && h.push(n);
  }
  function c(n) {
    var t = n.l;
    t && c(t), n.k = n.l = n.m = n.object = n.number = n.string = n.o = null, g.length < _ && g.push(n);
  }
  function p(n, t, e) {
    t || (t = 0), typeof e == 'undefined' && (e = n ? n.length : 0);
    var r = -1;
    e = e - t || 0;
    for (var u = Array(0 > e ? 0 : e); ++r < e;)
      u[r] = n[t + r];
    return u;
  }
  function s(e) {
    function h(n, t, e) {
      if (!n || !V[typeof n])
        return n;
      t = t && typeof e == 'undefined' ? t : tt(t, e, 3);
      for (var r = -1, u = V[typeof n] && Fe(n), o = u ? u.length : 0; ++r < o && (e = u[r], false !== t(n[e], e, n)););
      return n;
    }
    function g(n, t, e) {
      var r;
      if (!n || !V[typeof n])
        return n;
      t = t && typeof e == 'undefined' ? t : tt(t, e, 3);
      for (r in n)
        if (false === t(n[r], r, n))
          break;
      return n;
    }
    function _(n, t, e) {
      var r, u = n, o = u;
      if (!u)
        return o;
      for (var i = arguments, a = 0, f = typeof e == 'number' ? 2 : i.length; ++a < f;)
        if ((u = i[a]) && V[typeof u])
          for (var l = -1, c = V[typeof u] && Fe(u), p = c ? c.length : 0; ++l < p;)
            r = c[l], 'undefined' == typeof o[r] && (o[r] = u[r]);
      return o;
    }
    function U(n, t, e) {
      var r, u = n, o = u;
      if (!u)
        return o;
      var i = arguments, a = 0, f = typeof e == 'number' ? 2 : i.length;
      if (3 < f && 'function' == typeof i[f - 2])
        var l = tt(i[--f - 1], i[f--], 2);
      else
        2 < f && 'function' == typeof i[f - 1] && (l = i[--f]);
      for (; ++a < f;)
        if ((u = i[a]) && V[typeof u])
          for (var c = -1, p = V[typeof u] && Fe(u), s = p ? p.length : 0; ++c < s;)
            r = p[c], o[r] = l ? l(o[r], u[r]) : u[r];
      return o;
    }
    function H(n) {
      var t, e = [];
      if (!n || !V[typeof n])
        return e;
      for (t in n)
        me.call(n, t) && e.push(t);
      return e;
    }
    function J(n) {
      return n && typeof n == 'object' && !Te(n) && me.call(n, '__wrapped__') ? n : new Q(n);
    }
    function Q(n, t) {
      this.__chain__ = !!t, this.__wrapped__ = n;
    }
    function X(n) {
      function t() {
        if (r) {
          var n = p(r);
          be.apply(n, arguments);
        }
        if (this instanceof t) {
          var o = nt(e.prototype), n = e.apply(o, n || arguments);
          return wt(n) ? n : o;
        }
        return e.apply(u, n || arguments);
      }
      var e = n[0], r = n[2], u = n[4];
      return $e(t, n), t;
    }
    function Z(n, t, e, r, u) {
      if (e) {
        var o = e(n);
        if (typeof o != 'undefined')
          return o;
      }
      if (!wt(n))
        return n;
      var i = ce.call(n);
      if (!K[i])
        return n;
      var f = Ae[i];
      switch (i) {
      case T:
      case F:
        return new f(+n);
      case W:
      case P:
        return new f(n);
      case z:
        return o = f(n.source, C.exec(n)), o.lastIndex = n.lastIndex, o;
      }
      if (i = Te(n), t) {
        var c = !r;
        r || (r = a()), u || (u = a());
        for (var s = r.length; s--;)
          if (r[s] == n)
            return u[s];
        o = i ? f(n.length) : {};
      } else
        o = i ? p(n) : U({}, n);
      return i && (me.call(n, 'index') && (o.index = n.index), me.call(n, 'input') && (o.input = n.input)), t ? (r.push(n), u.push(o), (i ? St : h)(n, function (n, i) {
        o[i] = Z(n, t, e, r, u);
      }), c && (l(r), l(u)), o) : o;
    }
    function nt(n) {
      return wt(n) ? ke(n) : {};
    }
    function tt(n, t, e) {
      if (typeof n != 'function')
        return Ut;
      if (typeof t == 'undefined' || !('prototype' in n))
        return n;
      var r = n.__bindData__;
      if (typeof r == 'undefined' && (De.funcNames && (r = !n.name), r = r || !De.funcDecomp, !r)) {
        var u = ge.call(n);
        De.funcNames || (r = !O.test(u)), r || (r = E.test(u), $e(n, r));
      }
      if (false === r || true !== r && 1 & r[1])
        return n;
      switch (e) {
      case 1:
        return function (e) {
          return n.call(t, e);
        };
      case 2:
        return function (e, r) {
          return n.call(t, e, r);
        };
      case 3:
        return function (e, r, u) {
          return n.call(t, e, r, u);
        };
      case 4:
        return function (e, r, u, o) {
          return n.call(t, e, r, u, o);
        };
      }
      return Mt(n, t);
    }
    function et(n) {
      function t() {
        var n = f ? i : this;
        if (u) {
          var h = p(u);
          be.apply(h, arguments);
        }
        return (o || c) && (h || (h = p(arguments)), o && be.apply(h, o), c && h.length < a) ? (r |= 16, et([
          e,
          s ? r : -4 & r,
          h,
          null,
          i,
          a
        ])) : (h || (h = arguments), l && (e = n[v]), this instanceof t ? (n = nt(e.prototype), h = e.apply(n, h), wt(h) ? h : n) : e.apply(n, h));
      }
      var e = n[0], r = n[1], u = n[2], o = n[3], i = n[4], a = n[5], f = 1 & r, l = 2 & r, c = 4 & r, s = 8 & r, v = e;
      return $e(t, n), t;
    }
    function rt(e, r) {
      var u = -1, i = st(), a = e ? e.length : 0, f = a >= b && i === n, l = [];
      if (f) {
        var p = o(r);
        p ? (i = t, r = p) : f = false;
      }
      for (; ++u < a;)
        p = e[u], 0 > i(r, p) && l.push(p);
      return f && c(r), l;
    }
    function ut(n, t, e, r) {
      r = (r || 0) - 1;
      for (var u = n ? n.length : 0, o = []; ++r < u;) {
        var i = n[r];
        if (i && typeof i == 'object' && typeof i.length == 'number' && (Te(i) || yt(i))) {
          t || (i = ut(i, t, e));
          var a = -1, f = i.length, l = o.length;
          for (o.length += f; ++a < f;)
            o[l++] = i[a];
        } else
          e || o.push(i);
      }
      return o;
    }
    function ot(n, t, e, r, u, o) {
      if (e) {
        var i = e(n, t);
        if (typeof i != 'undefined')
          return !!i;
      }
      if (n === t)
        return 0 !== n || 1 / n == 1 / t;
      if (n === n && !(n && V[typeof n] || t && V[typeof t]))
        return false;
      if (null == n || null == t)
        return n === t;
      var f = ce.call(n), c = ce.call(t);
      if (f == D && (f = q), c == D && (c = q), f != c)
        return false;
      switch (f) {
      case T:
      case F:
        return +n == +t;
      case W:
        return n != +n ? t != +t : 0 == n ? 1 / n == 1 / t : n == +t;
      case z:
      case P:
        return n == oe(t);
      }
      if (c = f == $, !c) {
        var p = me.call(n, '__wrapped__'), s = me.call(t, '__wrapped__');
        if (p || s)
          return ot(p ? n.__wrapped__ : n, s ? t.__wrapped__ : t, e, r, u, o);
        if (f != q)
          return false;
        if (f = n.constructor, p = t.constructor, f != p && !(dt(f) && f instanceof f && dt(p) && p instanceof p) && 'constructor' in n && 'constructor' in t)
          return false;
      }
      for (f = !u, u || (u = a()), o || (o = a()), p = u.length; p--;)
        if (u[p] == n)
          return o[p] == t;
      var v = 0, i = true;
      if (u.push(n), o.push(t), c) {
        if (p = n.length, v = t.length, (i = v == p) || r)
          for (; v--;)
            if (c = p, s = t[v], r)
              for (; c-- && !(i = ot(n[c], s, e, r, u, o)););
            else if (!(i = ot(n[v], s, e, r, u, o)))
              break;
      } else
        g(t, function (t, a, f) {
          return me.call(f, a) ? (v++, i = me.call(n, a) && ot(n[a], t, e, r, u, o)) : void 0;
        }), i && !r && g(n, function (n, t, e) {
          return me.call(e, t) ? i = -1 < --v : void 0;
        });
      return u.pop(), o.pop(), f && (l(u), l(o)), i;
    }
    function it(n, t, e, r, u) {
      (Te(t) ? St : h)(t, function (t, o) {
        var i, a, f = t, l = n[o];
        if (t && ((a = Te(t)) || Pe(t))) {
          for (f = r.length; f--;)
            if (i = r[f] == t) {
              l = u[f];
              break;
            }
          if (!i) {
            var c;
            e && (f = e(l, t), c = typeof f != 'undefined') && (l = f), c || (l = a ? Te(l) ? l : [] : Pe(l) ? l : {}), r.push(t), u.push(l), c || it(l, t, e, r, u);
          }
        } else
          e && (f = e(l, t), typeof f == 'undefined' && (f = t)), typeof f != 'undefined' && (l = f);
        n[o] = l;
      });
    }
    function at(n, t) {
      return n + he(Re() * (t - n + 1));
    }
    function ft(e, r, u) {
      var i = -1, f = st(), p = e ? e.length : 0, s = [], v = !r && p >= b && f === n, h = u || v ? a() : s;
      for (v && (h = o(h), f = t); ++i < p;) {
        var g = e[i], y = u ? u(g, i, e) : g;
        (r ? !i || h[h.length - 1] !== y : 0 > f(h, y)) && ((u || v) && h.push(y), s.push(g));
      }
      return v ? (l(h.k), c(h)) : u && l(h), s;
    }
    function lt(n) {
      return function (t, e, r) {
        var u = {};
        e = J.createCallback(e, r, 3), r = -1;
        var o = t ? t.length : 0;
        if (typeof o == 'number')
          for (; ++r < o;) {
            var i = t[r];
            n(u, i, e(i, r, t), t);
          }
        else
          h(t, function (t, r, o) {
            n(u, t, e(t, r, o), o);
          });
        return u;
      };
    }
    function ct(n, t, e, r, u, o) {
      var i = 1 & t, a = 4 & t, f = 16 & t, l = 32 & t;
      if (!(2 & t || dt(n)))
        throw new ie();
      f && !e.length && (t &= -17, f = e = false), l && !r.length && (t &= -33, l = r = false);
      var c = n && n.__bindData__;
      return c && true !== c ? (c = p(c), c[2] && (c[2] = p(c[2])), c[3] && (c[3] = p(c[3])), !i || 1 & c[1] || (c[4] = u), !i && 1 & c[1] && (t |= 8), !a || 4 & c[1] || (c[5] = o), f && be.apply(c[2] || (c[2] = []), e), l && we.apply(c[3] || (c[3] = []), r), c[1] |= t, ct.apply(null, c)) : (1 == t || 17 === t ? X : et)([
        n,
        t,
        e,
        r,
        u,
        o
      ]);
    }
    function pt(n) {
      return Be[n];
    }
    function st() {
      var t = (t = J.indexOf) === Wt ? n : t;
      return t;
    }
    function vt(n) {
      return typeof n == 'function' && pe.test(n);
    }
    function ht(n) {
      var t, e;
      return n && ce.call(n) == q && (t = n.constructor, !dt(t) || t instanceof t) ? (g(n, function (n, t) {
        e = t;
      }), typeof e == 'undefined' || me.call(n, e)) : false;
    }
    function gt(n) {
      return We[n];
    }
    function yt(n) {
      return n && typeof n == 'object' && typeof n.length == 'number' && ce.call(n) == D || false;
    }
    function mt(n, t, e) {
      var r = Fe(n), u = r.length;
      for (t = tt(t, e, 3); u-- && (e = r[u], false !== t(n[e], e, n)););
      return n;
    }
    function bt(n) {
      var t = [];
      return g(n, function (n, e) {
        dt(n) && t.push(e);
      }), t.sort();
    }
    function _t(n) {
      for (var t = -1, e = Fe(n), r = e.length, u = {}; ++t < r;) {
        var o = e[t];
        u[n[o]] = o;
      }
      return u;
    }
    function dt(n) {
      return typeof n == 'function';
    }
    function wt(n) {
      return !(!n || !V[typeof n]);
    }
    function jt(n) {
      return typeof n == 'number' || n && typeof n == 'object' && ce.call(n) == W || false;
    }
    function kt(n) {
      return typeof n == 'string' || n && typeof n == 'object' && ce.call(n) == P || false;
    }
    function xt(n) {
      for (var t = -1, e = Fe(n), r = e.length, u = Xt(r); ++t < r;)
        u[t] = n[e[t]];
      return u;
    }
    function Ct(n, t, e) {
      var r = -1, u = st(), o = n ? n.length : 0, i = false;
      return e = (0 > e ? Ie(0, o + e) : e) || 0, Te(n) ? i = -1 < u(n, t, e) : typeof o == 'number' ? i = -1 < (kt(n) ? n.indexOf(t, e) : u(n, t, e)) : h(n, function (n) {
        return ++r < e ? void 0 : !(i = n === t);
      }), i;
    }
    function Ot(n, t, e) {
      var r = true;
      t = J.createCallback(t, e, 3), e = -1;
      var u = n ? n.length : 0;
      if (typeof u == 'number')
        for (; ++e < u && (r = !!t(n[e], e, n)););
      else
        h(n, function (n, e, u) {
          return r = !!t(n, e, u);
        });
      return r;
    }
    function Nt(n, t, e) {
      var r = [];
      t = J.createCallback(t, e, 3), e = -1;
      var u = n ? n.length : 0;
      if (typeof u == 'number')
        for (; ++e < u;) {
          var o = n[e];
          t(o, e, n) && r.push(o);
        }
      else
        h(n, function (n, e, u) {
          t(n, e, u) && r.push(n);
        });
      return r;
    }
    function It(n, t, e) {
      t = J.createCallback(t, e, 3), e = -1;
      var r = n ? n.length : 0;
      if (typeof r != 'number') {
        var u;
        return h(n, function (n, e, r) {
          return t(n, e, r) ? (u = n, false) : void 0;
        }), u;
      }
      for (; ++e < r;) {
        var o = n[e];
        if (t(o, e, n))
          return o;
      }
    }
    function St(n, t, e) {
      var r = -1, u = n ? n.length : 0;
      if (t = t && typeof e == 'undefined' ? t : tt(t, e, 3), typeof u == 'number')
        for (; ++r < u && false !== t(n[r], r, n););
      else
        h(n, t);
      return n;
    }
    function Et(n, t, e) {
      var r = n ? n.length : 0;
      if (t = t && typeof e == 'undefined' ? t : tt(t, e, 3), typeof r == 'number')
        for (; r-- && false !== t(n[r], r, n););
      else {
        var u = Fe(n), r = u.length;
        h(n, function (n, e, o) {
          return e = u ? u[--r] : --r, t(o[e], e, o);
        });
      }
      return n;
    }
    function Rt(n, t, e) {
      var r = -1, u = n ? n.length : 0;
      if (t = J.createCallback(t, e, 3), typeof u == 'number')
        for (var o = Xt(u); ++r < u;)
          o[r] = t(n[r], r, n);
      else
        o = [], h(n, function (n, e, u) {
          o[++r] = t(n, e, u);
        });
      return o;
    }
    function At(n, t, e) {
      var u = -1 / 0, o = u;
      if (typeof t != 'function' && e && e[t] === n && (t = null), null == t && Te(n)) {
        e = -1;
        for (var i = n.length; ++e < i;) {
          var a = n[e];
          a > o && (o = a);
        }
      } else
        t = null == t && kt(n) ? r : J.createCallback(t, e, 3), St(n, function (n, e, r) {
          e = t(n, e, r), e > u && (u = e, o = n);
        });
      return o;
    }
    function Dt(n, t, e, r) {
      if (!n)
        return e;
      var u = 3 > arguments.length;
      t = J.createCallback(t, r, 4);
      var o = -1, i = n.length;
      if (typeof i == 'number')
        for (u && (e = n[++o]); ++o < i;)
          e = t(e, n[o], o, n);
      else
        h(n, function (n, r, o) {
          e = u ? (u = false, n) : t(e, n, r, o);
        });
      return e;
    }
    function $t(n, t, e, r) {
      var u = 3 > arguments.length;
      return t = J.createCallback(t, r, 4), Et(n, function (n, r, o) {
        e = u ? (u = false, n) : t(e, n, r, o);
      }), e;
    }
    function Tt(n) {
      var t = -1, e = n ? n.length : 0, r = Xt(typeof e == 'number' ? e : 0);
      return St(n, function (n) {
        var e = at(0, ++t);
        r[t] = r[e], r[e] = n;
      }), r;
    }
    function Ft(n, t, e) {
      var r;
      t = J.createCallback(t, e, 3), e = -1;
      var u = n ? n.length : 0;
      if (typeof u == 'number')
        for (; ++e < u && !(r = t(n[e], e, n)););
      else
        h(n, function (n, e, u) {
          return !(r = t(n, e, u));
        });
      return !!r;
    }
    function Bt(n, t, e) {
      var r = 0, u = n ? n.length : 0;
      if (typeof t != 'number' && null != t) {
        var o = -1;
        for (t = J.createCallback(t, e, 3); ++o < u && t(n[o], o, n);)
          r++;
      } else if (r = t, null == r || e)
        return n ? n[0] : v;
      return p(n, 0, Se(Ie(0, r), u));
    }
    function Wt(t, e, r) {
      if (typeof r == 'number') {
        var u = t ? t.length : 0;
        r = 0 > r ? Ie(0, u + r) : r || 0;
      } else if (r)
        return r = zt(t, e), t[r] === e ? r : -1;
      return n(t, e, r);
    }
    function qt(n, t, e) {
      if (typeof t != 'number' && null != t) {
        var r = 0, u = -1, o = n ? n.length : 0;
        for (t = J.createCallback(t, e, 3); ++u < o && t(n[u], u, n);)
          r++;
      } else
        r = null == t || e ? 1 : Ie(0, t);
      return p(n, r);
    }
    function zt(n, t, e, r) {
      var u = 0, o = n ? n.length : u;
      for (e = e ? J.createCallback(e, r, 1) : Ut, t = e(t); u < o;)
        r = u + o >>> 1, e(n[r]) < t ? u = r + 1 : o = r;
      return u;
    }
    function Pt(n, t, e, r) {
      return typeof t != 'boolean' && null != t && (r = e, e = typeof t != 'function' && r && r[t] === n ? null : t, t = false), null != e && (e = J.createCallback(e, r, 3)), ft(n, t, e);
    }
    function Kt() {
      for (var n = 1 < arguments.length ? arguments : arguments[0], t = -1, e = n ? At(Ve(n, 'length')) : 0, r = Xt(0 > e ? 0 : e); ++t < e;)
        r[t] = Ve(n, t);
      return r;
    }
    function Lt(n, t) {
      var e = -1, r = n ? n.length : 0, u = {};
      for (t || !r || Te(n[0]) || (t = []); ++e < r;) {
        var o = n[e];
        t ? u[o] = t[e] : o && (u[o[0]] = o[1]);
      }
      return u;
    }
    function Mt(n, t) {
      return 2 < arguments.length ? ct(n, 17, p(arguments, 2), null, t) : ct(n, 1, null, null, t);
    }
    function Vt(n, t, e) {
      function r() {
        c && ve(c), i = c = p = v, (g || h !== t) && (s = Ue(), a = n.apply(l, o), c || i || (o = l = null));
      }
      function u() {
        var e = t - (Ue() - f);
        0 < e ? c = _e(u, e) : (i && ve(i), e = p, i = c = p = v, e && (s = Ue(), a = n.apply(l, o), c || i || (o = l = null)));
      }
      var o, i, a, f, l, c, p, s = 0, h = false, g = true;
      if (!dt(n))
        throw new ie();
      if (t = Ie(0, t) || 0, true === e)
        var y = true, g = false;
      else
        wt(e) && (y = e.leading, h = 'maxWait' in e && (Ie(t, e.maxWait) || 0), g = 'trailing' in e ? e.trailing : g);
      return function () {
        if (o = arguments, f = Ue(), l = this, p = g && (c || !y), false === h)
          var e = y && !c;
        else {
          i || y || (s = f);
          var v = h - (f - s), m = 0 >= v;
          m ? (i && (i = ve(i)), s = f, a = n.apply(l, o)) : i || (i = _e(r, v));
        }
        return m && c ? c = ve(c) : c || t === h || (c = _e(u, t)), e && (m = true, a = n.apply(l, o)), !m || c || i || (o = l = null), a;
      };
    }
    function Ut(n) {
      return n;
    }
    function Gt(n, t, e) {
      var r = true, u = t && bt(t);
      t && (e || u.length) || (null == e && (e = t), o = Q, t = n, n = J, u = bt(t)), false === e ? r = false : wt(e) && 'chain' in e && (r = e.chain);
      var o = n, i = dt(o);
      St(u, function (e) {
        var u = n[e] = t[e];
        i && (o.prototype[e] = function () {
          var t = this.__chain__, e = this.__wrapped__, i = [e];
          if (be.apply(i, arguments), i = u.apply(n, i), r || t) {
            if (e === i && wt(i))
              return this;
            i = new o(i), i.__chain__ = t;
          }
          return i;
        });
      });
    }
    function Ht() {
    }
    function Jt(n) {
      return function (t) {
        return t[n];
      };
    }
    function Qt() {
      return this.__wrapped__;
    }
    e = e ? Y.defaults(G.Object(), e, Y.pick(G, A)) : G;
    var Xt = e.Array, Yt = e.Boolean, Zt = e.Date, ne = e.Function, te = e.Math, ee = e.Number, re = e.Object, ue = e.RegExp, oe = e.String, ie = e.TypeError, ae = [], fe = re.prototype, le = e._, ce = fe.toString, pe = ue('^' + oe(ce).replace(/[.*+?^${}()|[\]\\]/g, '\\$&').replace(/toString| for [^\]]+/g, '.*?') + '$'), se = te.ceil, ve = e.clearTimeout, he = te.floor, ge = ne.prototype.toString, ye = vt(ye = re.getPrototypeOf) && ye, me = fe.hasOwnProperty, be = ae.push, _e = e.setTimeout, de = ae.splice, we = ae.unshift, je = function () {
        try {
          var n = {}, t = vt(t = re.defineProperty) && t, e = t(n, n, n) && t;
        } catch (r) {
        }
        return e;
      }(), ke = vt(ke = re.create) && ke, xe = vt(xe = Xt.isArray) && xe, Ce = e.isFinite, Oe = e.isNaN, Ne = vt(Ne = re.keys) && Ne, Ie = te.max, Se = te.min, Ee = e.parseInt, Re = te.random, Ae = {};
    Ae[$] = Xt, Ae[T] = Yt, Ae[F] = Zt, Ae[B] = ne, Ae[q] = re, Ae[W] = ee, Ae[z] = ue, Ae[P] = oe, Q.prototype = J.prototype;
    var De = J.support = {};
    De.funcDecomp = !vt(e.a) && E.test(s), De.funcNames = typeof ne.name == 'string', J.templateSettings = {
      escape: /<%-([\s\S]+?)%>/g,
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: N,
      variable: '',
      imports: { _: J }
    }, ke || (nt = function () {
      function n() {
      }
      return function (t) {
        if (wt(t)) {
          n.prototype = t;
          var r = new n();
          n.prototype = null;
        }
        return r || e.Object();
      };
    }());
    var $e = je ? function (n, t) {
        M.value = t, je(n, '__bindData__', M);
      } : Ht, Te = xe || function (n) {
        return n && typeof n == 'object' && typeof n.length == 'number' && ce.call(n) == $ || false;
      }, Fe = Ne ? function (n) {
        return wt(n) ? Ne(n) : [];
      } : H, Be = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '\'': '&#39;'
      }, We = _t(Be), qe = ue('(' + Fe(We).join('|') + ')', 'g'), ze = ue('[' + Fe(Be).join('') + ']', 'g'), Pe = ye ? function (n) {
        if (!n || ce.call(n) != q)
          return false;
        var t = n.valueOf, e = vt(t) && (e = ye(t)) && ye(e);
        return e ? n == e || ye(n) == e : ht(n);
      } : ht, Ke = lt(function (n, t, e) {
        me.call(n, e) ? n[e]++ : n[e] = 1;
      }), Le = lt(function (n, t, e) {
        (me.call(n, e) ? n[e] : n[e] = []).push(t);
      }), Me = lt(function (n, t, e) {
        n[e] = t;
      }), Ve = Rt, Ue = vt(Ue = Zt.now) && Ue || function () {
        return new Zt().getTime();
      }, Ge = 8 == Ee(d + '08') ? Ee : function (n, t) {
        return Ee(kt(n) ? n.replace(I, '') : n, t || 0);
      };
    return J.after = function (n, t) {
      if (!dt(t))
        throw new ie();
      return function () {
        return 1 > --n ? t.apply(this, arguments) : void 0;
      };
    }, J.assign = U, J.at = function (n) {
      for (var t = arguments, e = -1, r = ut(t, true, false, 1), t = t[2] && t[2][t[1]] === n ? 1 : r.length, u = Xt(t); ++e < t;)
        u[e] = n[r[e]];
      return u;
    }, J.bind = Mt, J.bindAll = function (n) {
      for (var t = 1 < arguments.length ? ut(arguments, true, false, 1) : bt(n), e = -1, r = t.length; ++e < r;) {
        var u = t[e];
        n[u] = ct(n[u], 1, null, null, n);
      }
      return n;
    }, J.bindKey = function (n, t) {
      return 2 < arguments.length ? ct(t, 19, p(arguments, 2), null, n) : ct(t, 3, null, null, n);
    }, J.chain = function (n) {
      return n = new Q(n), n.__chain__ = true, n;
    }, J.compact = function (n) {
      for (var t = -1, e = n ? n.length : 0, r = []; ++t < e;) {
        var u = n[t];
        u && r.push(u);
      }
      return r;
    }, J.compose = function () {
      for (var n = arguments, t = n.length; t--;)
        if (!dt(n[t]))
          throw new ie();
      return function () {
        for (var t = arguments, e = n.length; e--;)
          t = [n[e].apply(this, t)];
        return t[0];
      };
    }, J.constant = function (n) {
      return function () {
        return n;
      };
    }, J.countBy = Ke, J.create = function (n, t) {
      var e = nt(n);
      return t ? U(e, t) : e;
    }, J.createCallback = function (n, t, e) {
      var r = typeof n;
      if (null == n || 'function' == r)
        return tt(n, t, e);
      if ('object' != r)
        return Jt(n);
      var u = Fe(n), o = u[0], i = n[o];
      return 1 != u.length || i !== i || wt(i) ? function (t) {
        for (var e = u.length, r = false; e-- && (r = ot(t[u[e]], n[u[e]], null, true)););
        return r;
      } : function (n) {
        return n = n[o], i === n && (0 !== i || 1 / i == 1 / n);
      };
    }, J.curry = function (n, t) {
      return t = typeof t == 'number' ? t : +t || n.length, ct(n, 4, null, null, null, t);
    }, J.debounce = Vt, J.defaults = _, J.defer = function (n) {
      if (!dt(n))
        throw new ie();
      var t = p(arguments, 1);
      return _e(function () {
        n.apply(v, t);
      }, 1);
    }, J.delay = function (n, t) {
      if (!dt(n))
        throw new ie();
      var e = p(arguments, 2);
      return _e(function () {
        n.apply(v, e);
      }, t);
    }, J.difference = function (n) {
      return rt(n, ut(arguments, true, true, 1));
    }, J.filter = Nt, J.flatten = function (n, t, e, r) {
      return typeof t != 'boolean' && null != t && (r = e, e = typeof t != 'function' && r && r[t] === n ? null : t, t = false), null != e && (n = Rt(n, e, r)), ut(n, t);
    }, J.forEach = St, J.forEachRight = Et, J.forIn = g, J.forInRight = function (n, t, e) {
      var r = [];
      g(n, function (n, t) {
        r.push(t, n);
      });
      var u = r.length;
      for (t = tt(t, e, 3); u-- && false !== t(r[u--], r[u], n););
      return n;
    }, J.forOwn = h, J.forOwnRight = mt, J.functions = bt, J.groupBy = Le, J.indexBy = Me, J.initial = function (n, t, e) {
      var r = 0, u = n ? n.length : 0;
      if (typeof t != 'number' && null != t) {
        var o = u;
        for (t = J.createCallback(t, e, 3); o-- && t(n[o], o, n);)
          r++;
      } else
        r = null == t || e ? 1 : t || r;
      return p(n, 0, Se(Ie(0, u - r), u));
    }, J.intersection = function () {
      for (var e = [], r = -1, u = arguments.length, i = a(), f = st(), p = f === n, s = a(); ++r < u;) {
        var v = arguments[r];
        (Te(v) || yt(v)) && (e.push(v), i.push(p && v.length >= b && o(r ? e[r] : s)));
      }
      var p = e[0], h = -1, g = p ? p.length : 0, y = [];
      n:
        for (; ++h < g;) {
          var m = i[0], v = p[h];
          if (0 > (m ? t(m, v) : f(s, v))) {
            for (r = u, (m || s).push(v); --r;)
              if (m = i[r], 0 > (m ? t(m, v) : f(e[r], v)))
                continue n;
            y.push(v);
          }
        }
      for (; u--;)
        (m = i[u]) && c(m);
      return l(i), l(s), y;
    }, J.invert = _t, J.invoke = function (n, t) {
      var e = p(arguments, 2), r = -1, u = typeof t == 'function', o = n ? n.length : 0, i = Xt(typeof o == 'number' ? o : 0);
      return St(n, function (n) {
        i[++r] = (u ? t : n[t]).apply(n, e);
      }), i;
    }, J.keys = Fe, J.map = Rt, J.mapValues = function (n, t, e) {
      var r = {};
      return t = J.createCallback(t, e, 3), h(n, function (n, e, u) {
        r[e] = t(n, e, u);
      }), r;
    }, J.max = At, J.memoize = function (n, t) {
      function e() {
        var r = e.cache, u = t ? t.apply(this, arguments) : m + arguments[0];
        return me.call(r, u) ? r[u] : r[u] = n.apply(this, arguments);
      }
      if (!dt(n))
        throw new ie();
      return e.cache = {}, e;
    }, J.merge = function (n) {
      var t = arguments, e = 2;
      if (!wt(n))
        return n;
      if ('number' != typeof t[2] && (e = t.length), 3 < e && 'function' == typeof t[e - 2])
        var r = tt(t[--e - 1], t[e--], 2);
      else
        2 < e && 'function' == typeof t[e - 1] && (r = t[--e]);
      for (var t = p(arguments, 1, e), u = -1, o = a(), i = a(); ++u < e;)
        it(n, t[u], r, o, i);
      return l(o), l(i), n;
    }, J.min = function (n, t, e) {
      var u = 1 / 0, o = u;
      if (typeof t != 'function' && e && e[t] === n && (t = null), null == t && Te(n)) {
        e = -1;
        for (var i = n.length; ++e < i;) {
          var a = n[e];
          a < o && (o = a);
        }
      } else
        t = null == t && kt(n) ? r : J.createCallback(t, e, 3), St(n, function (n, e, r) {
          e = t(n, e, r), e < u && (u = e, o = n);
        });
      return o;
    }, J.omit = function (n, t, e) {
      var r = {};
      if (typeof t != 'function') {
        var u = [];
        g(n, function (n, t) {
          u.push(t);
        });
        for (var u = rt(u, ut(arguments, true, false, 1)), o = -1, i = u.length; ++o < i;) {
          var a = u[o];
          r[a] = n[a];
        }
      } else
        t = J.createCallback(t, e, 3), g(n, function (n, e, u) {
          t(n, e, u) || (r[e] = n);
        });
      return r;
    }, J.once = function (n) {
      var t, e;
      if (!dt(n))
        throw new ie();
      return function () {
        return t ? e : (t = true, e = n.apply(this, arguments), n = null, e);
      };
    }, J.pairs = function (n) {
      for (var t = -1, e = Fe(n), r = e.length, u = Xt(r); ++t < r;) {
        var o = e[t];
        u[t] = [
          o,
          n[o]
        ];
      }
      return u;
    }, J.partial = function (n) {
      return ct(n, 16, p(arguments, 1));
    }, J.partialRight = function (n) {
      return ct(n, 32, null, p(arguments, 1));
    }, J.pick = function (n, t, e) {
      var r = {};
      if (typeof t != 'function')
        for (var u = -1, o = ut(arguments, true, false, 1), i = wt(n) ? o.length : 0; ++u < i;) {
          var a = o[u];
          a in n && (r[a] = n[a]);
        }
      else
        t = J.createCallback(t, e, 3), g(n, function (n, e, u) {
          t(n, e, u) && (r[e] = n);
        });
      return r;
    }, J.pluck = Ve, J.property = Jt, J.pull = function (n) {
      for (var t = arguments, e = 0, r = t.length, u = n ? n.length : 0; ++e < r;)
        for (var o = -1, i = t[e]; ++o < u;)
          n[o] === i && (de.call(n, o--, 1), u--);
      return n;
    }, J.range = function (n, t, e) {
      n = +n || 0, e = typeof e == 'number' ? e : +e || 1, null == t && (t = n, n = 0);
      var r = -1;
      t = Ie(0, se((t - n) / (e || 1)));
      for (var u = Xt(t); ++r < t;)
        u[r] = n, n += e;
      return u;
    }, J.reject = function (n, t, e) {
      return t = J.createCallback(t, e, 3), Nt(n, function (n, e, r) {
        return !t(n, e, r);
      });
    }, J.remove = function (n, t, e) {
      var r = -1, u = n ? n.length : 0, o = [];
      for (t = J.createCallback(t, e, 3); ++r < u;)
        e = n[r], t(e, r, n) && (o.push(e), de.call(n, r--, 1), u--);
      return o;
    }, J.rest = qt, J.shuffle = Tt, J.sortBy = function (n, t, e) {
      var r = -1, o = Te(t), i = n ? n.length : 0, p = Xt(typeof i == 'number' ? i : 0);
      for (o || (t = J.createCallback(t, e, 3)), St(n, function (n, e, u) {
          var i = p[++r] = f();
          o ? i.m = Rt(t, function (t) {
            return n[t];
          }) : (i.m = a())[0] = t(n, e, u), i.n = r, i.o = n;
        }), i = p.length, p.sort(u); i--;)
        n = p[i], p[i] = n.o, o || l(n.m), c(n);
      return p;
    }, J.tap = function (n, t) {
      return t(n), n;
    }, J.throttle = function (n, t, e) {
      var r = true, u = true;
      if (!dt(n))
        throw new ie();
      return false === e ? r = false : wt(e) && (r = 'leading' in e ? e.leading : r, u = 'trailing' in e ? e.trailing : u), L.leading = r, L.maxWait = t, L.trailing = u, Vt(n, t, L);
    }, J.times = function (n, t, e) {
      n = -1 < (n = +n) ? n : 0;
      var r = -1, u = Xt(n);
      for (t = tt(t, e, 1); ++r < n;)
        u[r] = t(r);
      return u;
    }, J.toArray = function (n) {
      return n && typeof n.length == 'number' ? p(n) : xt(n);
    }, J.transform = function (n, t, e, r) {
      var u = Te(n);
      if (null == e)
        if (u)
          e = [];
        else {
          var o = n && n.constructor;
          e = nt(o && o.prototype);
        }
      return t && (t = J.createCallback(t, r, 4), (u ? St : h)(n, function (n, r, u) {
        return t(e, n, r, u);
      })), e;
    }, J.union = function () {
      return ft(ut(arguments, true, true));
    }, J.uniq = Pt, J.values = xt, J.where = Nt, J.without = function (n) {
      return rt(n, p(arguments, 1));
    }, J.wrap = function (n, t) {
      return ct(t, 16, [n]);
    }, J.xor = function () {
      for (var n = -1, t = arguments.length; ++n < t;) {
        var e = arguments[n];
        if (Te(e) || yt(e))
          var r = r ? ft(rt(r, e).concat(rt(e, r))) : e;
      }
      return r || [];
    }, J.zip = Kt, J.zipObject = Lt, J.collect = Rt, J.drop = qt, J.each = St, J.eachRight = Et, J.extend = U, J.methods = bt, J.object = Lt, J.select = Nt, J.tail = qt, J.unique = Pt, J.unzip = Kt, Gt(J), J.clone = function (n, t, e, r) {
      return typeof t != 'boolean' && null != t && (r = e, e = t, t = false), Z(n, t, typeof e == 'function' && tt(e, r, 1));
    }, J.cloneDeep = function (n, t, e) {
      return Z(n, true, typeof t == 'function' && tt(t, e, 1));
    }, J.contains = Ct, J.escape = function (n) {
      return null == n ? '' : oe(n).replace(ze, pt);
    }, J.every = Ot, J.find = It, J.findIndex = function (n, t, e) {
      var r = -1, u = n ? n.length : 0;
      for (t = J.createCallback(t, e, 3); ++r < u;)
        if (t(n[r], r, n))
          return r;
      return -1;
    }, J.findKey = function (n, t, e) {
      var r;
      return t = J.createCallback(t, e, 3), h(n, function (n, e, u) {
        return t(n, e, u) ? (r = e, false) : void 0;
      }), r;
    }, J.findLast = function (n, t, e) {
      var r;
      return t = J.createCallback(t, e, 3), Et(n, function (n, e, u) {
        return t(n, e, u) ? (r = n, false) : void 0;
      }), r;
    }, J.findLastIndex = function (n, t, e) {
      var r = n ? n.length : 0;
      for (t = J.createCallback(t, e, 3); r--;)
        if (t(n[r], r, n))
          return r;
      return -1;
    }, J.findLastKey = function (n, t, e) {
      var r;
      return t = J.createCallback(t, e, 3), mt(n, function (n, e, u) {
        return t(n, e, u) ? (r = e, false) : void 0;
      }), r;
    }, J.has = function (n, t) {
      return n ? me.call(n, t) : false;
    }, J.identity = Ut, J.indexOf = Wt, J.isArguments = yt, J.isArray = Te, J.isBoolean = function (n) {
      return true === n || false === n || n && typeof n == 'object' && ce.call(n) == T || false;
    }, J.isDate = function (n) {
      return n && typeof n == 'object' && ce.call(n) == F || false;
    }, J.isElement = function (n) {
      return n && 1 === n.nodeType || false;
    }, J.isEmpty = function (n) {
      var t = true;
      if (!n)
        return t;
      var e = ce.call(n), r = n.length;
      return e == $ || e == P || e == D || e == q && typeof r == 'number' && dt(n.splice) ? !r : (h(n, function () {
        return t = false;
      }), t);
    }, J.isEqual = function (n, t, e, r) {
      return ot(n, t, typeof e == 'function' && tt(e, r, 2));
    }, J.isFinite = function (n) {
      return Ce(n) && !Oe(parseFloat(n));
    }, J.isFunction = dt, J.isNaN = function (n) {
      return jt(n) && n != +n;
    }, J.isNull = function (n) {
      return null === n;
    }, J.isNumber = jt, J.isObject = wt, J.isPlainObject = Pe, J.isRegExp = function (n) {
      return n && typeof n == 'object' && ce.call(n) == z || false;
    }, J.isString = kt, J.isUndefined = function (n) {
      return typeof n == 'undefined';
    }, J.lastIndexOf = function (n, t, e) {
      var r = n ? n.length : 0;
      for (typeof e == 'number' && (r = (0 > e ? Ie(0, r + e) : Se(e, r - 1)) + 1); r--;)
        if (n[r] === t)
          return r;
      return -1;
    }, J.mixin = Gt, J.noConflict = function () {
      return e._ = le, this;
    }, J.noop = Ht, J.now = Ue, J.parseInt = Ge, J.random = function (n, t, e) {
      var r = null == n, u = null == t;
      return null == e && (typeof n == 'boolean' && u ? (e = n, n = 1) : u || typeof t != 'boolean' || (e = t, u = true)), r && u && (t = 1), n = +n || 0, u ? (t = n, n = 0) : t = +t || 0, e || n % 1 || t % 1 ? (e = Re(), Se(n + e * (t - n + parseFloat('1e-' + ((e + '').length - 1))), t)) : at(n, t);
    }, J.reduce = Dt, J.reduceRight = $t, J.result = function (n, t) {
      if (n) {
        var e = n[t];
        return dt(e) ? n[t]() : e;
      }
    }, J.runInContext = s, J.size = function (n) {
      var t = n ? n.length : 0;
      return typeof t == 'number' ? t : Fe(n).length;
    }, J.some = Ft, J.sortedIndex = zt, J.template = function (n, t, e) {
      var r = J.templateSettings;
      n = oe(n || ''), e = _({}, e, r);
      var u, o = _({}, e.imports, r.imports), r = Fe(o), o = xt(o), a = 0, f = e.interpolate || S, l = '__p+=\'', f = ue((e.escape || S).source + '|' + f.source + '|' + (f === N ? x : S).source + '|' + (e.evaluate || S).source + '|$', 'g');
      n.replace(f, function (t, e, r, o, f, c) {
        return r || (r = o), l += n.slice(a, c).replace(R, i), e && (l += '\'+__e(' + e + ')+\''), f && (u = true, l += '\';' + f + ';\n__p+=\''), r && (l += '\'+((__t=(' + r + '))==null?\'\':__t)+\''), a = c + t.length, t;
      }), l += '\';', f = e = e.variable, f || (e = 'obj', l = 'with(' + e + '){' + l + '}'), l = (u ? l.replace(w, '') : l).replace(j, '$1').replace(k, '$1;'), l = 'function(' + e + '){' + (f ? '' : e + '||(' + e + '={});') + 'var __t,__p=\'\',__e=_.escape' + (u ? ',__j=Array.prototype.join;function print(){__p+=__j.call(arguments,\'\')}' : ';') + l + 'return __p}';
      try {
        var c = ne(r, 'return ' + l).apply(v, o);
      } catch (p) {
        throw p.source = l, p;
      }
      return t ? c(t) : (c.source = l, c);
    }, J.unescape = function (n) {
      return null == n ? '' : oe(n).replace(qe, gt);
    }, J.uniqueId = function (n) {
      var t = ++y;
      return oe(null == n ? '' : n) + t;
    }, J.all = Ot, J.any = Ft, J.detect = It, J.findWhere = It, J.foldl = Dt, J.foldr = $t, J.include = Ct, J.inject = Dt, Gt(function () {
      var n = {};
      return h(J, function (t, e) {
        J.prototype[e] || (n[e] = t);
      }), n;
    }(), false), J.first = Bt, J.last = function (n, t, e) {
      var r = 0, u = n ? n.length : 0;
      if (typeof t != 'number' && null != t) {
        var o = u;
        for (t = J.createCallback(t, e, 3); o-- && t(n[o], o, n);)
          r++;
      } else if (r = t, null == r || e)
        return n ? n[u - 1] : v;
      return p(n, Ie(0, u - r));
    }, J.sample = function (n, t, e) {
      return n && typeof n.length != 'number' && (n = xt(n)), null == t || e ? n ? n[at(0, n.length - 1)] : v : (n = Tt(n), n.length = Se(Ie(0, t), n.length), n);
    }, J.take = Bt, J.head = Bt, h(J, function (n, t) {
      var e = 'sample' !== t;
      J.prototype[t] || (J.prototype[t] = function (t, r) {
        var u = this.__chain__, o = n(this.__wrapped__, t, r);
        return u || null != t && (!r || e && typeof t == 'function') ? new Q(o, u) : o;
      });
    }), J.VERSION = '2.4.1', J.prototype.chain = function () {
      return this.__chain__ = true, this;
    }, J.prototype.toString = function () {
      return oe(this.__wrapped__);
    }, J.prototype.value = Qt, J.prototype.valueOf = Qt, St([
      'join',
      'pop',
      'shift'
    ], function (n) {
      var t = ae[n];
      J.prototype[n] = function () {
        var n = this.__chain__, e = t.apply(this.__wrapped__, arguments);
        return n ? new Q(e, n) : e;
      };
    }), St([
      'push',
      'reverse',
      'sort',
      'unshift'
    ], function (n) {
      var t = ae[n];
      J.prototype[n] = function () {
        return t.apply(this.__wrapped__, arguments), this;
      };
    }), St([
      'concat',
      'slice',
      'splice'
    ], function (n) {
      var t = ae[n];
      J.prototype[n] = function () {
        return new Q(t.apply(this.__wrapped__, arguments), this.__chain__);
      };
    }), J;
  }
  var v, h = [], g = [], y = 0, m = +new Date() + '', b = 75, _ = 40, d = ' \t\x0B\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000', w = /\b__p\+='';/g, j = /\b(__p\+=)''\+/g, k = /(__e\(.*?\)|\b__t\))\+'';/g, x = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, C = /\w*$/, O = /^\s*function[ \n\r\t]+\w/, N = /<%=([\s\S]+?)%>/g, I = RegExp('^[' + d + ']*0+(?=.$)'), S = /($^)/, E = /\bthis\b/, R = /['\n\r\t\u2028\u2029\\]/g, A = 'Array Boolean Date Function Math Number Object RegExp String _ attachEvent clearTimeout isFinite isNaN parseInt setTimeout'.split(' '), D = '[object Arguments]', $ = '[object Array]', T = '[object Boolean]', F = '[object Date]', B = '[object Function]', W = '[object Number]', q = '[object Object]', z = '[object RegExp]', P = '[object String]', K = {};
  K[B] = false, K[D] = K[$] = K[T] = K[F] = K[W] = K[q] = K[z] = K[P] = true;
  var L = {
      leading: false,
      maxWait: 0,
      trailing: false
    }, M = {
      configurable: false,
      enumerable: false,
      value: null,
      writable: false
    }, V = {
      'boolean': false,
      'function': true,
      object: true,
      number: false,
      string: false,
      undefined: false
    }, U = {
      '\\': '\\',
      '\'': '\'',
      '\n': 'n',
      '\r': 'r',
      '\t': 't',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    }, G = V[typeof window] && window || this, H = V[typeof exports] && exports && !exports.nodeType && exports, J = V[typeof module] && module && !module.nodeType && module, Q = J && J.exports === H && H, X = V[typeof global] && global;
  !X || X.global !== X && X.window !== X || (G = X);
  var Y = s();
  typeof define == 'function' && typeof define.amd == 'object' && define.amd ? (G._ = Y, define(function () {
    return Y;
  })) : H && J ? Q ? (J.exports = Y)._ = Y : H._ = Y : G._ = Y;
}.call(this));
(function (window, document, undefined) {
  'use strict';
  function minErr(module) {
    return function () {
      var code = arguments[0], prefix = '[' + (module ? module + ':' : '') + code + '] ', template = arguments[1], templateArgs = arguments, stringify = function (obj) {
          if (typeof obj === 'function') {
            return obj.toString().replace(/ \{[\s\S]*$/, '');
          } else if (typeof obj === 'undefined') {
            return 'undefined';
          } else if (typeof obj !== 'string') {
            return JSON.stringify(obj);
          }
          return obj;
        }, message, i;
      message = prefix + template.replace(/\{\d+\}/g, function (match) {
        var index = +match.slice(1, -1), arg;
        if (index + 2 < templateArgs.length) {
          arg = templateArgs[index + 2];
          if (typeof arg === 'function') {
            return arg.toString().replace(/ ?\{[\s\S]*$/, '');
          } else if (typeof arg === 'undefined') {
            return 'undefined';
          } else if (typeof arg !== 'string') {
            return toJson(arg);
          }
          return arg;
        }
        return match;
      });
      message = message + '\nhttp://errors.angularjs.org/1.2.16/' + (module ? module + '/' : '') + code;
      for (i = 2; i < arguments.length; i++) {
        message = message + (i == 2 ? '?' : '&') + 'p' + (i - 2) + '=' + encodeURIComponent(stringify(arguments[i]));
      }
      return new Error(message);
    };
  }
  var lowercase = function (string) {
    return isString(string) ? string.toLowerCase() : string;
  };
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var uppercase = function (string) {
    return isString(string) ? string.toUpperCase() : string;
  };
  var manualLowercase = function (s) {
    return isString(s) ? s.replace(/[A-Z]/g, function (ch) {
      return String.fromCharCode(ch.charCodeAt(0) | 32);
    }) : s;
  };
  var manualUppercase = function (s) {
    return isString(s) ? s.replace(/[a-z]/g, function (ch) {
      return String.fromCharCode(ch.charCodeAt(0) & ~32);
    }) : s;
  };
  if ('i' !== 'I'.toLowerCase()) {
    lowercase = manualLowercase;
    uppercase = manualUppercase;
  }
  var msie, jqLite, jQuery, slice = [].slice, push = [].push, toString = Object.prototype.toString, ngMinErr = minErr('ng'), _angular = window.angular, angular = window.angular || (window.angular = {}), angularModule, nodeName_, uid = [
      '0',
      '0',
      '0'
    ];
  msie = int((/msie (\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
  if (isNaN(msie)) {
    msie = int((/trident\/.*; rv:(\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
  }
  function isArrayLike(obj) {
    if (obj == null || isWindow(obj)) {
      return false;
    }
    var length = obj.length;
    if (obj.nodeType === 1 && length) {
      return true;
    }
    return isString(obj) || isArray(obj) || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
  }
  function forEach(obj, iterator, context) {
    var key;
    if (obj) {
      if (isFunction(obj)) {
        for (key in obj) {
          if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
            iterator.call(context, obj[key], key);
          }
        }
      } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context);
      } else if (isArrayLike(obj)) {
        for (key = 0; key < obj.length; key++)
          iterator.call(context, obj[key], key);
      } else {
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            iterator.call(context, obj[key], key);
          }
        }
      }
    }
    return obj;
  }
  function sortedKeys(obj) {
    var keys = [];
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        keys.push(key);
      }
    }
    return keys.sort();
  }
  function forEachSorted(obj, iterator, context) {
    var keys = sortedKeys(obj);
    for (var i = 0; i < keys.length; i++) {
      iterator.call(context, obj[keys[i]], keys[i]);
    }
    return keys;
  }
  function reverseParams(iteratorFn) {
    return function (value, key) {
      iteratorFn(key, value);
    };
  }
  function nextUid() {
    var index = uid.length;
    var digit;
    while (index) {
      index--;
      digit = uid[index].charCodeAt(0);
      if (digit == 57) {
        uid[index] = 'A';
        return uid.join('');
      }
      if (digit == 90) {
        uid[index] = '0';
      } else {
        uid[index] = String.fromCharCode(digit + 1);
        return uid.join('');
      }
    }
    uid.unshift('0');
    return uid.join('');
  }
  function setHashKey(obj, h) {
    if (h) {
      obj.$$hashKey = h;
    } else {
      delete obj.$$hashKey;
    }
  }
  function extend(dst) {
    var h = dst.$$hashKey;
    forEach(arguments, function (obj) {
      if (obj !== dst) {
        forEach(obj, function (value, key) {
          dst[key] = value;
        });
      }
    });
    setHashKey(dst, h);
    return dst;
  }
  function int(str) {
    return parseInt(str, 10);
  }
  function inherit(parent, extra) {
    return extend(new (extend(function () {
    }, { prototype: parent }))(), extra);
  }
  function noop() {
  }
  noop.$inject = [];
  function identity($) {
    return $;
  }
  identity.$inject = [];
  function valueFn(value) {
    return function () {
      return value;
    };
  }
  function isUndefined(value) {
    return typeof value === 'undefined';
  }
  function isDefined(value) {
    return typeof value !== 'undefined';
  }
  function isObject(value) {
    return value != null && typeof value === 'object';
  }
  function isString(value) {
    return typeof value === 'string';
  }
  function isNumber(value) {
    return typeof value === 'number';
  }
  function isDate(value) {
    return toString.call(value) === '[object Date]';
  }
  function isArray(value) {
    return toString.call(value) === '[object Array]';
  }
  function isFunction(value) {
    return typeof value === 'function';
  }
  function isRegExp(value) {
    return toString.call(value) === '[object RegExp]';
  }
  function isWindow(obj) {
    return obj && obj.document && obj.location && obj.alert && obj.setInterval;
  }
  function isScope(obj) {
    return obj && obj.$evalAsync && obj.$watch;
  }
  function isFile(obj) {
    return toString.call(obj) === '[object File]';
  }
  function isBlob(obj) {
    return toString.call(obj) === '[object Blob]';
  }
  function isBoolean(value) {
    return typeof value === 'boolean';
  }
  var trim = function () {
      if (!String.prototype.trim) {
        return function (value) {
          return isString(value) ? value.replace(/^\s\s*/, '').replace(/\s\s*$/, '') : value;
        };
      }
      return function (value) {
        return isString(value) ? value.trim() : value;
      };
    }();
  function isElement(node) {
    return !!(node && (node.nodeName || node.prop && node.attr && node.find));
  }
  function makeMap(str) {
    var obj = {}, items = str.split(','), i;
    for (i = 0; i < items.length; i++)
      obj[items[i]] = true;
    return obj;
  }
  if (msie < 9) {
    nodeName_ = function (element) {
      element = element.nodeName ? element : element[0];
      return element.scopeName && element.scopeName != 'HTML' ? uppercase(element.scopeName + ':' + element.nodeName) : element.nodeName;
    };
  } else {
    nodeName_ = function (element) {
      return element.nodeName ? element.nodeName : element[0].nodeName;
    };
  }
  function map(obj, iterator, context) {
    var results = [];
    forEach(obj, function (value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  }
  function size(obj, ownPropsOnly) {
    var count = 0, key;
    if (isArray(obj) || isString(obj)) {
      return obj.length;
    } else if (isObject(obj)) {
      for (key in obj)
        if (!ownPropsOnly || obj.hasOwnProperty(key))
          count++;
    }
    return count;
  }
  function includes(array, obj) {
    return indexOf(array, obj) != -1;
  }
  function indexOf(array, obj) {
    if (array.indexOf)
      return array.indexOf(obj);
    for (var i = 0; i < array.length; i++) {
      if (obj === array[i])
        return i;
    }
    return -1;
  }
  function arrayRemove(array, value) {
    var index = indexOf(array, value);
    if (index >= 0)
      array.splice(index, 1);
    return value;
  }
  function isLeafNode(node) {
    if (node) {
      switch (node.nodeName) {
      case 'OPTION':
      case 'PRE':
      case 'TITLE':
        return true;
      }
    }
    return false;
  }
  function copy(source, destination) {
    if (isWindow(source) || isScope(source)) {
      throw ngMinErr('cpws', 'Can\'t copy! Making copies of Window or Scope instances is not supported.');
    }
    if (!destination) {
      destination = source;
      if (source) {
        if (isArray(source)) {
          destination = copy(source, []);
        } else if (isDate(source)) {
          destination = new Date(source.getTime());
        } else if (isRegExp(source)) {
          destination = new RegExp(source.source);
        } else if (isObject(source)) {
          destination = copy(source, {});
        }
      }
    } else {
      if (source === destination)
        throw ngMinErr('cpi', 'Can\'t copy! Source and destination are identical.');
      if (isArray(source)) {
        destination.length = 0;
        for (var i = 0; i < source.length; i++) {
          destination.push(copy(source[i]));
        }
      } else {
        var h = destination.$$hashKey;
        forEach(destination, function (value, key) {
          delete destination[key];
        });
        for (var key in source) {
          destination[key] = copy(source[key]);
        }
        setHashKey(destination, h);
      }
    }
    return destination;
  }
  function shallowCopy(src, dst) {
    dst = dst || {};
    for (var key in src) {
      if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
    return dst;
  }
  function equals(o1, o2) {
    if (o1 === o2)
      return true;
    if (o1 === null || o2 === null)
      return false;
    if (o1 !== o1 && o2 !== o2)
      return true;
    var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
    if (t1 == t2) {
      if (t1 == 'object') {
        if (isArray(o1)) {
          if (!isArray(o2))
            return false;
          if ((length = o1.length) == o2.length) {
            for (key = 0; key < length; key++) {
              if (!equals(o1[key], o2[key]))
                return false;
            }
            return true;
          }
        } else if (isDate(o1)) {
          return isDate(o2) && o1.getTime() == o2.getTime();
        } else if (isRegExp(o1) && isRegExp(o2)) {
          return o1.toString() == o2.toString();
        } else {
          if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2))
            return false;
          keySet = {};
          for (key in o1) {
            if (key.charAt(0) === '$' || isFunction(o1[key]))
              continue;
            if (!equals(o1[key], o2[key]))
              return false;
            keySet[key] = true;
          }
          for (key in o2) {
            if (!keySet.hasOwnProperty(key) && key.charAt(0) !== '$' && o2[key] !== undefined && !isFunction(o2[key]))
              return false;
          }
          return true;
        }
      }
    }
    return false;
  }
  function csp() {
    return document.securityPolicy && document.securityPolicy.isActive || document.querySelector && !!(document.querySelector('[ng-csp]') || document.querySelector('[data-ng-csp]'));
  }
  function concat(array1, array2, index) {
    return array1.concat(slice.call(array2, index));
  }
  function sliceArgs(args, startIndex) {
    return slice.call(args, startIndex || 0);
  }
  function bind(self, fn) {
    var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
    if (isFunction(fn) && !(fn instanceof RegExp)) {
      return curryArgs.length ? function () {
        return arguments.length ? fn.apply(self, curryArgs.concat(slice.call(arguments, 0))) : fn.apply(self, curryArgs);
      } : function () {
        return arguments.length ? fn.apply(self, arguments) : fn.call(self);
      };
    } else {
      return fn;
    }
  }
  function toJsonReplacer(key, value) {
    var val = value;
    if (typeof key === 'string' && key.charAt(0) === '$') {
      val = undefined;
    } else if (isWindow(value)) {
      val = '$WINDOW';
    } else if (value && document === value) {
      val = '$DOCUMENT';
    } else if (isScope(value)) {
      val = '$SCOPE';
    }
    return val;
  }
  function toJson(obj, pretty) {
    if (typeof obj === 'undefined')
      return undefined;
    return JSON.stringify(obj, toJsonReplacer, pretty ? '  ' : null);
  }
  function fromJson(json) {
    return isString(json) ? JSON.parse(json) : json;
  }
  function toBoolean(value) {
    if (typeof value === 'function') {
      value = true;
    } else if (value && value.length !== 0) {
      var v = lowercase('' + value);
      value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
    } else {
      value = false;
    }
    return value;
  }
  function startingTag(element) {
    element = jqLite(element).clone();
    try {
      element.empty();
    } catch (e) {
    }
    var TEXT_NODE = 3;
    var elemHtml = jqLite('<div>').append(element).html();
    try {
      return element[0].nodeType === TEXT_NODE ? lowercase(elemHtml) : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function (match, nodeName) {
        return '<' + lowercase(nodeName);
      });
    } catch (e) {
      return lowercase(elemHtml);
    }
  }
  function tryDecodeURIComponent(value) {
    try {
      return decodeURIComponent(value);
    } catch (e) {
    }
  }
  function parseKeyValue(keyValue) {
    var obj = {}, key_value, key;
    forEach((keyValue || '').split('&'), function (keyValue) {
      if (keyValue) {
        key_value = keyValue.split('=');
        key = tryDecodeURIComponent(key_value[0]);
        if (isDefined(key)) {
          var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
          if (!obj[key]) {
            obj[key] = val;
          } else if (isArray(obj[key])) {
            obj[key].push(val);
          } else {
            obj[key] = [
              obj[key],
              val
            ];
          }
        }
      }
    });
    return obj;
  }
  function toKeyValue(obj) {
    var parts = [];
    forEach(obj, function (value, key) {
      if (isArray(value)) {
        forEach(value, function (arrayValue) {
          parts.push(encodeUriQuery(key, true) + (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
        });
      } else {
        parts.push(encodeUriQuery(key, true) + (value === true ? '' : '=' + encodeUriQuery(value, true)));
      }
    });
    return parts.length ? parts.join('&') : '';
  }
  function encodeUriSegment(val) {
    return encodeUriQuery(val, true).replace(/%26/gi, '&').replace(/%3D/gi, '=').replace(/%2B/gi, '+');
  }
  function encodeUriQuery(val, pctEncodeSpaces) {
    return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');
  }
  function angularInit(element, bootstrap) {
    var elements = [element], appElement, module, names = [
        'ng:app',
        'ng-app',
        'x-ng-app',
        'data-ng-app'
      ], NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;
    function append(element) {
      element && elements.push(element);
    }
    forEach(names, function (name) {
      names[name] = true;
      append(document.getElementById(name));
      name = name.replace(':', '\\:');
      if (element.querySelectorAll) {
        forEach(element.querySelectorAll('.' + name), append);
        forEach(element.querySelectorAll('.' + name + '\\:'), append);
        forEach(element.querySelectorAll('[' + name + ']'), append);
      }
    });
    forEach(elements, function (element) {
      if (!appElement) {
        var className = ' ' + element.className + ' ';
        var match = NG_APP_CLASS_REGEXP.exec(className);
        if (match) {
          appElement = element;
          module = (match[2] || '').replace(/\s+/g, ',');
        } else {
          forEach(element.attributes, function (attr) {
            if (!appElement && names[attr.name]) {
              appElement = element;
              module = attr.value;
            }
          });
        }
      }
    });
    if (appElement) {
      bootstrap(appElement, module ? [module] : []);
    }
  }
  function bootstrap(element, modules) {
    var doBootstrap = function () {
      element = jqLite(element);
      if (element.injector()) {
        var tag = element[0] === document ? 'document' : startingTag(element);
        throw ngMinErr('btstrpd', 'App Already Bootstrapped with this Element \'{0}\'', tag);
      }
      modules = modules || [];
      modules.unshift([
        '$provide',
        function ($provide) {
          $provide.value('$rootElement', element);
        }
      ]);
      modules.unshift('ng');
      var injector = createInjector(modules);
      injector.invoke([
        '$rootScope',
        '$rootElement',
        '$compile',
        '$injector',
        '$animate',
        function (scope, element, compile, injector, animate) {
          scope.$apply(function () {
            element.data('$injector', injector);
            compile(element)(scope);
          });
        }
      ]);
      return injector;
    };
    var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
    if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
      return doBootstrap();
    }
    window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
    angular.resumeBootstrap = function (extraModules) {
      forEach(extraModules, function (module) {
        modules.push(module);
      });
      doBootstrap();
    };
  }
  var SNAKE_CASE_REGEXP = /[A-Z]/g;
  function snake_case(name, separator) {
    separator = separator || '_';
    return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }
  function bindJQuery() {
    jQuery = window.jQuery;
    if (jQuery) {
      jqLite = jQuery;
      extend(jQuery.fn, {
        scope: JQLitePrototype.scope,
        isolateScope: JQLitePrototype.isolateScope,
        controller: JQLitePrototype.controller,
        injector: JQLitePrototype.injector,
        inheritedData: JQLitePrototype.inheritedData
      });
      jqLitePatchJQueryRemove('remove', true, true, false);
      jqLitePatchJQueryRemove('empty', false, false, false);
      jqLitePatchJQueryRemove('html', false, false, true);
    } else {
      jqLite = JQLite;
    }
    angular.element = jqLite;
  }
  function assertArg(arg, name, reason) {
    if (!arg) {
      throw ngMinErr('areq', 'Argument \'{0}\' is {1}', name || '?', reason || 'required');
    }
    return arg;
  }
  function assertArgFn(arg, name, acceptArrayAnnotation) {
    if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
    }
    assertArg(isFunction(arg), name, 'not a function, got ' + (arg && typeof arg == 'object' ? arg.constructor.name || 'Object' : typeof arg));
    return arg;
  }
  function assertNotHasOwnProperty(name, context) {
    if (name === 'hasOwnProperty') {
      throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
    }
  }
  function getter(obj, path, bindFnToScope) {
    if (!path)
      return obj;
    var keys = path.split('.');
    var key;
    var lastInstance = obj;
    var len = keys.length;
    for (var i = 0; i < len; i++) {
      key = keys[i];
      if (obj) {
        obj = (lastInstance = obj)[key];
      }
    }
    if (!bindFnToScope && isFunction(obj)) {
      return bind(lastInstance, obj);
    }
    return obj;
  }
  function getBlockElements(nodes) {
    var startNode = nodes[0], endNode = nodes[nodes.length - 1];
    if (startNode === endNode) {
      return jqLite(startNode);
    }
    var element = startNode;
    var elements = [element];
    do {
      element = element.nextSibling;
      if (!element)
        break;
      elements.push(element);
    } while (element !== endNode);
    return jqLite(elements);
  }
  function setupModuleLoader(window) {
    var $injectorMinErr = minErr('$injector');
    var ngMinErr = minErr('ng');
    function ensure(obj, name, factory) {
      return obj[name] || (obj[name] = factory());
    }
    var angular = ensure(window, 'angular', Object);
    angular.$$minErr = angular.$$minErr || minErr;
    return ensure(angular, 'module', function () {
      var modules = {};
      return function module(name, requires, configFn) {
        var assertNotHasOwnProperty = function (name, context) {
          if (name === 'hasOwnProperty') {
            throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
          }
        };
        assertNotHasOwnProperty(name, 'module');
        if (requires && modules.hasOwnProperty(name)) {
          modules[name] = null;
        }
        return ensure(modules, name, function () {
          if (!requires) {
            throw $injectorMinErr('nomod', 'Module \'{0}\' is not available! You either misspelled ' + 'the module name or forgot to load it. If registering a module ensure that you ' + 'specify the dependencies as the second argument.', name);
          }
          var invokeQueue = [];
          var runBlocks = [];
          var config = invokeLater('$injector', 'invoke');
          var moduleInstance = {
              _invokeQueue: invokeQueue,
              _runBlocks: runBlocks,
              requires: requires,
              name: name,
              provider: invokeLater('$provide', 'provider'),
              factory: invokeLater('$provide', 'factory'),
              service: invokeLater('$provide', 'service'),
              value: invokeLater('$provide', 'value'),
              constant: invokeLater('$provide', 'constant', 'unshift'),
              animation: invokeLater('$animateProvider', 'register'),
              filter: invokeLater('$filterProvider', 'register'),
              controller: invokeLater('$controllerProvider', 'register'),
              directive: invokeLater('$compileProvider', 'directive'),
              config: config,
              run: function (block) {
                runBlocks.push(block);
                return this;
              }
            };
          if (configFn) {
            config(configFn);
          }
          return moduleInstance;
          function invokeLater(provider, method, insertMethod) {
            return function () {
              invokeQueue[insertMethod || 'push']([
                provider,
                method,
                arguments
              ]);
              return moduleInstance;
            };
          }
        });
      };
    });
  }
  var version = {
      full: '1.2.16',
      major: 1,
      minor: 2,
      dot: 16,
      codeName: 'badger-enumeration'
    };
  function publishExternalAPI(angular) {
    extend(angular, {
      'bootstrap': bootstrap,
      'copy': copy,
      'extend': extend,
      'equals': equals,
      'element': jqLite,
      'forEach': forEach,
      'injector': createInjector,
      'noop': noop,
      'bind': bind,
      'toJson': toJson,
      'fromJson': fromJson,
      'identity': identity,
      'isUndefined': isUndefined,
      'isDefined': isDefined,
      'isString': isString,
      'isFunction': isFunction,
      'isObject': isObject,
      'isNumber': isNumber,
      'isElement': isElement,
      'isArray': isArray,
      'version': version,
      'isDate': isDate,
      'lowercase': lowercase,
      'uppercase': uppercase,
      'callbacks': { counter: 0 },
      '$$minErr': minErr,
      '$$csp': csp
    });
    angularModule = setupModuleLoader(window);
    try {
      angularModule('ngLocale');
    } catch (e) {
      angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
    }
    angularModule('ng', ['ngLocale'], [
      '$provide',
      function ngModule($provide) {
        $provide.provider({ $$sanitizeUri: $$SanitizeUriProvider });
        $provide.provider('$compile', $CompileProvider).directive({
          a: htmlAnchorDirective,
          input: inputDirective,
          textarea: inputDirective,
          form: formDirective,
          script: scriptDirective,
          select: selectDirective,
          style: styleDirective,
          option: optionDirective,
          ngBind: ngBindDirective,
          ngBindHtml: ngBindHtmlDirective,
          ngBindTemplate: ngBindTemplateDirective,
          ngClass: ngClassDirective,
          ngClassEven: ngClassEvenDirective,
          ngClassOdd: ngClassOddDirective,
          ngCloak: ngCloakDirective,
          ngController: ngControllerDirective,
          ngForm: ngFormDirective,
          ngHide: ngHideDirective,
          ngIf: ngIfDirective,
          ngInclude: ngIncludeDirective,
          ngInit: ngInitDirective,
          ngNonBindable: ngNonBindableDirective,
          ngPluralize: ngPluralizeDirective,
          ngRepeat: ngRepeatDirective,
          ngShow: ngShowDirective,
          ngStyle: ngStyleDirective,
          ngSwitch: ngSwitchDirective,
          ngSwitchWhen: ngSwitchWhenDirective,
          ngSwitchDefault: ngSwitchDefaultDirective,
          ngOptions: ngOptionsDirective,
          ngTransclude: ngTranscludeDirective,
          ngModel: ngModelDirective,
          ngList: ngListDirective,
          ngChange: ngChangeDirective,
          required: requiredDirective,
          ngRequired: requiredDirective,
          ngValue: ngValueDirective
        }).directive({ ngInclude: ngIncludeFillContentDirective }).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);
        $provide.provider({
          $anchorScroll: $AnchorScrollProvider,
          $animate: $AnimateProvider,
          $browser: $BrowserProvider,
          $cacheFactory: $CacheFactoryProvider,
          $controller: $ControllerProvider,
          $document: $DocumentProvider,
          $exceptionHandler: $ExceptionHandlerProvider,
          $filter: $FilterProvider,
          $interpolate: $InterpolateProvider,
          $interval: $IntervalProvider,
          $http: $HttpProvider,
          $httpBackend: $HttpBackendProvider,
          $location: $LocationProvider,
          $log: $LogProvider,
          $parse: $ParseProvider,
          $rootScope: $RootScopeProvider,
          $q: $QProvider,
          $sce: $SceProvider,
          $sceDelegate: $SceDelegateProvider,
          $sniffer: $SnifferProvider,
          $templateCache: $TemplateCacheProvider,
          $timeout: $TimeoutProvider,
          $window: $WindowProvider,
          $$rAF: $$RAFProvider,
          $$asyncCallback: $$AsyncCallbackProvider
        });
      }
    ]);
  }
  var jqCache = JQLite.cache = {}, jqName = JQLite.expando = 'ng-' + new Date().getTime(), jqId = 1, addEventListenerFn = window.document.addEventListener ? function (element, type, fn) {
      element.addEventListener(type, fn, false);
    } : function (element, type, fn) {
      element.attachEvent('on' + type, fn);
    }, removeEventListenerFn = window.document.removeEventListener ? function (element, type, fn) {
      element.removeEventListener(type, fn, false);
    } : function (element, type, fn) {
      element.detachEvent('on' + type, fn);
    };
  var jqData = JQLite._data = function (node) {
      return this.cache[node[this.expando]] || {};
    };
  function jqNextId() {
    return ++jqId;
  }
  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
  var MOZ_HACK_REGEXP = /^moz([A-Z])/;
  var jqLiteMinErr = minErr('jqLite');
  function camelCase(name) {
    return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).replace(MOZ_HACK_REGEXP, 'Moz$1');
  }
  function jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments) {
    var originalJqFn = jQuery.fn[name];
    originalJqFn = originalJqFn.$original || originalJqFn;
    removePatch.$original = originalJqFn;
    jQuery.fn[name] = removePatch;
    function removePatch(param) {
      var list = filterElems && param ? [this.filter(param)] : [this], fireEvent = dispatchThis, set, setIndex, setLength, element, childIndex, childLength, children;
      if (!getterIfNoArguments || param != null) {
        while (list.length) {
          set = list.shift();
          for (setIndex = 0, setLength = set.length; setIndex < setLength; setIndex++) {
            element = jqLite(set[setIndex]);
            if (fireEvent) {
              element.triggerHandler('$destroy');
            } else {
              fireEvent = !fireEvent;
            }
            for (childIndex = 0, childLength = (children = element.children()).length; childIndex < childLength; childIndex++) {
              list.push(jQuery(children[childIndex]));
            }
          }
        }
      }
      return originalJqFn.apply(this, arguments);
    }
  }
  var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
  var HTML_REGEXP = /<|&#?\w+;/;
  var TAG_NAME_REGEXP = /<([\w:]+)/;
  var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;
  var wrapMap = {
      'option': [
        1,
        '<select multiple="multiple">',
        '</select>'
      ],
      'thead': [
        1,
        '<table>',
        '</table>'
      ],
      'col': [
        2,
        '<table><colgroup>',
        '</colgroup></table>'
      ],
      'tr': [
        2,
        '<table><tbody>',
        '</tbody></table>'
      ],
      'td': [
        3,
        '<table><tbody><tr>',
        '</tr></tbody></table>'
      ],
      '_default': [
        0,
        '',
        ''
      ]
    };
  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;
  function jqLiteIsTextNode(html) {
    return !HTML_REGEXP.test(html);
  }
  function jqLiteBuildFragment(html, context) {
    var elem, tmp, tag, wrap, fragment = context.createDocumentFragment(), nodes = [], i, j, jj;
    if (jqLiteIsTextNode(html)) {
      nodes.push(context.createTextNode(html));
    } else {
      tmp = fragment.appendChild(context.createElement('div'));
      tag = (TAG_NAME_REGEXP.exec(html) || [
        '',
        ''
      ])[1].toLowerCase();
      wrap = wrapMap[tag] || wrapMap._default;
      tmp.innerHTML = '<div>&#160;</div>' + wrap[1] + html.replace(XHTML_TAG_REGEXP, '<$1></$2>') + wrap[2];
      tmp.removeChild(tmp.firstChild);
      i = wrap[0];
      while (i--) {
        tmp = tmp.lastChild;
      }
      for (j = 0, jj = tmp.childNodes.length; j < jj; ++j)
        nodes.push(tmp.childNodes[j]);
      tmp = fragment.firstChild;
      tmp.textContent = '';
    }
    fragment.textContent = '';
    fragment.innerHTML = '';
    return nodes;
  }
  function jqLiteParseHTML(html, context) {
    context = context || document;
    var parsed;
    if (parsed = SINGLE_TAG_REGEXP.exec(html)) {
      return [context.createElement(parsed[1])];
    }
    return jqLiteBuildFragment(html, context);
  }
  function JQLite(element) {
    if (element instanceof JQLite) {
      return element;
    }
    if (isString(element)) {
      element = trim(element);
    }
    if (!(this instanceof JQLite)) {
      if (isString(element) && element.charAt(0) != '<') {
        throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
      }
      return new JQLite(element);
    }
    if (isString(element)) {
      jqLiteAddNodes(this, jqLiteParseHTML(element));
      var fragment = jqLite(document.createDocumentFragment());
      fragment.append(this);
    } else {
      jqLiteAddNodes(this, element);
    }
  }
  function jqLiteClone(element) {
    return element.cloneNode(true);
  }
  function jqLiteDealoc(element) {
    jqLiteRemoveData(element);
    for (var i = 0, children = element.childNodes || []; i < children.length; i++) {
      jqLiteDealoc(children[i]);
    }
  }
  function jqLiteOff(element, type, fn, unsupported) {
    if (isDefined(unsupported))
      throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');
    var events = jqLiteExpandoStore(element, 'events'), handle = jqLiteExpandoStore(element, 'handle');
    if (!handle)
      return;
    if (isUndefined(type)) {
      forEach(events, function (eventHandler, type) {
        removeEventListenerFn(element, type, eventHandler);
        delete events[type];
      });
    } else {
      forEach(type.split(' '), function (type) {
        if (isUndefined(fn)) {
          removeEventListenerFn(element, type, events[type]);
          delete events[type];
        } else {
          arrayRemove(events[type] || [], fn);
        }
      });
    }
  }
  function jqLiteRemoveData(element, name) {
    var expandoId = element[jqName], expandoStore = jqCache[expandoId];
    if (expandoStore) {
      if (name) {
        delete jqCache[expandoId].data[name];
        return;
      }
      if (expandoStore.handle) {
        expandoStore.events.$destroy && expandoStore.handle({}, '$destroy');
        jqLiteOff(element);
      }
      delete jqCache[expandoId];
      element[jqName] = undefined;
    }
  }
  function jqLiteExpandoStore(element, key, value) {
    var expandoId = element[jqName], expandoStore = jqCache[expandoId || -1];
    if (isDefined(value)) {
      if (!expandoStore) {
        element[jqName] = expandoId = jqNextId();
        expandoStore = jqCache[expandoId] = {};
      }
      expandoStore[key] = value;
    } else {
      return expandoStore && expandoStore[key];
    }
  }
  function jqLiteData(element, key, value) {
    var data = jqLiteExpandoStore(element, 'data'), isSetter = isDefined(value), keyDefined = !isSetter && isDefined(key), isSimpleGetter = keyDefined && !isObject(key);
    if (!data && !isSimpleGetter) {
      jqLiteExpandoStore(element, 'data', data = {});
    }
    if (isSetter) {
      data[key] = value;
    } else {
      if (keyDefined) {
        if (isSimpleGetter) {
          return data && data[key];
        } else {
          extend(data, key);
        }
      } else {
        return data;
      }
    }
  }
  function jqLiteHasClass(element, selector) {
    if (!element.getAttribute)
      return false;
    return (' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').indexOf(' ' + selector + ' ') > -1;
  }
  function jqLiteRemoveClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      forEach(cssClasses.split(' '), function (cssClass) {
        element.setAttribute('class', trim((' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').replace(' ' + trim(cssClass) + ' ', ' ')));
      });
    }
  }
  function jqLiteAddClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ');
      forEach(cssClasses.split(' '), function (cssClass) {
        cssClass = trim(cssClass);
        if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
          existingClasses += cssClass + ' ';
        }
      });
      element.setAttribute('class', trim(existingClasses));
    }
  }
  function jqLiteAddNodes(root, elements) {
    if (elements) {
      elements = !elements.nodeName && isDefined(elements.length) && !isWindow(elements) ? elements : [elements];
      for (var i = 0; i < elements.length; i++) {
        root.push(elements[i]);
      }
    }
  }
  function jqLiteController(element, name) {
    return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
  }
  function jqLiteInheritedData(element, name, value) {
    element = jqLite(element);
    if (element[0].nodeType == 9) {
      element = element.find('html');
    }
    var names = isArray(name) ? name : [name];
    while (element.length) {
      var node = element[0];
      for (var i = 0, ii = names.length; i < ii; i++) {
        if ((value = element.data(names[i])) !== undefined)
          return value;
      }
      element = jqLite(node.parentNode || node.nodeType === 11 && node.host);
    }
  }
  function jqLiteEmpty(element) {
    for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
      jqLiteDealoc(childNodes[i]);
    }
    while (element.firstChild) {
      element.removeChild(element.firstChild);
    }
  }
  var JQLitePrototype = JQLite.prototype = {
      ready: function (fn) {
        var fired = false;
        function trigger() {
          if (fired)
            return;
          fired = true;
          fn();
        }
        if (document.readyState === 'complete') {
          setTimeout(trigger);
        } else {
          this.on('DOMContentLoaded', trigger);
          JQLite(window).on('load', trigger);
        }
      },
      toString: function () {
        var value = [];
        forEach(this, function (e) {
          value.push('' + e);
        });
        return '[' + value.join(', ') + ']';
      },
      eq: function (index) {
        return index >= 0 ? jqLite(this[index]) : jqLite(this[this.length + index]);
      },
      length: 0,
      push: push,
      sort: [].sort,
      splice: [].splice
    };
  var BOOLEAN_ATTR = {};
  forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function (value) {
    BOOLEAN_ATTR[lowercase(value)] = value;
  });
  var BOOLEAN_ELEMENTS = {};
  forEach('input,select,option,textarea,button,form,details'.split(','), function (value) {
    BOOLEAN_ELEMENTS[uppercase(value)] = true;
  });
  function getBooleanAttrName(element, name) {
    var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
    return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;
  }
  forEach({
    data: jqLiteData,
    inheritedData: jqLiteInheritedData,
    scope: function (element) {
      return jqLite(element).data('$scope') || jqLiteInheritedData(element.parentNode || element, [
        '$isolateScope',
        '$scope'
      ]);
    },
    isolateScope: function (element) {
      return jqLite(element).data('$isolateScope') || jqLite(element).data('$isolateScopeNoTemplate');
    },
    controller: jqLiteController,
    injector: function (element) {
      return jqLiteInheritedData(element, '$injector');
    },
    removeAttr: function (element, name) {
      element.removeAttribute(name);
    },
    hasClass: jqLiteHasClass,
    css: function (element, name, value) {
      name = camelCase(name);
      if (isDefined(value)) {
        element.style[name] = value;
      } else {
        var val;
        if (msie <= 8) {
          val = element.currentStyle && element.currentStyle[name];
          if (val === '')
            val = 'auto';
        }
        val = val || element.style[name];
        if (msie <= 8) {
          val = val === '' ? undefined : val;
        }
        return val;
      }
    },
    attr: function (element, name, value) {
      var lowercasedName = lowercase(name);
      if (BOOLEAN_ATTR[lowercasedName]) {
        if (isDefined(value)) {
          if (!!value) {
            element[name] = true;
            element.setAttribute(name, lowercasedName);
          } else {
            element[name] = false;
            element.removeAttribute(lowercasedName);
          }
        } else {
          return element[name] || (element.attributes.getNamedItem(name) || noop).specified ? lowercasedName : undefined;
        }
      } else if (isDefined(value)) {
        element.setAttribute(name, value);
      } else if (element.getAttribute) {
        var ret = element.getAttribute(name, 2);
        return ret === null ? undefined : ret;
      }
    },
    prop: function (element, name, value) {
      if (isDefined(value)) {
        element[name] = value;
      } else {
        return element[name];
      }
    },
    text: function () {
      var NODE_TYPE_TEXT_PROPERTY = [];
      if (msie < 9) {
        NODE_TYPE_TEXT_PROPERTY[1] = 'innerText';
        NODE_TYPE_TEXT_PROPERTY[3] = 'nodeValue';
      } else {
        NODE_TYPE_TEXT_PROPERTY[1] = NODE_TYPE_TEXT_PROPERTY[3] = 'textContent';
      }
      getText.$dv = '';
      return getText;
      function getText(element, value) {
        var textProp = NODE_TYPE_TEXT_PROPERTY[element.nodeType];
        if (isUndefined(value)) {
          return textProp ? element[textProp] : '';
        }
        element[textProp] = value;
      }
    }(),
    val: function (element, value) {
      if (isUndefined(value)) {
        if (nodeName_(element) === 'SELECT' && element.multiple) {
          var result = [];
          forEach(element.options, function (option) {
            if (option.selected) {
              result.push(option.value || option.text);
            }
          });
          return result.length === 0 ? null : result;
        }
        return element.value;
      }
      element.value = value;
    },
    html: function (element, value) {
      if (isUndefined(value)) {
        return element.innerHTML;
      }
      for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
        jqLiteDealoc(childNodes[i]);
      }
      element.innerHTML = value;
    },
    empty: jqLiteEmpty
  }, function (fn, name) {
    JQLite.prototype[name] = function (arg1, arg2) {
      var i, key;
      if (fn !== jqLiteEmpty && (fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController) ? arg1 : arg2) === undefined) {
        if (isObject(arg1)) {
          for (i = 0; i < this.length; i++) {
            if (fn === jqLiteData) {
              fn(this[i], arg1);
            } else {
              for (key in arg1) {
                fn(this[i], key, arg1[key]);
              }
            }
          }
          return this;
        } else {
          var value = fn.$dv;
          var jj = value === undefined ? Math.min(this.length, 1) : this.length;
          for (var j = 0; j < jj; j++) {
            var nodeValue = fn(this[j], arg1, arg2);
            value = value ? value + nodeValue : nodeValue;
          }
          return value;
        }
      } else {
        for (i = 0; i < this.length; i++) {
          fn(this[i], arg1, arg2);
        }
        return this;
      }
    };
  });
  function createEventHandler(element, events) {
    var eventHandler = function (event, type) {
      if (!event.preventDefault) {
        event.preventDefault = function () {
          event.returnValue = false;
        };
      }
      if (!event.stopPropagation) {
        event.stopPropagation = function () {
          event.cancelBubble = true;
        };
      }
      if (!event.target) {
        event.target = event.srcElement || document;
      }
      if (isUndefined(event.defaultPrevented)) {
        var prevent = event.preventDefault;
        event.preventDefault = function () {
          event.defaultPrevented = true;
          prevent.call(event);
        };
        event.defaultPrevented = false;
      }
      event.isDefaultPrevented = function () {
        return event.defaultPrevented || event.returnValue === false;
      };
      var eventHandlersCopy = shallowCopy(events[type || event.type] || []);
      forEach(eventHandlersCopy, function (fn) {
        fn.call(element, event);
      });
      if (msie <= 8) {
        event.preventDefault = null;
        event.stopPropagation = null;
        event.isDefaultPrevented = null;
      } else {
        delete event.preventDefault;
        delete event.stopPropagation;
        delete event.isDefaultPrevented;
      }
    };
    eventHandler.elem = element;
    return eventHandler;
  }
  forEach({
    removeData: jqLiteRemoveData,
    dealoc: jqLiteDealoc,
    on: function onFn(element, type, fn, unsupported) {
      if (isDefined(unsupported))
        throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
      var events = jqLiteExpandoStore(element, 'events'), handle = jqLiteExpandoStore(element, 'handle');
      if (!events)
        jqLiteExpandoStore(element, 'events', events = {});
      if (!handle)
        jqLiteExpandoStore(element, 'handle', handle = createEventHandler(element, events));
      forEach(type.split(' '), function (type) {
        var eventFns = events[type];
        if (!eventFns) {
          if (type == 'mouseenter' || type == 'mouseleave') {
            var contains = document.body.contains || document.body.compareDocumentPosition ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
              } : function (a, b) {
                if (b) {
                  while (b = b.parentNode) {
                    if (b === a) {
                      return true;
                    }
                  }
                }
                return false;
              };
            events[type] = [];
            var eventmap = {
                mouseleave: 'mouseout',
                mouseenter: 'mouseover'
              };
            onFn(element, eventmap[type], function (event) {
              var target = this, related = event.relatedTarget;
              if (!related || related !== target && !contains(target, related)) {
                handle(event, type);
              }
            });
          } else {
            addEventListenerFn(element, type, handle);
            events[type] = [];
          }
          eventFns = events[type];
        }
        eventFns.push(fn);
      });
    },
    off: jqLiteOff,
    one: function (element, type, fn) {
      element = jqLite(element);
      element.on(type, function onFn() {
        element.off(type, fn);
        element.off(type, onFn);
      });
      element.on(type, fn);
    },
    replaceWith: function (element, replaceNode) {
      var index, parent = element.parentNode;
      jqLiteDealoc(element);
      forEach(new JQLite(replaceNode), function (node) {
        if (index) {
          parent.insertBefore(node, index.nextSibling);
        } else {
          parent.replaceChild(node, element);
        }
        index = node;
      });
    },
    children: function (element) {
      var children = [];
      forEach(element.childNodes, function (element) {
        if (element.nodeType === 1)
          children.push(element);
      });
      return children;
    },
    contents: function (element) {
      return element.contentDocument || element.childNodes || [];
    },
    append: function (element, node) {
      forEach(new JQLite(node), function (child) {
        if (element.nodeType === 1 || element.nodeType === 11) {
          element.appendChild(child);
        }
      });
    },
    prepend: function (element, node) {
      if (element.nodeType === 1) {
        var index = element.firstChild;
        forEach(new JQLite(node), function (child) {
          element.insertBefore(child, index);
        });
      }
    },
    wrap: function (element, wrapNode) {
      wrapNode = jqLite(wrapNode)[0];
      var parent = element.parentNode;
      if (parent) {
        parent.replaceChild(wrapNode, element);
      }
      wrapNode.appendChild(element);
    },
    remove: function (element) {
      jqLiteDealoc(element);
      var parent = element.parentNode;
      if (parent)
        parent.removeChild(element);
    },
    after: function (element, newElement) {
      var index = element, parent = element.parentNode;
      forEach(new JQLite(newElement), function (node) {
        parent.insertBefore(node, index.nextSibling);
        index = node;
      });
    },
    addClass: jqLiteAddClass,
    removeClass: jqLiteRemoveClass,
    toggleClass: function (element, selector, condition) {
      if (selector) {
        forEach(selector.split(' '), function (className) {
          var classCondition = condition;
          if (isUndefined(classCondition)) {
            classCondition = !jqLiteHasClass(element, className);
          }
          (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
        });
      }
    },
    parent: function (element) {
      var parent = element.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    next: function (element) {
      if (element.nextElementSibling) {
        return element.nextElementSibling;
      }
      var elm = element.nextSibling;
      while (elm != null && elm.nodeType !== 1) {
        elm = elm.nextSibling;
      }
      return elm;
    },
    find: function (element, selector) {
      if (element.getElementsByTagName) {
        return element.getElementsByTagName(selector);
      } else {
        return [];
      }
    },
    clone: jqLiteClone,
    triggerHandler: function (element, eventName, eventData) {
      var eventFns = (jqLiteExpandoStore(element, 'events') || {})[eventName];
      eventData = eventData || [];
      var event = [{
            preventDefault: noop,
            stopPropagation: noop
          }];
      forEach(eventFns, function (fn) {
        fn.apply(element, event.concat(eventData));
      });
    }
  }, function (fn, name) {
    JQLite.prototype[name] = function (arg1, arg2, arg3) {
      var value;
      for (var i = 0; i < this.length; i++) {
        if (isUndefined(value)) {
          value = fn(this[i], arg1, arg2, arg3);
          if (isDefined(value)) {
            value = jqLite(value);
          }
        } else {
          jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
        }
      }
      return isDefined(value) ? value : this;
    };
    JQLite.prototype.bind = JQLite.prototype.on;
    JQLite.prototype.unbind = JQLite.prototype.off;
  });
  function hashKey(obj) {
    var objType = typeof obj, key;
    if (objType == 'object' && obj !== null) {
      if (typeof (key = obj.$$hashKey) == 'function') {
        key = obj.$$hashKey();
      } else if (key === undefined) {
        key = obj.$$hashKey = nextUid();
      }
    } else {
      key = obj;
    }
    return objType + ':' + key;
  }
  function HashMap(array) {
    forEach(array, this.put, this);
  }
  HashMap.prototype = {
    put: function (key, value) {
      this[hashKey(key)] = value;
    },
    get: function (key) {
      return this[hashKey(key)];
    },
    remove: function (key) {
      var value = this[key = hashKey(key)];
      delete this[key];
      return value;
    }
  };
  var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
  var FN_ARG_SPLIT = /,/;
  var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;
  var $injectorMinErr = minErr('$injector');
  function annotate(fn) {
    var $inject, fnText, argDecl, last;
    if (typeof fn == 'function') {
      if (!($inject = fn.$inject)) {
        $inject = [];
        if (fn.length) {
          fnText = fn.toString().replace(STRIP_COMMENTS, '');
          argDecl = fnText.match(FN_ARGS);
          forEach(argDecl[1].split(FN_ARG_SPLIT), function (arg) {
            arg.replace(FN_ARG, function (all, underscore, name) {
              $inject.push(name);
            });
          });
        }
        fn.$inject = $inject;
      }
    } else if (isArray(fn)) {
      last = fn.length - 1;
      assertArgFn(fn[last], 'fn');
      $inject = fn.slice(0, last);
    } else {
      assertArgFn(fn, 'fn', true);
    }
    return $inject;
  }
  function createInjector(modulesToLoad) {
    var INSTANTIATING = {}, providerSuffix = 'Provider', path = [], loadedModules = new HashMap(), providerCache = {
        $provide: {
          provider: supportObject(provider),
          factory: supportObject(factory),
          service: supportObject(service),
          value: supportObject(value),
          constant: supportObject(constant),
          decorator: decorator
        }
      }, providerInjector = providerCache.$injector = createInternalInjector(providerCache, function () {
        throw $injectorMinErr('unpr', 'Unknown provider: {0}', path.join(' <- '));
      }), instanceCache = {}, instanceInjector = instanceCache.$injector = createInternalInjector(instanceCache, function (servicename) {
        var provider = providerInjector.get(servicename + providerSuffix);
        return instanceInjector.invoke(provider.$get, provider);
      });
    forEach(loadModules(modulesToLoad), function (fn) {
      instanceInjector.invoke(fn || noop);
    });
    return instanceInjector;
    function supportObject(delegate) {
      return function (key, value) {
        if (isObject(key)) {
          forEach(key, reverseParams(delegate));
        } else {
          return delegate(key, value);
        }
      };
    }
    function provider(name, provider_) {
      assertNotHasOwnProperty(name, 'service');
      if (isFunction(provider_) || isArray(provider_)) {
        provider_ = providerInjector.instantiate(provider_);
      }
      if (!provider_.$get) {
        throw $injectorMinErr('pget', 'Provider \'{0}\' must define $get factory method.', name);
      }
      return providerCache[name + providerSuffix] = provider_;
    }
    function factory(name, factoryFn) {
      return provider(name, { $get: factoryFn });
    }
    function service(name, constructor) {
      return factory(name, [
        '$injector',
        function ($injector) {
          return $injector.instantiate(constructor);
        }
      ]);
    }
    function value(name, val) {
      return factory(name, valueFn(val));
    }
    function constant(name, value) {
      assertNotHasOwnProperty(name, 'constant');
      providerCache[name] = value;
      instanceCache[name] = value;
    }
    function decorator(serviceName, decorFn) {
      var origProvider = providerInjector.get(serviceName + providerSuffix), orig$get = origProvider.$get;
      origProvider.$get = function () {
        var origInstance = instanceInjector.invoke(orig$get, origProvider);
        return instanceInjector.invoke(decorFn, null, { $delegate: origInstance });
      };
    }
    function loadModules(modulesToLoad) {
      var runBlocks = [], moduleFn, invokeQueue, i, ii;
      forEach(modulesToLoad, function (module) {
        if (loadedModules.get(module))
          return;
        loadedModules.put(module, true);
        try {
          if (isString(module)) {
            moduleFn = angularModule(module);
            runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
            for (invokeQueue = moduleFn._invokeQueue, i = 0, ii = invokeQueue.length; i < ii; i++) {
              var invokeArgs = invokeQueue[i], provider = providerInjector.get(invokeArgs[0]);
              provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
            }
          } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else {
            assertArgFn(module, 'module');
          }
        } catch (e) {
          if (isArray(module)) {
            module = module[module.length - 1];
          }
          if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
            e = e.message + '\n' + e.stack;
          }
          throw $injectorMinErr('modulerr', 'Failed to instantiate module {0} due to:\n{1}', module, e.stack || e.message || e);
        }
      });
      return runBlocks;
    }
    function createInternalInjector(cache, factory) {
      function getService(serviceName) {
        if (cache.hasOwnProperty(serviceName)) {
          if (cache[serviceName] === INSTANTIATING) {
            throw $injectorMinErr('cdep', 'Circular dependency found: {0}', path.join(' <- '));
          }
          return cache[serviceName];
        } else {
          try {
            path.unshift(serviceName);
            cache[serviceName] = INSTANTIATING;
            return cache[serviceName] = factory(serviceName);
          } catch (err) {
            if (cache[serviceName] === INSTANTIATING) {
              delete cache[serviceName];
            }
            throw err;
          } finally {
            path.shift();
          }
        }
      }
      function invoke(fn, self, locals) {
        var args = [], $inject = annotate(fn), length, i, key;
        for (i = 0, length = $inject.length; i < length; i++) {
          key = $inject[i];
          if (typeof key !== 'string') {
            throw $injectorMinErr('itkn', 'Incorrect injection token! Expected service name as string, got {0}', key);
          }
          args.push(locals && locals.hasOwnProperty(key) ? locals[key] : getService(key));
        }
        if (!fn.$inject) {
          fn = fn[length];
        }
        return fn.apply(self, args);
      }
      function instantiate(Type, locals) {
        var Constructor = function () {
          }, instance, returnedValue;
        Constructor.prototype = (isArray(Type) ? Type[Type.length - 1] : Type).prototype;
        instance = new Constructor();
        returnedValue = invoke(Type, instance, locals);
        return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
      }
      return {
        invoke: invoke,
        instantiate: instantiate,
        get: getService,
        annotate: annotate,
        has: function (name) {
          return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
        }
      };
    }
  }
  function $AnchorScrollProvider() {
    var autoScrollingEnabled = true;
    this.disableAutoScrolling = function () {
      autoScrollingEnabled = false;
    };
    this.$get = [
      '$window',
      '$location',
      '$rootScope',
      function ($window, $location, $rootScope) {
        var document = $window.document;
        function getFirstAnchor(list) {
          var result = null;
          forEach(list, function (element) {
            if (!result && lowercase(element.nodeName) === 'a')
              result = element;
          });
          return result;
        }
        function scroll() {
          var hash = $location.hash(), elm;
          if (!hash)
            $window.scrollTo(0, 0);
          else if (elm = document.getElementById(hash))
            elm.scrollIntoView();
          else if (elm = getFirstAnchor(document.getElementsByName(hash)))
            elm.scrollIntoView();
          else if (hash === 'top')
            $window.scrollTo(0, 0);
        }
        if (autoScrollingEnabled) {
          $rootScope.$watch(function autoScrollWatch() {
            return $location.hash();
          }, function autoScrollWatchAction() {
            $rootScope.$evalAsync(scroll);
          });
        }
        return scroll;
      }
    ];
  }
  var $animateMinErr = minErr('$animate');
  var $AnimateProvider = [
      '$provide',
      function ($provide) {
        this.$$selectors = {};
        this.register = function (name, factory) {
          var key = name + '-animation';
          if (name && name.charAt(0) != '.')
            throw $animateMinErr('notcsel', 'Expecting class selector starting with \'.\' got \'{0}\'.', name);
          this.$$selectors[name.substr(1)] = key;
          $provide.factory(key, factory);
        };
        this.classNameFilter = function (expression) {
          if (arguments.length === 1) {
            this.$$classNameFilter = expression instanceof RegExp ? expression : null;
          }
          return this.$$classNameFilter;
        };
        this.$get = [
          '$timeout',
          '$$asyncCallback',
          function ($timeout, $$asyncCallback) {
            function async(fn) {
              fn && $$asyncCallback(fn);
            }
            return {
              enter: function (element, parent, after, done) {
                if (after) {
                  after.after(element);
                } else {
                  if (!parent || !parent[0]) {
                    parent = after.parent();
                  }
                  parent.append(element);
                }
                async(done);
              },
              leave: function (element, done) {
                element.remove();
                async(done);
              },
              move: function (element, parent, after, done) {
                this.enter(element, parent, after, done);
              },
              addClass: function (element, className, done) {
                className = isString(className) ? className : isArray(className) ? className.join(' ') : '';
                forEach(element, function (element) {
                  jqLiteAddClass(element, className);
                });
                async(done);
              },
              removeClass: function (element, className, done) {
                className = isString(className) ? className : isArray(className) ? className.join(' ') : '';
                forEach(element, function (element) {
                  jqLiteRemoveClass(element, className);
                });
                async(done);
              },
              setClass: function (element, add, remove, done) {
                forEach(element, function (element) {
                  jqLiteAddClass(element, add);
                  jqLiteRemoveClass(element, remove);
                });
                async(done);
              },
              enabled: noop
            };
          }
        ];
      }
    ];
  function $$AsyncCallbackProvider() {
    this.$get = [
      '$$rAF',
      '$timeout',
      function ($$rAF, $timeout) {
        return $$rAF.supported ? function (fn) {
          return $$rAF(fn);
        } : function (fn) {
          return $timeout(fn, 0, false);
        };
      }
    ];
  }
  function Browser(window, document, $log, $sniffer) {
    var self = this, rawDocument = document[0], location = window.location, history = window.history, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, pendingDeferIds = {};
    self.isMock = false;
    var outstandingRequestCount = 0;
    var outstandingRequestCallbacks = [];
    self.$$completeOutstandingRequest = completeOutstandingRequest;
    self.$$incOutstandingRequestCount = function () {
      outstandingRequestCount++;
    };
    function completeOutstandingRequest(fn) {
      try {
        fn.apply(null, sliceArgs(arguments, 1));
      } finally {
        outstandingRequestCount--;
        if (outstandingRequestCount === 0) {
          while (outstandingRequestCallbacks.length) {
            try {
              outstandingRequestCallbacks.pop()();
            } catch (e) {
              $log.error(e);
            }
          }
        }
      }
    }
    self.notifyWhenNoOutstandingRequests = function (callback) {
      forEach(pollFns, function (pollFn) {
        pollFn();
      });
      if (outstandingRequestCount === 0) {
        callback();
      } else {
        outstandingRequestCallbacks.push(callback);
      }
    };
    var pollFns = [], pollTimeout;
    self.addPollFn = function (fn) {
      if (isUndefined(pollTimeout))
        startPoller(100, setTimeout);
      pollFns.push(fn);
      return fn;
    };
    function startPoller(interval, setTimeout) {
      (function check() {
        forEach(pollFns, function (pollFn) {
          pollFn();
        });
        pollTimeout = setTimeout(check, interval);
      }());
    }
    var lastBrowserUrl = location.href, baseElement = document.find('base'), newLocation = null;
    self.url = function (url, replace) {
      if (location !== window.location)
        location = window.location;
      if (history !== window.history)
        history = window.history;
      if (url) {
        if (lastBrowserUrl == url)
          return;
        lastBrowserUrl = url;
        if ($sniffer.history) {
          if (replace)
            history.replaceState(null, '', url);
          else {
            history.pushState(null, '', url);
            baseElement.attr('href', baseElement.attr('href'));
          }
        } else {
          newLocation = url;
          if (replace) {
            location.replace(url);
          } else {
            location.href = url;
          }
        }
        return self;
      } else {
        return newLocation || location.href.replace(/%27/g, '\'');
      }
    };
    var urlChangeListeners = [], urlChangeInit = false;
    function fireUrlChange() {
      newLocation = null;
      if (lastBrowserUrl == self.url())
        return;
      lastBrowserUrl = self.url();
      forEach(urlChangeListeners, function (listener) {
        listener(self.url());
      });
    }
    self.onUrlChange = function (callback) {
      if (!urlChangeInit) {
        if ($sniffer.history)
          jqLite(window).on('popstate', fireUrlChange);
        if ($sniffer.hashchange)
          jqLite(window).on('hashchange', fireUrlChange);
        else
          self.addPollFn(fireUrlChange);
        urlChangeInit = true;
      }
      urlChangeListeners.push(callback);
      return callback;
    };
    self.baseHref = function () {
      var href = baseElement.attr('href');
      return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
    };
    var lastCookies = {};
    var lastCookieString = '';
    var cookiePath = self.baseHref();
    self.cookies = function (name, value) {
      var cookieLength, cookieArray, cookie, i, index;
      if (name) {
        if (value === undefined) {
          rawDocument.cookie = escape(name) + '=;path=' + cookiePath + ';expires=Thu, 01 Jan 1970 00:00:00 GMT';
        } else {
          if (isString(value)) {
            cookieLength = (rawDocument.cookie = escape(name) + '=' + escape(value) + ';path=' + cookiePath).length + 1;
            if (cookieLength > 4096) {
              $log.warn('Cookie \'' + name + '\' possibly not set or overflowed because it was too large (' + cookieLength + ' > 4096 bytes)!');
            }
          }
        }
      } else {
        if (rawDocument.cookie !== lastCookieString) {
          lastCookieString = rawDocument.cookie;
          cookieArray = lastCookieString.split('; ');
          lastCookies = {};
          for (i = 0; i < cookieArray.length; i++) {
            cookie = cookieArray[i];
            index = cookie.indexOf('=');
            if (index > 0) {
              name = unescape(cookie.substring(0, index));
              if (lastCookies[name] === undefined) {
                lastCookies[name] = unescape(cookie.substring(index + 1));
              }
            }
          }
        }
        return lastCookies;
      }
    };
    self.defer = function (fn, delay) {
      var timeoutId;
      outstandingRequestCount++;
      timeoutId = setTimeout(function () {
        delete pendingDeferIds[timeoutId];
        completeOutstandingRequest(fn);
      }, delay || 0);
      pendingDeferIds[timeoutId] = true;
      return timeoutId;
    };
    self.defer.cancel = function (deferId) {
      if (pendingDeferIds[deferId]) {
        delete pendingDeferIds[deferId];
        clearTimeout(deferId);
        completeOutstandingRequest(noop);
        return true;
      }
      return false;
    };
  }
  function $BrowserProvider() {
    this.$get = [
      '$window',
      '$log',
      '$sniffer',
      '$document',
      function ($window, $log, $sniffer, $document) {
        return new Browser($window, $document, $log, $sniffer);
      }
    ];
  }
  function $CacheFactoryProvider() {
    this.$get = function () {
      var caches = {};
      function cacheFactory(cacheId, options) {
        if (cacheId in caches) {
          throw minErr('$cacheFactory')('iid', 'CacheId \'{0}\' is already taken!', cacheId);
        }
        var size = 0, stats = extend({}, options, { id: cacheId }), data = {}, capacity = options && options.capacity || Number.MAX_VALUE, lruHash = {}, freshEnd = null, staleEnd = null;
        return caches[cacheId] = {
          put: function (key, value) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key] || (lruHash[key] = { key: key });
              refresh(lruEntry);
            }
            if (isUndefined(value))
              return;
            if (!(key in data))
              size++;
            data[key] = value;
            if (size > capacity) {
              this.remove(staleEnd.key);
            }
            return value;
          },
          get: function (key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];
              if (!lruEntry)
                return;
              refresh(lruEntry);
            }
            return data[key];
          },
          remove: function (key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];
              if (!lruEntry)
                return;
              if (lruEntry == freshEnd)
                freshEnd = lruEntry.p;
              if (lruEntry == staleEnd)
                staleEnd = lruEntry.n;
              link(lruEntry.n, lruEntry.p);
              delete lruHash[key];
            }
            delete data[key];
            size--;
          },
          removeAll: function () {
            data = {};
            size = 0;
            lruHash = {};
            freshEnd = staleEnd = null;
          },
          destroy: function () {
            data = null;
            stats = null;
            lruHash = null;
            delete caches[cacheId];
          },
          info: function () {
            return extend({}, stats, { size: size });
          }
        };
        function refresh(entry) {
          if (entry != freshEnd) {
            if (!staleEnd) {
              staleEnd = entry;
            } else if (staleEnd == entry) {
              staleEnd = entry.n;
            }
            link(entry.n, entry.p);
            link(entry, freshEnd);
            freshEnd = entry;
            freshEnd.n = null;
          }
        }
        function link(nextEntry, prevEntry) {
          if (nextEntry != prevEntry) {
            if (nextEntry)
              nextEntry.p = prevEntry;
            if (prevEntry)
              prevEntry.n = nextEntry;
          }
        }
      }
      cacheFactory.info = function () {
        var info = {};
        forEach(caches, function (cache, cacheId) {
          info[cacheId] = cache.info();
        });
        return info;
      };
      cacheFactory.get = function (cacheId) {
        return caches[cacheId];
      };
      return cacheFactory;
    };
  }
  function $TemplateCacheProvider() {
    this.$get = [
      '$cacheFactory',
      function ($cacheFactory) {
        return $cacheFactory('templates');
      }
    ];
  }
  var $compileMinErr = minErr('$compile');
  $CompileProvider.$inject = [
    '$provide',
    '$$sanitizeUriProvider'
  ];
  function $CompileProvider($provide, $$sanitizeUriProvider) {
    var hasDirectives = {}, Suffix = 'Directive', COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\d\w\-_]+)\s+(.*)$/, CLASS_DIRECTIVE_REGEXP = /(([\d\w\-_]+)(?:\:([^;]+))?;?)/;
    var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
    this.directive = function registerDirective(name, directiveFactory) {
      assertNotHasOwnProperty(name, 'directive');
      if (isString(name)) {
        assertArg(directiveFactory, 'directiveFactory');
        if (!hasDirectives.hasOwnProperty(name)) {
          hasDirectives[name] = [];
          $provide.factory(name + Suffix, [
            '$injector',
            '$exceptionHandler',
            function ($injector, $exceptionHandler) {
              var directives = [];
              forEach(hasDirectives[name], function (directiveFactory, index) {
                try {
                  var directive = $injector.invoke(directiveFactory);
                  if (isFunction(directive)) {
                    directive = { compile: valueFn(directive) };
                  } else if (!directive.compile && directive.link) {
                    directive.compile = valueFn(directive.link);
                  }
                  directive.priority = directive.priority || 0;
                  directive.index = index;
                  directive.name = directive.name || name;
                  directive.require = directive.require || directive.controller && directive.name;
                  directive.restrict = directive.restrict || 'A';
                  directives.push(directive);
                } catch (e) {
                  $exceptionHandler(e);
                }
              });
              return directives;
            }
          ]);
        }
        hasDirectives[name].push(directiveFactory);
      } else {
        forEach(name, reverseParams(registerDirective));
      }
      return this;
    };
    this.aHrefSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
      }
    };
    this.imgSrcSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
      }
    };
    this.$get = [
      '$injector',
      '$interpolate',
      '$exceptionHandler',
      '$http',
      '$templateCache',
      '$parse',
      '$controller',
      '$rootScope',
      '$document',
      '$sce',
      '$animate',
      '$$sanitizeUri',
      function ($injector, $interpolate, $exceptionHandler, $http, $templateCache, $parse, $controller, $rootScope, $document, $sce, $animate, $$sanitizeUri) {
        var Attributes = function (element, attr) {
          this.$$element = element;
          this.$attr = attr || {};
        };
        Attributes.prototype = {
          $normalize: directiveNormalize,
          $addClass: function (classVal) {
            if (classVal && classVal.length > 0) {
              $animate.addClass(this.$$element, classVal);
            }
          },
          $removeClass: function (classVal) {
            if (classVal && classVal.length > 0) {
              $animate.removeClass(this.$$element, classVal);
            }
          },
          $updateClass: function (newClasses, oldClasses) {
            var toAdd = tokenDifference(newClasses, oldClasses);
            var toRemove = tokenDifference(oldClasses, newClasses);
            if (toAdd.length === 0) {
              $animate.removeClass(this.$$element, toRemove);
            } else if (toRemove.length === 0) {
              $animate.addClass(this.$$element, toAdd);
            } else {
              $animate.setClass(this.$$element, toAdd, toRemove);
            }
          },
          $set: function (key, value, writeAttr, attrName) {
            var booleanKey = getBooleanAttrName(this.$$element[0], key), normalizedVal, nodeName;
            if (booleanKey) {
              this.$$element.prop(key, value);
              attrName = booleanKey;
            }
            this[key] = value;
            if (attrName) {
              this.$attr[key] = attrName;
            } else {
              attrName = this.$attr[key];
              if (!attrName) {
                this.$attr[key] = attrName = snake_case(key, '-');
              }
            }
            nodeName = nodeName_(this.$$element);
            if (nodeName === 'A' && key === 'href' || nodeName === 'IMG' && key === 'src') {
              this[key] = value = $$sanitizeUri(value, key === 'src');
            }
            if (writeAttr !== false) {
              if (value === null || value === undefined) {
                this.$$element.removeAttr(attrName);
              } else {
                this.$$element.attr(attrName, value);
              }
            }
            var $$observers = this.$$observers;
            $$observers && forEach($$observers[key], function (fn) {
              try {
                fn(value);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
          },
          $observe: function (key, fn) {
            var attrs = this, $$observers = attrs.$$observers || (attrs.$$observers = {}), listeners = $$observers[key] || ($$observers[key] = []);
            listeners.push(fn);
            $rootScope.$evalAsync(function () {
              if (!listeners.$$inter) {
                fn(attrs[key]);
              }
            });
            return fn;
          }
        };
        var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), denormalizeTemplate = startSymbol == '{{' || endSymbol == '}}' ? identity : function denormalizeTemplate(template) {
            return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
          }, NG_ATTR_BINDING = /^ngAttr[A-Z]/;
        return compile;
        function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
          if (!($compileNodes instanceof jqLite)) {
            $compileNodes = jqLite($compileNodes);
          }
          forEach($compileNodes, function (node, index) {
            if (node.nodeType == 3 && node.nodeValue.match(/\S+/)) {
              $compileNodes[index] = node = jqLite(node).wrap('<span></span>').parent()[0];
            }
          });
          var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
          safeAddClass($compileNodes, 'ng-scope');
          return function publicLinkFn(scope, cloneConnectFn, transcludeControllers) {
            assertArg(scope, 'scope');
            var $linkNode = cloneConnectFn ? JQLitePrototype.clone.call($compileNodes) : $compileNodes;
            forEach(transcludeControllers, function (instance, name) {
              $linkNode.data('$' + name + 'Controller', instance);
            });
            for (var i = 0, ii = $linkNode.length; i < ii; i++) {
              var node = $linkNode[i], nodeType = node.nodeType;
              if (nodeType === 1 || nodeType === 9) {
                $linkNode.eq(i).data('$scope', scope);
              }
            }
            if (cloneConnectFn)
              cloneConnectFn($linkNode, scope);
            if (compositeLinkFn)
              compositeLinkFn(scope, $linkNode, $linkNode);
            return $linkNode;
          };
        }
        function safeAddClass($element, className) {
          try {
            $element.addClass(className);
          } catch (e) {
          }
        }
        function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
          var linkFns = [], attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound;
          for (var i = 0; i < nodeList.length; i++) {
            attrs = new Attributes();
            directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined, ignoreDirective);
            nodeLinkFn = directives.length ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext) : null;
            if (nodeLinkFn && nodeLinkFn.scope) {
              safeAddClass(jqLite(nodeList[i]), 'ng-scope');
            }
            childLinkFn = nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length ? null : compileNodes(childNodes, nodeLinkFn ? nodeLinkFn.transclude : transcludeFn);
            linkFns.push(nodeLinkFn, childLinkFn);
            linkFnFound = linkFnFound || nodeLinkFn || childLinkFn;
            previousCompileContext = null;
          }
          return linkFnFound ? compositeLinkFn : null;
          function compositeLinkFn(scope, nodeList, $rootElement, boundTranscludeFn) {
            var nodeLinkFn, childLinkFn, node, $node, childScope, childTranscludeFn, i, ii, n;
            var nodeListLength = nodeList.length, stableNodeList = new Array(nodeListLength);
            for (i = 0; i < nodeListLength; i++) {
              stableNodeList[i] = nodeList[i];
            }
            for (i = 0, n = 0, ii = linkFns.length; i < ii; n++) {
              node = stableNodeList[n];
              nodeLinkFn = linkFns[i++];
              childLinkFn = linkFns[i++];
              $node = jqLite(node);
              if (nodeLinkFn) {
                if (nodeLinkFn.scope) {
                  childScope = scope.$new();
                  $node.data('$scope', childScope);
                } else {
                  childScope = scope;
                }
                childTranscludeFn = nodeLinkFn.transclude;
                if (childTranscludeFn || !boundTranscludeFn && transcludeFn) {
                  nodeLinkFn(childLinkFn, childScope, node, $rootElement, createBoundTranscludeFn(scope, childTranscludeFn || transcludeFn));
                } else {
                  nodeLinkFn(childLinkFn, childScope, node, $rootElement, boundTranscludeFn);
                }
              } else if (childLinkFn) {
                childLinkFn(scope, node.childNodes, undefined, boundTranscludeFn);
              }
            }
          }
        }
        function createBoundTranscludeFn(scope, transcludeFn) {
          return function boundTranscludeFn(transcludedScope, cloneFn, controllers) {
            var scopeCreated = false;
            if (!transcludedScope) {
              transcludedScope = scope.$new();
              transcludedScope.$$transcluded = true;
              scopeCreated = true;
            }
            var clone = transcludeFn(transcludedScope, cloneFn, controllers);
            if (scopeCreated) {
              clone.on('$destroy', bind(transcludedScope, transcludedScope.$destroy));
            }
            return clone;
          };
        }
        function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
          var nodeType = node.nodeType, attrsMap = attrs.$attr, match, className;
          switch (nodeType) {
          case 1:
            addDirective(directives, directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority, ignoreDirective);
            for (var attr, name, nName, ngAttrName, value, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
              var attrStartName = false;
              var attrEndName = false;
              attr = nAttrs[j];
              if (!msie || msie >= 8 || attr.specified) {
                name = attr.name;
                ngAttrName = directiveNormalize(name);
                if (NG_ATTR_BINDING.test(ngAttrName)) {
                  name = snake_case(ngAttrName.substr(6), '-');
                }
                var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
                if (ngAttrName === directiveNName + 'Start') {
                  attrStartName = name;
                  attrEndName = name.substr(0, name.length - 5) + 'end';
                  name = name.substr(0, name.length - 6);
                }
                nName = directiveNormalize(name.toLowerCase());
                attrsMap[nName] = name;
                attrs[nName] = value = trim(attr.value);
                if (getBooleanAttrName(node, nName)) {
                  attrs[nName] = true;
                }
                addAttrInterpolateDirective(node, directives, value, nName);
                addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName, attrEndName);
              }
            }
            className = node.className;
            if (isString(className) && className !== '') {
              while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
                nName = directiveNormalize(match[2]);
                if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                  attrs[nName] = trim(match[3]);
                }
                className = className.substr(match.index + match[0].length);
              }
            }
            break;
          case 3:
            addTextInterpolateDirective(directives, node.nodeValue);
            break;
          case 8:
            try {
              match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
              if (match) {
                nName = directiveNormalize(match[1]);
                if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                  attrs[nName] = trim(match[2]);
                }
              }
            } catch (e) {
            }
            break;
          }
          directives.sort(byPriority);
          return directives;
        }
        function groupScan(node, attrStart, attrEnd) {
          var nodes = [];
          var depth = 0;
          if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
            var startNode = node;
            do {
              if (!node) {
                throw $compileMinErr('uterdir', 'Unterminated attribute, found \'{0}\' but no matching \'{1}\' found.', attrStart, attrEnd);
              }
              if (node.nodeType == 1) {
                if (node.hasAttribute(attrStart))
                  depth++;
                if (node.hasAttribute(attrEnd))
                  depth--;
              }
              nodes.push(node);
              node = node.nextSibling;
            } while (depth > 0);
          } else {
            nodes.push(node);
          }
          return jqLite(nodes);
        }
        function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
          return function (scope, element, attrs, controllers, transcludeFn) {
            element = groupScan(element[0], attrStart, attrEnd);
            return linkFn(scope, element, attrs, controllers, transcludeFn);
          };
        }
        function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
          previousCompileContext = previousCompileContext || {};
          var terminalPriority = -Number.MAX_VALUE, newScopeDirective, controllerDirectives = previousCompileContext.controllerDirectives, newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective, templateDirective = previousCompileContext.templateDirective, nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective, hasTranscludeDirective = false, hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective, $compileNode = templateAttrs.$$element = jqLite(compileNode), directive, directiveName, $template, replaceDirective = originalReplaceDirective, childTranscludeFn = transcludeFn, linkFn, directiveValue;
          for (var i = 0, ii = directives.length; i < ii; i++) {
            directive = directives[i];
            var attrStart = directive.$$start;
            var attrEnd = directive.$$end;
            if (attrStart) {
              $compileNode = groupScan(compileNode, attrStart, attrEnd);
            }
            $template = undefined;
            if (terminalPriority > directive.priority) {
              break;
            }
            if (directiveValue = directive.scope) {
              newScopeDirective = newScopeDirective || directive;
              if (!directive.templateUrl) {
                assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive, $compileNode);
                if (isObject(directiveValue)) {
                  newIsolateScopeDirective = directive;
                }
              }
            }
            directiveName = directive.name;
            if (!directive.templateUrl && directive.controller) {
              directiveValue = directive.controller;
              controllerDirectives = controllerDirectives || {};
              assertNoDuplicate('\'' + directiveName + '\' controller', controllerDirectives[directiveName], directive, $compileNode);
              controllerDirectives[directiveName] = directive;
            }
            if (directiveValue = directive.transclude) {
              hasTranscludeDirective = true;
              if (!directive.$$tlb) {
                assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
                nonTlbTranscludeDirective = directive;
              }
              if (directiveValue == 'element') {
                hasElementTranscludeDirective = true;
                terminalPriority = directive.priority;
                $template = groupScan(compileNode, attrStart, attrEnd);
                $compileNode = templateAttrs.$$element = jqLite(document.createComment(' ' + directiveName + ': ' + templateAttrs[directiveName] + ' '));
                compileNode = $compileNode[0];
                replaceWith(jqCollection, jqLite(sliceArgs($template)), compileNode);
                childTranscludeFn = compile($template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, { nonTlbTranscludeDirective: nonTlbTranscludeDirective });
              } else {
                $template = jqLite(jqLiteClone(compileNode)).contents();
                $compileNode.empty();
                childTranscludeFn = compile($template, transcludeFn);
              }
            }
            if (directive.template) {
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;
              directiveValue = isFunction(directive.template) ? directive.template($compileNode, templateAttrs) : directive.template;
              directiveValue = denormalizeTemplate(directiveValue);
              if (directive.replace) {
                replaceDirective = directive;
                if (jqLiteIsTextNode(directiveValue)) {
                  $template = [];
                } else {
                  $template = jqLite(directiveValue);
                }
                compileNode = $template[0];
                if ($template.length != 1 || compileNode.nodeType !== 1) {
                  throw $compileMinErr('tplrt', 'Template for directive \'{0}\' must have exactly one root element. {1}', directiveName, '');
                }
                replaceWith(jqCollection, $compileNode, compileNode);
                var newTemplateAttrs = { $attr: {} };
                var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
                var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
                if (newIsolateScopeDirective) {
                  markDirectivesAsIsolate(templateDirectives);
                }
                directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
                ii = directives.length;
              } else {
                $compileNode.html(directiveValue);
              }
            }
            if (directive.templateUrl) {
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;
              if (directive.replace) {
                replaceDirective = directive;
              }
              nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode, templateAttrs, jqCollection, childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
              ii = directives.length;
            } else if (directive.compile) {
              try {
                linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                if (isFunction(linkFn)) {
                  addLinkFns(null, linkFn, attrStart, attrEnd);
                } else if (linkFn) {
                  addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
                }
              } catch (e) {
                $exceptionHandler(e, startingTag($compileNode));
              }
            }
            if (directive.terminal) {
              nodeLinkFn.terminal = true;
              terminalPriority = Math.max(terminalPriority, directive.priority);
            }
          }
          nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
          nodeLinkFn.transclude = hasTranscludeDirective && childTranscludeFn;
          previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
          return nodeLinkFn;
          function addLinkFns(pre, post, attrStart, attrEnd) {
            if (pre) {
              if (attrStart)
                pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
              pre.require = directive.require;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                pre = cloneAndAnnotateFn(pre, { isolateScope: true });
              }
              preLinkFns.push(pre);
            }
            if (post) {
              if (attrStart)
                post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
              post.require = directive.require;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                post = cloneAndAnnotateFn(post, { isolateScope: true });
              }
              postLinkFns.push(post);
            }
          }
          function getControllers(require, $element, elementControllers) {
            var value, retrievalMethod = 'data', optional = false;
            if (isString(require)) {
              while ((value = require.charAt(0)) == '^' || value == '?') {
                require = require.substr(1);
                if (value == '^') {
                  retrievalMethod = 'inheritedData';
                }
                optional = optional || value == '?';
              }
              value = null;
              if (elementControllers && retrievalMethod === 'data') {
                value = elementControllers[require];
              }
              value = value || $element[retrievalMethod]('$' + require + 'Controller');
              if (!value && !optional) {
                throw $compileMinErr('ctreq', 'Controller \'{0}\', required by directive \'{1}\', can\'t be found!', require, directiveName);
              }
              return value;
            } else if (isArray(require)) {
              value = [];
              forEach(require, function (require) {
                value.push(getControllers(require, $element, elementControllers));
              });
            }
            return value;
          }
          function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
            var attrs, $element, i, ii, linkFn, controller, isolateScope, elementControllers = {}, transcludeFn;
            if (compileNode === linkNode) {
              attrs = templateAttrs;
            } else {
              attrs = shallowCopy(templateAttrs, new Attributes(jqLite(linkNode), templateAttrs.$attr));
            }
            $element = attrs.$$element;
            if (newIsolateScopeDirective) {
              var LOCAL_REGEXP = /^\s*([@=&])(\??)\s*(\w*)\s*$/;
              var $linkNode = jqLite(linkNode);
              isolateScope = scope.$new(true);
              if (templateDirective && templateDirective === newIsolateScopeDirective.$$originalDirective) {
                $linkNode.data('$isolateScope', isolateScope);
              } else {
                $linkNode.data('$isolateScopeNoTemplate', isolateScope);
              }
              safeAddClass($linkNode, 'ng-isolate-scope');
              forEach(newIsolateScopeDirective.scope, function (definition, scopeName) {
                var match = definition.match(LOCAL_REGEXP) || [], attrName = match[3] || scopeName, optional = match[2] == '?', mode = match[1], lastValue, parentGet, parentSet, compare;
                isolateScope.$$isolateBindings[scopeName] = mode + attrName;
                switch (mode) {
                case '@':
                  attrs.$observe(attrName, function (value) {
                    isolateScope[scopeName] = value;
                  });
                  attrs.$$observers[attrName].$$scope = scope;
                  if (attrs[attrName]) {
                    isolateScope[scopeName] = $interpolate(attrs[attrName])(scope);
                  }
                  break;
                case '=':
                  if (optional && !attrs[attrName]) {
                    return;
                  }
                  parentGet = $parse(attrs[attrName]);
                  if (parentGet.literal) {
                    compare = equals;
                  } else {
                    compare = function (a, b) {
                      return a === b;
                    };
                  }
                  parentSet = parentGet.assign || function () {
                    lastValue = isolateScope[scopeName] = parentGet(scope);
                    throw $compileMinErr('nonassign', 'Expression \'{0}\' used with directive \'{1}\' is non-assignable!', attrs[attrName], newIsolateScopeDirective.name);
                  };
                  lastValue = isolateScope[scopeName] = parentGet(scope);
                  isolateScope.$watch(function parentValueWatch() {
                    var parentValue = parentGet(scope);
                    if (!compare(parentValue, isolateScope[scopeName])) {
                      if (!compare(parentValue, lastValue)) {
                        isolateScope[scopeName] = parentValue;
                      } else {
                        parentSet(scope, parentValue = isolateScope[scopeName]);
                      }
                    }
                    return lastValue = parentValue;
                  }, null, parentGet.literal);
                  break;
                case '&':
                  parentGet = $parse(attrs[attrName]);
                  isolateScope[scopeName] = function (locals) {
                    return parentGet(scope, locals);
                  };
                  break;
                default:
                  throw $compileMinErr('iscp', 'Invalid isolate scope definition for directive \'{0}\'.' + ' Definition: {... {1}: \'{2}\' ...}', newIsolateScopeDirective.name, scopeName, definition);
                }
              });
            }
            transcludeFn = boundTranscludeFn && controllersBoundTransclude;
            if (controllerDirectives) {
              forEach(controllerDirectives, function (directive) {
                var locals = {
                    $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                    $element: $element,
                    $attrs: attrs,
                    $transclude: transcludeFn
                  }, controllerInstance;
                controller = directive.controller;
                if (controller == '@') {
                  controller = attrs[directive.name];
                }
                controllerInstance = $controller(controller, locals);
                elementControllers[directive.name] = controllerInstance;
                if (!hasElementTranscludeDirective) {
                  $element.data('$' + directive.name + 'Controller', controllerInstance);
                }
                if (directive.controllerAs) {
                  locals.$scope[directive.controllerAs] = controllerInstance;
                }
              });
            }
            for (i = 0, ii = preLinkFns.length; i < ii; i++) {
              try {
                linkFn = preLinkFns[i];
                linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.require, $element, elementControllers), transcludeFn);
              } catch (e) {
                $exceptionHandler(e, startingTag($element));
              }
            }
            var scopeToChild = scope;
            if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
              scopeToChild = isolateScope;
            }
            childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
            for (i = postLinkFns.length - 1; i >= 0; i--) {
              try {
                linkFn = postLinkFns[i];
                linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.require, $element, elementControllers), transcludeFn);
              } catch (e) {
                $exceptionHandler(e, startingTag($element));
              }
            }
            function controllersBoundTransclude(scope, cloneAttachFn) {
              var transcludeControllers;
              if (arguments.length < 2) {
                cloneAttachFn = scope;
                scope = undefined;
              }
              if (hasElementTranscludeDirective) {
                transcludeControllers = elementControllers;
              }
              return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers);
            }
          }
        }
        function markDirectivesAsIsolate(directives) {
          for (var j = 0, jj = directives.length; j < jj; j++) {
            directives[j] = inherit(directives[j], { $$isolateScope: true });
          }
        }
        function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
          if (name === ignoreDirective)
            return null;
          var match = null;
          if (hasDirectives.hasOwnProperty(name)) {
            for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
              try {
                directive = directives[i];
                if ((maxPriority === undefined || maxPriority > directive.priority) && directive.restrict.indexOf(location) != -1) {
                  if (startAttrName) {
                    directive = inherit(directive, {
                      $$start: startAttrName,
                      $$end: endAttrName
                    });
                  }
                  tDirectives.push(directive);
                  match = directive;
                }
              } catch (e) {
                $exceptionHandler(e);
              }
            }
          }
          return match;
        }
        function mergeTemplateAttributes(dst, src) {
          var srcAttr = src.$attr, dstAttr = dst.$attr, $element = dst.$$element;
          forEach(dst, function (value, key) {
            if (key.charAt(0) != '$') {
              if (src[key]) {
                value += (key === 'style' ? ';' : ' ') + src[key];
              }
              dst.$set(key, value, true, srcAttr[key]);
            }
          });
          forEach(src, function (value, key) {
            if (key == 'class') {
              safeAddClass($element, value);
              dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
            } else if (key == 'style') {
              $element.attr('style', $element.attr('style') + ';' + value);
              dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
            } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
              dst[key] = value;
              dstAttr[key] = srcAttr[key];
            }
          });
        }
        function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
          var linkQueue = [], afterTemplateNodeLinkFn, afterTemplateChildLinkFn, beforeTemplateCompileNode = $compileNode[0], origAsyncDirective = directives.shift(), derivedSyncDirective = extend({}, origAsyncDirective, {
              templateUrl: null,
              transclude: null,
              replace: null,
              $$originalDirective: origAsyncDirective
            }), templateUrl = isFunction(origAsyncDirective.templateUrl) ? origAsyncDirective.templateUrl($compileNode, tAttrs) : origAsyncDirective.templateUrl;
          $compileNode.empty();
          $http.get($sce.getTrustedResourceUrl(templateUrl), { cache: $templateCache }).success(function (content) {
            var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
            content = denormalizeTemplate(content);
            if (origAsyncDirective.replace) {
              if (jqLiteIsTextNode(content)) {
                $template = [];
              } else {
                $template = jqLite(content);
              }
              compileNode = $template[0];
              if ($template.length != 1 || compileNode.nodeType !== 1) {
                throw $compileMinErr('tplrt', 'Template for directive \'{0}\' must have exactly one root element. {1}', origAsyncDirective.name, templateUrl);
              }
              tempTemplateAttrs = { $attr: {} };
              replaceWith($rootElement, $compileNode, compileNode);
              var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
              if (isObject(origAsyncDirective.scope)) {
                markDirectivesAsIsolate(templateDirectives);
              }
              directives = templateDirectives.concat(directives);
              mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
            } else {
              compileNode = beforeTemplateCompileNode;
              $compileNode.html(content);
            }
            directives.unshift(derivedSyncDirective);
            afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext);
            forEach($rootElement, function (node, i) {
              if (node == compileNode) {
                $rootElement[i] = $compileNode[0];
              }
            });
            afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
            while (linkQueue.length) {
              var scope = linkQueue.shift(), beforeTemplateLinkNode = linkQueue.shift(), linkRootElement = linkQueue.shift(), boundTranscludeFn = linkQueue.shift(), linkNode = $compileNode[0];
              if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                var oldClasses = beforeTemplateLinkNode.className;
                if (!(previousCompileContext.hasElementTranscludeDirective && origAsyncDirective.replace)) {
                  linkNode = jqLiteClone(compileNode);
                }
                replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
                safeAddClass(jqLite(linkNode), oldClasses);
              }
              if (afterTemplateNodeLinkFn.transclude) {
                childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude);
              } else {
                childBoundTranscludeFn = boundTranscludeFn;
              }
              afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn);
            }
            linkQueue = null;
          }).error(function (response, code, headers, config) {
            throw $compileMinErr('tpload', 'Failed to load template: {0}', config.url);
          });
          return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
            if (linkQueue) {
              linkQueue.push(scope);
              linkQueue.push(node);
              linkQueue.push(rootElement);
              linkQueue.push(boundTranscludeFn);
            } else {
              afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, boundTranscludeFn);
            }
          };
        }
        function byPriority(a, b) {
          var diff = b.priority - a.priority;
          if (diff !== 0)
            return diff;
          if (a.name !== b.name)
            return a.name < b.name ? -1 : 1;
          return a.index - b.index;
        }
        function assertNoDuplicate(what, previousDirective, directive, element) {
          if (previousDirective) {
            throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}', previousDirective.name, directive.name, what, startingTag(element));
          }
        }
        function addTextInterpolateDirective(directives, text) {
          var interpolateFn = $interpolate(text, true);
          if (interpolateFn) {
            directives.push({
              priority: 0,
              compile: valueFn(function textInterpolateLinkFn(scope, node) {
                var parent = node.parent(), bindings = parent.data('$binding') || [];
                bindings.push(interpolateFn);
                safeAddClass(parent.data('$binding', bindings), 'ng-binding');
                scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                  node[0].nodeValue = value;
                });
              })
            });
          }
        }
        function getTrustedContext(node, attrNormalizedName) {
          if (attrNormalizedName == 'srcdoc') {
            return $sce.HTML;
          }
          var tag = nodeName_(node);
          if (attrNormalizedName == 'xlinkHref' || tag == 'FORM' && attrNormalizedName == 'action' || tag != 'IMG' && (attrNormalizedName == 'src' || attrNormalizedName == 'ngSrc')) {
            return $sce.RESOURCE_URL;
          }
        }
        function addAttrInterpolateDirective(node, directives, value, name) {
          var interpolateFn = $interpolate(value, true);
          if (!interpolateFn)
            return;
          if (name === 'multiple' && nodeName_(node) === 'SELECT') {
            throw $compileMinErr('selmulti', 'Binding to the \'multiple\' attribute is not supported. Element: {0}', startingTag(node));
          }
          directives.push({
            priority: 100,
            compile: function () {
              return {
                pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                  var $$observers = attr.$$observers || (attr.$$observers = {});
                  if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                    throw $compileMinErr('nodomevents', 'Interpolations for HTML DOM event attributes are disallowed.  Please use the ' + 'ng- versions (such as ng-click instead of onclick) instead.');
                  }
                  interpolateFn = $interpolate(attr[name], true, getTrustedContext(node, name));
                  if (!interpolateFn)
                    return;
                  attr[name] = interpolateFn(scope);
                  ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                  (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    if (name === 'class' && newValue != oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
                }
              };
            }
          });
        }
        function replaceWith($rootElement, elementsToRemove, newNode) {
          var firstElementToRemove = elementsToRemove[0], removeCount = elementsToRemove.length, parent = firstElementToRemove.parentNode, i, ii;
          if ($rootElement) {
            for (i = 0, ii = $rootElement.length; i < ii; i++) {
              if ($rootElement[i] == firstElementToRemove) {
                $rootElement[i++] = newNode;
                for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; j < jj; j++, j2++) {
                  if (j2 < jj) {
                    $rootElement[j] = $rootElement[j2];
                  } else {
                    delete $rootElement[j];
                  }
                }
                $rootElement.length -= removeCount - 1;
                break;
              }
            }
          }
          if (parent) {
            parent.replaceChild(newNode, firstElementToRemove);
          }
          var fragment = document.createDocumentFragment();
          fragment.appendChild(firstElementToRemove);
          newNode[jqLite.expando] = firstElementToRemove[jqLite.expando];
          for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
            var element = elementsToRemove[k];
            jqLite(element).remove();
            fragment.appendChild(element);
            delete elementsToRemove[k];
          }
          elementsToRemove[0] = newNode;
          elementsToRemove.length = 1;
        }
        function cloneAndAnnotateFn(fn, annotation) {
          return extend(function () {
            return fn.apply(null, arguments);
          }, fn, annotation);
        }
      }
    ];
  }
  var PREFIX_REGEXP = /^(x[\:\-_]|data[\:\-_])/i;
  function directiveNormalize(name) {
    return camelCase(name.replace(PREFIX_REGEXP, ''));
  }
  function nodesetLinkingFn(scope, nodeList, rootElement, boundTranscludeFn) {
  }
  function directiveLinkingFn(nodesetLinkingFn, scope, node, rootElement, boundTranscludeFn) {
  }
  function tokenDifference(str1, str2) {
    var values = '', tokens1 = str1.split(/\s+/), tokens2 = str2.split(/\s+/);
    outer:
      for (var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for (var j = 0; j < tokens2.length; j++) {
          if (token == tokens2[j])
            continue outer;
        }
        values += (values.length > 0 ? ' ' : '') + token;
      }
    return values;
  }
  function $ControllerProvider() {
    var controllers = {}, CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
    this.register = function (name, constructor) {
      assertNotHasOwnProperty(name, 'controller');
      if (isObject(name)) {
        extend(controllers, name);
      } else {
        controllers[name] = constructor;
      }
    };
    this.$get = [
      '$injector',
      '$window',
      function ($injector, $window) {
        return function (expression, locals) {
          var instance, match, constructor, identifier;
          if (isString(expression)) {
            match = expression.match(CNTRL_REG), constructor = match[1], identifier = match[3];
            expression = controllers.hasOwnProperty(constructor) ? controllers[constructor] : getter(locals.$scope, constructor, true) || getter($window, constructor, true);
            assertArgFn(expression, constructor, true);
          }
          instance = $injector.instantiate(expression, locals);
          if (identifier) {
            if (!(locals && typeof locals.$scope == 'object')) {
              throw minErr('$controller')('noscp', 'Cannot export controller \'{0}\' as \'{1}\'! No $scope object provided via `locals`.', constructor || expression.name, identifier);
            }
            locals.$scope[identifier] = instance;
          }
          return instance;
        };
      }
    ];
  }
  function $DocumentProvider() {
    this.$get = [
      '$window',
      function (window) {
        return jqLite(window.document);
      }
    ];
  }
  function $ExceptionHandlerProvider() {
    this.$get = [
      '$log',
      function ($log) {
        return function (exception, cause) {
          $log.error.apply($log, arguments);
        };
      }
    ];
  }
  function parseHeaders(headers) {
    var parsed = {}, key, val, i;
    if (!headers)
      return parsed;
    forEach(headers.split('\n'), function (line) {
      i = line.indexOf(':');
      key = lowercase(trim(line.substr(0, i)));
      val = trim(line.substr(i + 1));
      if (key) {
        if (parsed[key]) {
          parsed[key] += ', ' + val;
        } else {
          parsed[key] = val;
        }
      }
    });
    return parsed;
  }
  function headersGetter(headers) {
    var headersObj = isObject(headers) ? headers : undefined;
    return function (name) {
      if (!headersObj)
        headersObj = parseHeaders(headers);
      if (name) {
        return headersObj[lowercase(name)] || null;
      }
      return headersObj;
    };
  }
  function transformData(data, headers, fns) {
    if (isFunction(fns))
      return fns(data, headers);
    forEach(fns, function (fn) {
      data = fn(data, headers);
    });
    return data;
  }
  function isSuccess(status) {
    return 200 <= status && status < 300;
  }
  function $HttpProvider() {
    var JSON_START = /^\s*(\[|\{[^\{])/, JSON_END = /[\}\]]\s*$/, PROTECTION_PREFIX = /^\)\]\}',?\n/, CONTENT_TYPE_APPLICATION_JSON = { 'Content-Type': 'application/json;charset=utf-8' };
    var defaults = this.defaults = {
        transformResponse: [function (data) {
            if (isString(data)) {
              data = data.replace(PROTECTION_PREFIX, '');
              if (JSON_START.test(data) && JSON_END.test(data))
                data = fromJson(data);
            }
            return data;
          }],
        transformRequest: [function (d) {
            return isObject(d) && !isFile(d) && !isBlob(d) ? toJson(d) : d;
          }],
        headers: {
          common: { 'Accept': 'application/json, text/plain, */*' },
          post: copy(CONTENT_TYPE_APPLICATION_JSON),
          put: copy(CONTENT_TYPE_APPLICATION_JSON),
          patch: copy(CONTENT_TYPE_APPLICATION_JSON)
        },
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN'
      };
    var interceptorFactories = this.interceptors = [];
    var responseInterceptorFactories = this.responseInterceptors = [];
    this.$get = [
      '$httpBackend',
      '$browser',
      '$cacheFactory',
      '$rootScope',
      '$q',
      '$injector',
      function ($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {
        var defaultCache = $cacheFactory('$http');
        var reversedInterceptors = [];
        forEach(interceptorFactories, function (interceptorFactory) {
          reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
        });
        forEach(responseInterceptorFactories, function (interceptorFactory, index) {
          var responseFn = isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory);
          reversedInterceptors.splice(index, 0, {
            response: function (response) {
              return responseFn($q.when(response));
            },
            responseError: function (response) {
              return responseFn($q.reject(response));
            }
          });
        });
        function $http(requestConfig) {
          var config = {
              method: 'get',
              transformRequest: defaults.transformRequest,
              transformResponse: defaults.transformResponse
            };
          var headers = mergeHeaders(requestConfig);
          extend(config, requestConfig);
          config.headers = headers;
          config.method = uppercase(config.method);
          var xsrfValue = urlIsSameOrigin(config.url) ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName] : undefined;
          if (xsrfValue) {
            headers[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;
          }
          var serverRequest = function (config) {
            headers = config.headers;
            var reqData = transformData(config.data, headersGetter(headers), config.transformRequest);
            if (isUndefined(config.data)) {
              forEach(headers, function (value, header) {
                if (lowercase(header) === 'content-type') {
                  delete headers[header];
                }
              });
            }
            if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
              config.withCredentials = defaults.withCredentials;
            }
            return sendReq(config, reqData, headers).then(transformResponse, transformResponse);
          };
          var chain = [
              serverRequest,
              undefined
            ];
          var promise = $q.when(config);
          forEach(reversedInterceptors, function (interceptor) {
            if (interceptor.request || interceptor.requestError) {
              chain.unshift(interceptor.request, interceptor.requestError);
            }
            if (interceptor.response || interceptor.responseError) {
              chain.push(interceptor.response, interceptor.responseError);
            }
          });
          while (chain.length) {
            var thenFn = chain.shift();
            var rejectFn = chain.shift();
            promise = promise.then(thenFn, rejectFn);
          }
          promise.success = function (fn) {
            promise.then(function (response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };
          promise.error = function (fn) {
            promise.then(null, function (response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };
          return promise;
          function transformResponse(response) {
            var resp = extend({}, response, { data: transformData(response.data, response.headers, config.transformResponse) });
            return isSuccess(response.status) ? resp : $q.reject(resp);
          }
          function mergeHeaders(config) {
            var defHeaders = defaults.headers, reqHeaders = extend({}, config.headers), defHeaderName, lowercaseDefHeaderName, reqHeaderName;
            defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
            execHeaders(defHeaders);
            execHeaders(reqHeaders);
            defaultHeadersIteration:
              for (defHeaderName in defHeaders) {
                lowercaseDefHeaderName = lowercase(defHeaderName);
                for (reqHeaderName in reqHeaders) {
                  if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                    continue defaultHeadersIteration;
                  }
                }
                reqHeaders[defHeaderName] = defHeaders[defHeaderName];
              }
            return reqHeaders;
            function execHeaders(headers) {
              var headerContent;
              forEach(headers, function (headerFn, header) {
                if (isFunction(headerFn)) {
                  headerContent = headerFn();
                  if (headerContent != null) {
                    headers[header] = headerContent;
                  } else {
                    delete headers[header];
                  }
                }
              });
            }
          }
        }
        $http.pendingRequests = [];
        createShortMethods('get', 'delete', 'head', 'jsonp');
        createShortMethodsWithData('post', 'put');
        $http.defaults = defaults;
        return $http;
        function createShortMethods(names) {
          forEach(arguments, function (name) {
            $http[name] = function (url, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url
              }));
            };
          });
        }
        function createShortMethodsWithData(name) {
          forEach(arguments, function (name) {
            $http[name] = function (url, data, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url,
                data: data
              }));
            };
          });
        }
        function sendReq(config, reqData, reqHeaders) {
          var deferred = $q.defer(), promise = deferred.promise, cache, cachedResp, url = buildUrl(config.url, config.params);
          $http.pendingRequests.push(config);
          promise.then(removePendingReq, removePendingReq);
          if ((config.cache || defaults.cache) && config.cache !== false && config.method == 'GET') {
            cache = isObject(config.cache) ? config.cache : isObject(defaults.cache) ? defaults.cache : defaultCache;
          }
          if (cache) {
            cachedResp = cache.get(url);
            if (isDefined(cachedResp)) {
              if (cachedResp.then) {
                cachedResp.then(removePendingReq, removePendingReq);
                return cachedResp;
              } else {
                if (isArray(cachedResp)) {
                  resolvePromise(cachedResp[1], cachedResp[0], copy(cachedResp[2]), cachedResp[3]);
                } else {
                  resolvePromise(cachedResp, 200, {}, 'OK');
                }
              }
            } else {
              cache.put(url, promise);
            }
          }
          if (isUndefined(cachedResp)) {
            $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout, config.withCredentials, config.responseType);
          }
          return promise;
          function done(status, response, headersString, statusText) {
            if (cache) {
              if (isSuccess(status)) {
                cache.put(url, [
                  status,
                  response,
                  parseHeaders(headersString),
                  statusText
                ]);
              } else {
                cache.remove(url);
              }
            }
            resolvePromise(response, status, headersString, statusText);
            if (!$rootScope.$$phase)
              $rootScope.$apply();
          }
          function resolvePromise(response, status, headers, statusText) {
            status = Math.max(status, 0);
            (isSuccess(status) ? deferred.resolve : deferred.reject)({
              data: response,
              status: status,
              headers: headersGetter(headers),
              config: config,
              statusText: statusText
            });
          }
          function removePendingReq() {
            var idx = indexOf($http.pendingRequests, config);
            if (idx !== -1)
              $http.pendingRequests.splice(idx, 1);
          }
        }
        function buildUrl(url, params) {
          if (!params)
            return url;
          var parts = [];
          forEachSorted(params, function (value, key) {
            if (value === null || isUndefined(value))
              return;
            if (!isArray(value))
              value = [value];
            forEach(value, function (v) {
              if (isObject(v)) {
                v = toJson(v);
              }
              parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));
            });
          });
          if (parts.length > 0) {
            url += (url.indexOf('?') == -1 ? '?' : '&') + parts.join('&');
          }
          return url;
        }
      }
    ];
  }
  function createXhr(method) {
    if (msie <= 8 && (!method.match(/^(get|post|head|put|delete|options)$/i) || !window.XMLHttpRequest)) {
      return new window.ActiveXObject('Microsoft.XMLHTTP');
    } else if (window.XMLHttpRequest) {
      return new window.XMLHttpRequest();
    }
    throw minErr('$httpBackend')('noxhr', 'This browser does not support XMLHttpRequest.');
  }
  function $HttpBackendProvider() {
    this.$get = [
      '$browser',
      '$window',
      '$document',
      function ($browser, $window, $document) {
        return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
      }
    ];
  }
  function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
    var ABORTED = -1;
    return function (method, url, post, callback, headers, timeout, withCredentials, responseType) {
      var status;
      $browser.$$incOutstandingRequestCount();
      url = url || $browser.url();
      if (lowercase(method) == 'jsonp') {
        var callbackId = '_' + (callbacks.counter++).toString(36);
        callbacks[callbackId] = function (data) {
          callbacks[callbackId].data = data;
        };
        var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId), function () {
            if (callbacks[callbackId].data) {
              completeRequest(callback, 200, callbacks[callbackId].data);
            } else {
              completeRequest(callback, status || -2);
            }
            callbacks[callbackId] = angular.noop;
          });
      } else {
        var xhr = createXhr(method);
        xhr.open(method, url, true);
        forEach(headers, function (value, key) {
          if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
          }
        });
        xhr.onreadystatechange = function () {
          if (xhr && xhr.readyState == 4) {
            var responseHeaders = null, response = null;
            if (status !== ABORTED) {
              responseHeaders = xhr.getAllResponseHeaders();
              response = 'response' in xhr ? xhr.response : xhr.responseText;
            }
            completeRequest(callback, status || xhr.status, response, responseHeaders, xhr.statusText || '');
          }
        };
        if (withCredentials) {
          xhr.withCredentials = true;
        }
        if (responseType) {
          try {
            xhr.responseType = responseType;
          } catch (e) {
            if (responseType !== 'json') {
              throw e;
            }
          }
        }
        xhr.send(post || null);
      }
      if (timeout > 0) {
        var timeoutId = $browserDefer(timeoutRequest, timeout);
      } else if (timeout && timeout.then) {
        timeout.then(timeoutRequest);
      }
      function timeoutRequest() {
        status = ABORTED;
        jsonpDone && jsonpDone();
        xhr && xhr.abort();
      }
      function completeRequest(callback, status, response, headersString, statusText) {
        timeoutId && $browserDefer.cancel(timeoutId);
        jsonpDone = xhr = null;
        if (status === 0) {
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
        }
        status = status === 1223 ? 204 : status;
        statusText = statusText || '';
        callback(status, response, headersString, statusText);
        $browser.$$completeOutstandingRequest(noop);
      }
    };
    function jsonpReq(url, done) {
      var script = rawDocument.createElement('script'), doneWrapper = function () {
          script.onreadystatechange = script.onload = script.onerror = null;
          rawDocument.body.removeChild(script);
          if (done)
            done();
        };
      script.type = 'text/javascript';
      script.src = url;
      if (msie && msie <= 8) {
        script.onreadystatechange = function () {
          if (/loaded|complete/.test(script.readyState)) {
            doneWrapper();
          }
        };
      } else {
        script.onload = script.onerror = function () {
          doneWrapper();
        };
      }
      rawDocument.body.appendChild(script);
      return doneWrapper;
    }
  }
  var $interpolateMinErr = minErr('$interpolate');
  function $InterpolateProvider() {
    var startSymbol = '{{';
    var endSymbol = '}}';
    this.startSymbol = function (value) {
      if (value) {
        startSymbol = value;
        return this;
      } else {
        return startSymbol;
      }
    };
    this.endSymbol = function (value) {
      if (value) {
        endSymbol = value;
        return this;
      } else {
        return endSymbol;
      }
    };
    this.$get = [
      '$parse',
      '$exceptionHandler',
      '$sce',
      function ($parse, $exceptionHandler, $sce) {
        var startSymbolLength = startSymbol.length, endSymbolLength = endSymbol.length;
        function $interpolate(text, mustHaveExpression, trustedContext) {
          var startIndex, endIndex, index = 0, parts = [], length = text.length, hasInterpolation = false, fn, exp, concat = [];
          while (index < length) {
            if ((startIndex = text.indexOf(startSymbol, index)) != -1 && (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) {
              index != startIndex && parts.push(text.substring(index, startIndex));
              parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex)));
              fn.exp = exp;
              index = endIndex + endSymbolLength;
              hasInterpolation = true;
            } else {
              index != length && parts.push(text.substring(index));
              index = length;
            }
          }
          if (!(length = parts.length)) {
            parts.push('');
            length = 1;
          }
          if (trustedContext && parts.length > 1) {
            throw $interpolateMinErr('noconcat', 'Error while interpolating: {0}\nStrict Contextual Escaping disallows ' + 'interpolations that concatenate multiple expressions when a trusted value is ' + 'required.  See http://docs.angularjs.org/api/ng.$sce', text);
          }
          if (!mustHaveExpression || hasInterpolation) {
            concat.length = length;
            fn = function (context) {
              try {
                for (var i = 0, ii = length, part; i < ii; i++) {
                  if (typeof (part = parts[i]) == 'function') {
                    part = part(context);
                    if (trustedContext) {
                      part = $sce.getTrusted(trustedContext, part);
                    } else {
                      part = $sce.valueOf(part);
                    }
                    if (part === null || isUndefined(part)) {
                      part = '';
                    } else if (typeof part != 'string') {
                      part = toJson(part);
                    }
                  }
                  concat[i] = part;
                }
                return concat.join('');
              } catch (err) {
                var newErr = $interpolateMinErr('interr', 'Can\'t interpolate: {0}\n{1}', text, err.toString());
                $exceptionHandler(newErr);
              }
            };
            fn.exp = text;
            fn.parts = parts;
            return fn;
          }
        }
        $interpolate.startSymbol = function () {
          return startSymbol;
        };
        $interpolate.endSymbol = function () {
          return endSymbol;
        };
        return $interpolate;
      }
    ];
  }
  function $IntervalProvider() {
    this.$get = [
      '$rootScope',
      '$window',
      '$q',
      function ($rootScope, $window, $q) {
        var intervals = {};
        function interval(fn, delay, count, invokeApply) {
          var setInterval = $window.setInterval, clearInterval = $window.clearInterval, deferred = $q.defer(), promise = deferred.promise, iteration = 0, skipApply = isDefined(invokeApply) && !invokeApply;
          count = isDefined(count) ? count : 0;
          promise.then(null, null, fn);
          promise.$$intervalId = setInterval(function tick() {
            deferred.notify(iteration++);
            if (count > 0 && iteration >= count) {
              deferred.resolve(iteration);
              clearInterval(promise.$$intervalId);
              delete intervals[promise.$$intervalId];
            }
            if (!skipApply)
              $rootScope.$apply();
          }, delay);
          intervals[promise.$$intervalId] = deferred;
          return promise;
        }
        interval.cancel = function (promise) {
          if (promise && promise.$$intervalId in intervals) {
            intervals[promise.$$intervalId].reject('canceled');
            clearInterval(promise.$$intervalId);
            delete intervals[promise.$$intervalId];
            return true;
          }
          return false;
        };
        return interval;
      }
    ];
  }
  function $LocaleProvider() {
    this.$get = function () {
      return {
        id: 'en-us',
        NUMBER_FORMATS: {
          DECIMAL_SEP: '.',
          GROUP_SEP: ',',
          PATTERNS: [
            {
              minInt: 1,
              minFrac: 0,
              maxFrac: 3,
              posPre: '',
              posSuf: '',
              negPre: '-',
              negSuf: '',
              gSize: 3,
              lgSize: 3
            },
            {
              minInt: 1,
              minFrac: 2,
              maxFrac: 2,
              posPre: '\xa4',
              posSuf: '',
              negPre: '(\xa4',
              negSuf: ')',
              gSize: 3,
              lgSize: 3
            }
          ],
          CURRENCY_SYM: '$'
        },
        DATETIME_FORMATS: {
          MONTH: 'January,February,March,April,May,June,July,August,September,October,November,December'.split(','),
          SHORTMONTH: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
          DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
          SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
          AMPMS: [
            'AM',
            'PM'
          ],
          medium: 'MMM d, y h:mm:ss a',
          short: 'M/d/yy h:mm a',
          fullDate: 'EEEE, MMMM d, y',
          longDate: 'MMMM d, y',
          mediumDate: 'MMM d, y',
          shortDate: 'M/d/yy',
          mediumTime: 'h:mm:ss a',
          shortTime: 'h:mm a'
        },
        pluralCat: function (num) {
          if (num === 1) {
            return 'one';
          }
          return 'other';
        }
      };
    };
  }
  var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, DEFAULT_PORTS = {
      'http': 80,
      'https': 443,
      'ftp': 21
    };
  var $locationMinErr = minErr('$location');
  function encodePath(path) {
    var segments = path.split('/'), i = segments.length;
    while (i--) {
      segments[i] = encodeUriSegment(segments[i]);
    }
    return segments.join('/');
  }
  function parseAbsoluteUrl(absoluteUrl, locationObj, appBase) {
    var parsedUrl = urlResolve(absoluteUrl, appBase);
    locationObj.$$protocol = parsedUrl.protocol;
    locationObj.$$host = parsedUrl.hostname;
    locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
  }
  function parseAppUrl(relativeUrl, locationObj, appBase) {
    var prefixed = relativeUrl.charAt(0) !== '/';
    if (prefixed) {
      relativeUrl = '/' + relativeUrl;
    }
    var match = urlResolve(relativeUrl, appBase);
    locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ? match.pathname.substring(1) : match.pathname);
    locationObj.$$search = parseKeyValue(match.search);
    locationObj.$$hash = decodeURIComponent(match.hash);
    if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
      locationObj.$$path = '/' + locationObj.$$path;
    }
  }
  function beginsWith(begin, whole) {
    if (whole.indexOf(begin) === 0) {
      return whole.substr(begin.length);
    }
  }
  function stripHash(url) {
    var index = url.indexOf('#');
    return index == -1 ? url : url.substr(0, index);
  }
  function stripFile(url) {
    return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
  }
  function serverBase(url) {
    return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
  }
  function LocationHtml5Url(appBase, basePrefix) {
    this.$$html5 = true;
    basePrefix = basePrefix || '';
    var appBaseNoFile = stripFile(appBase);
    parseAbsoluteUrl(appBase, this, appBase);
    this.$$parse = function (url) {
      var pathUrl = beginsWith(appBaseNoFile, url);
      if (!isString(pathUrl)) {
        throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
      }
      parseAppUrl(pathUrl, this, appBase);
      if (!this.$$path) {
        this.$$path = '/';
      }
      this.$$compose();
    };
    this.$$compose = function () {
      var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBaseNoFile + this.$$url.substr(1);
    };
    this.$$rewrite = function (url) {
      var appUrl, prevAppUrl;
      if ((appUrl = beginsWith(appBase, url)) !== undefined) {
        prevAppUrl = appUrl;
        if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {
          return appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
        } else {
          return appBase + prevAppUrl;
        }
      } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {
        return appBaseNoFile + appUrl;
      } else if (appBaseNoFile == url + '/') {
        return appBaseNoFile;
      }
    };
  }
  function LocationHashbangUrl(appBase, hashPrefix) {
    var appBaseNoFile = stripFile(appBase);
    parseAbsoluteUrl(appBase, this, appBase);
    this.$$parse = function (url) {
      var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
      var withoutHashUrl = withoutBaseUrl.charAt(0) == '#' ? beginsWith(hashPrefix, withoutBaseUrl) : this.$$html5 ? withoutBaseUrl : '';
      if (!isString(withoutHashUrl)) {
        throw $locationMinErr('ihshprfx', 'Invalid url "{0}", missing hash prefix "{1}".', url, hashPrefix);
      }
      parseAppUrl(withoutHashUrl, this, appBase);
      this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);
      this.$$compose();
      function removeWindowsDriveName(path, url, base) {
        var windowsFilePathExp = /^\/?.*?:(\/.*)/;
        var firstPathSegmentMatch;
        if (url.indexOf(base) === 0) {
          url = url.replace(base, '');
        }
        if (windowsFilePathExp.exec(url)) {
          return path;
        }
        firstPathSegmentMatch = windowsFilePathExp.exec(path);
        return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
      }
    };
    this.$$compose = function () {
      var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
    };
    this.$$rewrite = function (url) {
      if (stripHash(appBase) == stripHash(url)) {
        return url;
      }
    };
  }
  function LocationHashbangInHtml5Url(appBase, hashPrefix) {
    this.$$html5 = true;
    LocationHashbangUrl.apply(this, arguments);
    var appBaseNoFile = stripFile(appBase);
    this.$$rewrite = function (url) {
      var appUrl;
      if (appBase == stripHash(url)) {
        return url;
      } else if (appUrl = beginsWith(appBaseNoFile, url)) {
        return appBase + hashPrefix + appUrl;
      } else if (appBaseNoFile === url + '/') {
        return appBaseNoFile;
      }
    };
  }
  LocationHashbangInHtml5Url.prototype = LocationHashbangUrl.prototype = LocationHtml5Url.prototype = {
    $$html5: false,
    $$replace: false,
    absUrl: locationGetter('$$absUrl'),
    url: function (url, replace) {
      if (isUndefined(url))
        return this.$$url;
      var match = PATH_MATCH.exec(url);
      if (match[1])
        this.path(decodeURIComponent(match[1]));
      if (match[2] || match[1])
        this.search(match[3] || '');
      this.hash(match[5] || '', replace);
      return this;
    },
    protocol: locationGetter('$$protocol'),
    host: locationGetter('$$host'),
    port: locationGetter('$$port'),
    path: locationGetterSetter('$$path', function (path) {
      return path.charAt(0) == '/' ? path : '/' + path;
    }),
    search: function (search, paramValue) {
      switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search)) {
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg', 'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (isUndefined(paramValue) || paramValue === null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
      }
      this.$$compose();
      return this;
    },
    hash: locationGetterSetter('$$hash', identity),
    replace: function () {
      this.$$replace = true;
      return this;
    }
  };
  function locationGetter(property) {
    return function () {
      return this[property];
    };
  }
  function locationGetterSetter(property, preprocess) {
    return function (value) {
      if (isUndefined(value))
        return this[property];
      this[property] = preprocess(value);
      this.$$compose();
      return this;
    };
  }
  function $LocationProvider() {
    var hashPrefix = '', html5Mode = false;
    this.hashPrefix = function (prefix) {
      if (isDefined(prefix)) {
        hashPrefix = prefix;
        return this;
      } else {
        return hashPrefix;
      }
    };
    this.html5Mode = function (mode) {
      if (isDefined(mode)) {
        html5Mode = mode;
        return this;
      } else {
        return html5Mode;
      }
    };
    this.$get = [
      '$rootScope',
      '$browser',
      '$sniffer',
      '$rootElement',
      function ($rootScope, $browser, $sniffer, $rootElement) {
        var $location, LocationMode, baseHref = $browser.baseHref(), initialUrl = $browser.url(), appBase;
        if (html5Mode) {
          appBase = serverBase(initialUrl) + (baseHref || '/');
          LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
        } else {
          appBase = stripHash(initialUrl);
          LocationMode = LocationHashbangUrl;
        }
        $location = new LocationMode(appBase, '#' + hashPrefix);
        $location.$$parse($location.$$rewrite(initialUrl));
        $rootElement.on('click', function (event) {
          if (event.ctrlKey || event.metaKey || event.which == 2)
            return;
          var elm = jqLite(event.target);
          while (lowercase(elm[0].nodeName) !== 'a') {
            if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0])
              return;
          }
          var absHref = elm.prop('href');
          if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
            absHref = urlResolve(absHref.animVal).href;
          }
          var rewrittenUrl = $location.$$rewrite(absHref);
          if (absHref && !elm.attr('target') && rewrittenUrl && !event.isDefaultPrevented()) {
            event.preventDefault();
            if (rewrittenUrl != $browser.url()) {
              $location.$$parse(rewrittenUrl);
              $rootScope.$apply();
              window.angular['ff-684208-preventDefault'] = true;
            }
          }
        });
        if ($location.absUrl() != initialUrl) {
          $browser.url($location.absUrl(), true);
        }
        $browser.onUrlChange(function (newUrl) {
          if ($location.absUrl() != newUrl) {
            $rootScope.$evalAsync(function () {
              var oldUrl = $location.absUrl();
              $location.$$parse(newUrl);
              if ($rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl).defaultPrevented) {
                $location.$$parse(oldUrl);
                $browser.url(oldUrl);
              } else {
                afterLocationChange(oldUrl);
              }
            });
            if (!$rootScope.$$phase)
              $rootScope.$digest();
          }
        });
        var changeCounter = 0;
        $rootScope.$watch(function $locationWatch() {
          var oldUrl = $browser.url();
          var currentReplace = $location.$$replace;
          if (!changeCounter || oldUrl != $location.absUrl()) {
            changeCounter++;
            $rootScope.$evalAsync(function () {
              if ($rootScope.$broadcast('$locationChangeStart', $location.absUrl(), oldUrl).defaultPrevented) {
                $location.$$parse(oldUrl);
              } else {
                $browser.url($location.absUrl(), currentReplace);
                afterLocationChange(oldUrl);
              }
            });
          }
          $location.$$replace = false;
          return changeCounter;
        });
        return $location;
        function afterLocationChange(oldUrl) {
          $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl);
        }
      }
    ];
  }
  function $LogProvider() {
    var debug = true, self = this;
    this.debugEnabled = function (flag) {
      if (isDefined(flag)) {
        debug = flag;
        return this;
      } else {
        return debug;
      }
    };
    this.$get = [
      '$window',
      function ($window) {
        return {
          log: consoleLog('log'),
          info: consoleLog('info'),
          warn: consoleLog('warn'),
          error: consoleLog('error'),
          debug: function () {
            var fn = consoleLog('debug');
            return function () {
              if (debug) {
                fn.apply(self, arguments);
              }
            };
          }()
        };
        function formatError(arg) {
          if (arg instanceof Error) {
            if (arg.stack) {
              arg = arg.message && arg.stack.indexOf(arg.message) === -1 ? 'Error: ' + arg.message + '\n' + arg.stack : arg.stack;
            } else if (arg.sourceURL) {
              arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
            }
          }
          return arg;
        }
        function consoleLog(type) {
          var console = $window.console || {}, logFn = console[type] || console.log || noop, hasApply = false;
          try {
            hasApply = !!logFn.apply;
          } catch (e) {
          }
          if (hasApply) {
            return function () {
              var args = [];
              forEach(arguments, function (arg) {
                args.push(formatError(arg));
              });
              return logFn.apply(console, args);
            };
          }
          return function (arg1, arg2) {
            logFn(arg1, arg2 == null ? '' : arg2);
          };
        }
      }
    ];
  }
  var $parseMinErr = minErr('$parse');
  var promiseWarningCache = {};
  var promiseWarning;
  function ensureSafeMemberName(name, fullExpression) {
    if (name === 'constructor') {
      throw $parseMinErr('isecfld', 'Referencing "constructor" field in Angular expressions is disallowed! Expression: {0}', fullExpression);
    }
    return name;
  }
  function ensureSafeObject(obj, fullExpression) {
    if (obj) {
      if (obj.constructor === obj) {
        throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj.document && obj.location && obj.alert && obj.setInterval) {
        throw $parseMinErr('isecwindow', 'Referencing the Window in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj.children && (obj.nodeName || obj.prop && obj.attr && obj.find)) {
        throw $parseMinErr('isecdom', 'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}', fullExpression);
      }
    }
    return obj;
  }
  var OPERATORS = {
      'null': function () {
        return null;
      },
      'true': function () {
        return true;
      },
      'false': function () {
        return false;
      },
      undefined: noop,
      '+': function (self, locals, a, b) {
        a = a(self, locals);
        b = b(self, locals);
        if (isDefined(a)) {
          if (isDefined(b)) {
            return a + b;
          }
          return a;
        }
        return isDefined(b) ? b : undefined;
      },
      '-': function (self, locals, a, b) {
        a = a(self, locals);
        b = b(self, locals);
        return (isDefined(a) ? a : 0) - (isDefined(b) ? b : 0);
      },
      '*': function (self, locals, a, b) {
        return a(self, locals) * b(self, locals);
      },
      '/': function (self, locals, a, b) {
        return a(self, locals) / b(self, locals);
      },
      '%': function (self, locals, a, b) {
        return a(self, locals) % b(self, locals);
      },
      '^': function (self, locals, a, b) {
        return a(self, locals) ^ b(self, locals);
      },
      '=': noop,
      '===': function (self, locals, a, b) {
        return a(self, locals) === b(self, locals);
      },
      '!==': function (self, locals, a, b) {
        return a(self, locals) !== b(self, locals);
      },
      '==': function (self, locals, a, b) {
        return a(self, locals) == b(self, locals);
      },
      '!=': function (self, locals, a, b) {
        return a(self, locals) != b(self, locals);
      },
      '<': function (self, locals, a, b) {
        return a(self, locals) < b(self, locals);
      },
      '>': function (self, locals, a, b) {
        return a(self, locals) > b(self, locals);
      },
      '<=': function (self, locals, a, b) {
        return a(self, locals) <= b(self, locals);
      },
      '>=': function (self, locals, a, b) {
        return a(self, locals) >= b(self, locals);
      },
      '&&': function (self, locals, a, b) {
        return a(self, locals) && b(self, locals);
      },
      '||': function (self, locals, a, b) {
        return a(self, locals) || b(self, locals);
      },
      '&': function (self, locals, a, b) {
        return a(self, locals) & b(self, locals);
      },
      '|': function (self, locals, a, b) {
        return b(self, locals)(self, locals, a(self, locals));
      },
      '!': function (self, locals, a) {
        return !a(self, locals);
      }
    };
  var ESCAPE = {
      'n': '\n',
      'f': '\f',
      'r': '\r',
      't': '\t',
      'v': '\x0B',
      '\'': '\'',
      '"': '"'
    };
  var Lexer = function (options) {
    this.options = options;
  };
  Lexer.prototype = {
    constructor: Lexer,
    lex: function (text) {
      this.text = text;
      this.index = 0;
      this.ch = undefined;
      this.lastCh = ':';
      this.tokens = [];
      var token;
      var json = [];
      while (this.index < this.text.length) {
        this.ch = this.text.charAt(this.index);
        if (this.is('"\'')) {
          this.readString(this.ch);
        } else if (this.isNumber(this.ch) || this.is('.') && this.isNumber(this.peek())) {
          this.readNumber();
        } else if (this.isIdent(this.ch)) {
          this.readIdent();
          if (this.was('{,') && json[0] === '{' && (token = this.tokens[this.tokens.length - 1])) {
            token.json = token.text.indexOf('.') === -1;
          }
        } else if (this.is('(){}[].,;:?')) {
          this.tokens.push({
            index: this.index,
            text: this.ch,
            json: this.was(':[,') && this.is('{[') || this.is('}]:,')
          });
          if (this.is('{['))
            json.unshift(this.ch);
          if (this.is('}]'))
            json.shift();
          this.index++;
        } else if (this.isWhitespace(this.ch)) {
          this.index++;
          continue;
        } else {
          var ch2 = this.ch + this.peek();
          var ch3 = ch2 + this.peek(2);
          var fn = OPERATORS[this.ch];
          var fn2 = OPERATORS[ch2];
          var fn3 = OPERATORS[ch3];
          if (fn3) {
            this.tokens.push({
              index: this.index,
              text: ch3,
              fn: fn3
            });
            this.index += 3;
          } else if (fn2) {
            this.tokens.push({
              index: this.index,
              text: ch2,
              fn: fn2
            });
            this.index += 2;
          } else if (fn) {
            this.tokens.push({
              index: this.index,
              text: this.ch,
              fn: fn,
              json: this.was('[,:') && this.is('+-')
            });
            this.index += 1;
          } else {
            this.throwError('Unexpected next character ', this.index, this.index + 1);
          }
        }
        this.lastCh = this.ch;
      }
      return this.tokens;
    },
    is: function (chars) {
      return chars.indexOf(this.ch) !== -1;
    },
    was: function (chars) {
      return chars.indexOf(this.lastCh) !== -1;
    },
    peek: function (i) {
      var num = i || 1;
      return this.index + num < this.text.length ? this.text.charAt(this.index + num) : false;
    },
    isNumber: function (ch) {
      return '0' <= ch && ch <= '9';
    },
    isWhitespace: function (ch) {
      return ch === ' ' || ch === '\r' || ch === '\t' || ch === '\n' || ch === '\x0B' || ch === '\xa0';
    },
    isIdent: function (ch) {
      return 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' || '_' === ch || ch === '$';
    },
    isExpOperator: function (ch) {
      return ch === '-' || ch === '+' || this.isNumber(ch);
    },
    throwError: function (error, start, end) {
      end = end || this.index;
      var colStr = isDefined(start) ? 's ' + start + '-' + this.index + ' [' + this.text.substring(start, end) + ']' : ' ' + end;
      throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].', error, colStr, this.text);
    },
    readNumber: function () {
      var number = '';
      var start = this.index;
      while (this.index < this.text.length) {
        var ch = lowercase(this.text.charAt(this.index));
        if (ch == '.' || this.isNumber(ch)) {
          number += ch;
        } else {
          var peekCh = this.peek();
          if (ch == 'e' && this.isExpOperator(peekCh)) {
            number += ch;
          } else if (this.isExpOperator(ch) && peekCh && this.isNumber(peekCh) && number.charAt(number.length - 1) == 'e') {
            number += ch;
          } else if (this.isExpOperator(ch) && (!peekCh || !this.isNumber(peekCh)) && number.charAt(number.length - 1) == 'e') {
            this.throwError('Invalid exponent');
          } else {
            break;
          }
        }
        this.index++;
      }
      number = 1 * number;
      this.tokens.push({
        index: start,
        text: number,
        json: true,
        fn: function () {
          return number;
        }
      });
    },
    readIdent: function () {
      var parser = this;
      var ident = '';
      var start = this.index;
      var lastDot, peekIndex, methodName, ch;
      while (this.index < this.text.length) {
        ch = this.text.charAt(this.index);
        if (ch === '.' || this.isIdent(ch) || this.isNumber(ch)) {
          if (ch === '.')
            lastDot = this.index;
          ident += ch;
        } else {
          break;
        }
        this.index++;
      }
      if (lastDot) {
        peekIndex = this.index;
        while (peekIndex < this.text.length) {
          ch = this.text.charAt(peekIndex);
          if (ch === '(') {
            methodName = ident.substr(lastDot - start + 1);
            ident = ident.substr(0, lastDot - start);
            this.index = peekIndex;
            break;
          }
          if (this.isWhitespace(ch)) {
            peekIndex++;
          } else {
            break;
          }
        }
      }
      var token = {
          index: start,
          text: ident
        };
      if (OPERATORS.hasOwnProperty(ident)) {
        token.fn = OPERATORS[ident];
        token.json = OPERATORS[ident];
      } else {
        var getter = getterFn(ident, this.options, this.text);
        token.fn = extend(function (self, locals) {
          return getter(self, locals);
        }, {
          assign: function (self, value) {
            return setter(self, ident, value, parser.text, parser.options);
          }
        });
      }
      this.tokens.push(token);
      if (methodName) {
        this.tokens.push({
          index: lastDot,
          text: '.',
          json: false
        });
        this.tokens.push({
          index: lastDot + 1,
          text: methodName,
          json: false
        });
      }
    },
    readString: function (quote) {
      var start = this.index;
      this.index++;
      var string = '';
      var rawString = quote;
      var escape = false;
      while (this.index < this.text.length) {
        var ch = this.text.charAt(this.index);
        rawString += ch;
        if (escape) {
          if (ch === 'u') {
            var hex = this.text.substring(this.index + 1, this.index + 5);
            if (!hex.match(/[\da-f]{4}/i))
              this.throwError('Invalid unicode escape [\\u' + hex + ']');
            this.index += 4;
            string += String.fromCharCode(parseInt(hex, 16));
          } else {
            var rep = ESCAPE[ch];
            if (rep) {
              string += rep;
            } else {
              string += ch;
            }
          }
          escape = false;
        } else if (ch === '\\') {
          escape = true;
        } else if (ch === quote) {
          this.index++;
          this.tokens.push({
            index: start,
            text: rawString,
            string: string,
            json: true,
            fn: function () {
              return string;
            }
          });
          return;
        } else {
          string += ch;
        }
        this.index++;
      }
      this.throwError('Unterminated quote', start);
    }
  };
  var Parser = function (lexer, $filter, options) {
    this.lexer = lexer;
    this.$filter = $filter;
    this.options = options;
  };
  Parser.ZERO = extend(function () {
    return 0;
  }, { constant: true });
  Parser.prototype = {
    constructor: Parser,
    parse: function (text, json) {
      this.text = text;
      this.json = json;
      this.tokens = this.lexer.lex(text);
      if (json) {
        this.assignment = this.logicalOR;
        this.functionCall = this.fieldAccess = this.objectIndex = this.filterChain = function () {
          this.throwError('is not valid json', {
            text: text,
            index: 0
          });
        };
      }
      var value = json ? this.primary() : this.statements();
      if (this.tokens.length !== 0) {
        this.throwError('is an unexpected token', this.tokens[0]);
      }
      value.literal = !!value.literal;
      value.constant = !!value.constant;
      return value;
    },
    primary: function () {
      var primary;
      if (this.expect('(')) {
        primary = this.filterChain();
        this.consume(')');
      } else if (this.expect('[')) {
        primary = this.arrayDeclaration();
      } else if (this.expect('{')) {
        primary = this.object();
      } else {
        var token = this.expect();
        primary = token.fn;
        if (!primary) {
          this.throwError('not a primary expression', token);
        }
        if (token.json) {
          primary.constant = true;
          primary.literal = true;
        }
      }
      var next, context;
      while (next = this.expect('(', '[', '.')) {
        if (next.text === '(') {
          primary = this.functionCall(primary, context);
          context = null;
        } else if (next.text === '[') {
          context = primary;
          primary = this.objectIndex(primary);
        } else if (next.text === '.') {
          context = primary;
          primary = this.fieldAccess(primary);
        } else {
          this.throwError('IMPOSSIBLE');
        }
      }
      return primary;
    },
    throwError: function (msg, token) {
      throw $parseMinErr('syntax', 'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].', token.text, msg, token.index + 1, this.text, this.text.substring(token.index));
    },
    peekToken: function () {
      if (this.tokens.length === 0)
        throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
      return this.tokens[0];
    },
    peek: function (e1, e2, e3, e4) {
      if (this.tokens.length > 0) {
        var token = this.tokens[0];
        var t = token.text;
        if (t === e1 || t === e2 || t === e3 || t === e4 || !e1 && !e2 && !e3 && !e4) {
          return token;
        }
      }
      return false;
    },
    expect: function (e1, e2, e3, e4) {
      var token = this.peek(e1, e2, e3, e4);
      if (token) {
        if (this.json && !token.json) {
          this.throwError('is not valid json', token);
        }
        this.tokens.shift();
        return token;
      }
      return false;
    },
    consume: function (e1) {
      if (!this.expect(e1)) {
        this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
      }
    },
    unaryFn: function (fn, right) {
      return extend(function (self, locals) {
        return fn(self, locals, right);
      }, { constant: right.constant });
    },
    ternaryFn: function (left, middle, right) {
      return extend(function (self, locals) {
        return left(self, locals) ? middle(self, locals) : right(self, locals);
      }, { constant: left.constant && middle.constant && right.constant });
    },
    binaryFn: function (left, fn, right) {
      return extend(function (self, locals) {
        return fn(self, locals, left, right);
      }, { constant: left.constant && right.constant });
    },
    statements: function () {
      var statements = [];
      while (true) {
        if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
          statements.push(this.filterChain());
        if (!this.expect(';')) {
          return statements.length === 1 ? statements[0] : function (self, locals) {
            var value;
            for (var i = 0; i < statements.length; i++) {
              var statement = statements[i];
              if (statement) {
                value = statement(self, locals);
              }
            }
            return value;
          };
        }
      }
    },
    filterChain: function () {
      var left = this.expression();
      var token;
      while (true) {
        if (token = this.expect('|')) {
          left = this.binaryFn(left, token.fn, this.filter());
        } else {
          return left;
        }
      }
    },
    filter: function () {
      var token = this.expect();
      var fn = this.$filter(token.text);
      var argsFn = [];
      while (true) {
        if (token = this.expect(':')) {
          argsFn.push(this.expression());
        } else {
          var fnInvoke = function (self, locals, input) {
            var args = [input];
            for (var i = 0; i < argsFn.length; i++) {
              args.push(argsFn[i](self, locals));
            }
            return fn.apply(self, args);
          };
          return function () {
            return fnInvoke;
          };
        }
      }
    },
    expression: function () {
      return this.assignment();
    },
    assignment: function () {
      var left = this.ternary();
      var right;
      var token;
      if (token = this.expect('=')) {
        if (!left.assign) {
          this.throwError('implies assignment but [' + this.text.substring(0, token.index) + '] can not be assigned to', token);
        }
        right = this.ternary();
        return function (scope, locals) {
          return left.assign(scope, right(scope, locals), locals);
        };
      }
      return left;
    },
    ternary: function () {
      var left = this.logicalOR();
      var middle;
      var token;
      if (token = this.expect('?')) {
        middle = this.ternary();
        if (token = this.expect(':')) {
          return this.ternaryFn(left, middle, this.ternary());
        } else {
          this.throwError('expected :', token);
        }
      } else {
        return left;
      }
    },
    logicalOR: function () {
      var left = this.logicalAND();
      var token;
      while (true) {
        if (token = this.expect('||')) {
          left = this.binaryFn(left, token.fn, this.logicalAND());
        } else {
          return left;
        }
      }
    },
    logicalAND: function () {
      var left = this.equality();
      var token;
      if (token = this.expect('&&')) {
        left = this.binaryFn(left, token.fn, this.logicalAND());
      }
      return left;
    },
    equality: function () {
      var left = this.relational();
      var token;
      if (token = this.expect('==', '!=', '===', '!==')) {
        left = this.binaryFn(left, token.fn, this.equality());
      }
      return left;
    },
    relational: function () {
      var left = this.additive();
      var token;
      if (token = this.expect('<', '>', '<=', '>=')) {
        left = this.binaryFn(left, token.fn, this.relational());
      }
      return left;
    },
    additive: function () {
      var left = this.multiplicative();
      var token;
      while (token = this.expect('+', '-')) {
        left = this.binaryFn(left, token.fn, this.multiplicative());
      }
      return left;
    },
    multiplicative: function () {
      var left = this.unary();
      var token;
      while (token = this.expect('*', '/', '%')) {
        left = this.binaryFn(left, token.fn, this.unary());
      }
      return left;
    },
    unary: function () {
      var token;
      if (this.expect('+')) {
        return this.primary();
      } else if (token = this.expect('-')) {
        return this.binaryFn(Parser.ZERO, token.fn, this.unary());
      } else if (token = this.expect('!')) {
        return this.unaryFn(token.fn, this.unary());
      } else {
        return this.primary();
      }
    },
    fieldAccess: function (object) {
      var parser = this;
      var field = this.expect().text;
      var getter = getterFn(field, this.options, this.text);
      return extend(function (scope, locals, self) {
        return getter(self || object(scope, locals));
      }, {
        assign: function (scope, value, locals) {
          return setter(object(scope, locals), field, value, parser.text, parser.options);
        }
      });
    },
    objectIndex: function (obj) {
      var parser = this;
      var indexFn = this.expression();
      this.consume(']');
      return extend(function (self, locals) {
        var o = obj(self, locals), i = indexFn(self, locals), v, p;
        if (!o)
          return undefined;
        v = ensureSafeObject(o[i], parser.text);
        if (v && v.then && parser.options.unwrapPromises) {
          p = v;
          if (!('$$v' in v)) {
            p.$$v = undefined;
            p.then(function (val) {
              p.$$v = val;
            });
          }
          v = v.$$v;
        }
        return v;
      }, {
        assign: function (self, value, locals) {
          var key = indexFn(self, locals);
          var safe = ensureSafeObject(obj(self, locals), parser.text);
          return safe[key] = value;
        }
      });
    },
    functionCall: function (fn, contextGetter) {
      var argsFn = [];
      if (this.peekToken().text !== ')') {
        do {
          argsFn.push(this.expression());
        } while (this.expect(','));
      }
      this.consume(')');
      var parser = this;
      return function (scope, locals) {
        var args = [];
        var context = contextGetter ? contextGetter(scope, locals) : scope;
        for (var i = 0; i < argsFn.length; i++) {
          args.push(argsFn[i](scope, locals));
        }
        var fnPtr = fn(scope, locals, context) || noop;
        ensureSafeObject(context, parser.text);
        ensureSafeObject(fnPtr, parser.text);
        var v = fnPtr.apply ? fnPtr.apply(context, args) : fnPtr(args[0], args[1], args[2], args[3], args[4]);
        return ensureSafeObject(v, parser.text);
      };
    },
    arrayDeclaration: function () {
      var elementFns = [];
      var allConstant = true;
      if (this.peekToken().text !== ']') {
        do {
          if (this.peek(']')) {
            break;
          }
          var elementFn = this.expression();
          elementFns.push(elementFn);
          if (!elementFn.constant) {
            allConstant = false;
          }
        } while (this.expect(','));
      }
      this.consume(']');
      return extend(function (self, locals) {
        var array = [];
        for (var i = 0; i < elementFns.length; i++) {
          array.push(elementFns[i](self, locals));
        }
        return array;
      }, {
        literal: true,
        constant: allConstant
      });
    },
    object: function () {
      var keyValues = [];
      var allConstant = true;
      if (this.peekToken().text !== '}') {
        do {
          if (this.peek('}')) {
            break;
          }
          var token = this.expect(), key = token.string || token.text;
          this.consume(':');
          var value = this.expression();
          keyValues.push({
            key: key,
            value: value
          });
          if (!value.constant) {
            allConstant = false;
          }
        } while (this.expect(','));
      }
      this.consume('}');
      return extend(function (self, locals) {
        var object = {};
        for (var i = 0; i < keyValues.length; i++) {
          var keyValue = keyValues[i];
          object[keyValue.key] = keyValue.value(self, locals);
        }
        return object;
      }, {
        literal: true,
        constant: allConstant
      });
    }
  };
  function setter(obj, path, setValue, fullExp, options) {
    options = options || {};
    var element = path.split('.'), key;
    for (var i = 0; element.length > 1; i++) {
      key = ensureSafeMemberName(element.shift(), fullExp);
      var propertyObj = obj[key];
      if (!propertyObj) {
        propertyObj = {};
        obj[key] = propertyObj;
      }
      obj = propertyObj;
      if (obj.then && options.unwrapPromises) {
        promiseWarning(fullExp);
        if (!('$$v' in obj)) {
          (function (promise) {
            promise.then(function (val) {
              promise.$$v = val;
            });
          }(obj));
        }
        if (obj.$$v === undefined) {
          obj.$$v = {};
        }
        obj = obj.$$v;
      }
    }
    key = ensureSafeMemberName(element.shift(), fullExp);
    obj[key] = setValue;
    return setValue;
  }
  var getterFnCache = {};
  function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, options) {
    ensureSafeMemberName(key0, fullExp);
    ensureSafeMemberName(key1, fullExp);
    ensureSafeMemberName(key2, fullExp);
    ensureSafeMemberName(key3, fullExp);
    ensureSafeMemberName(key4, fullExp);
    return !options.unwrapPromises ? function cspSafeGetter(scope, locals) {
      var pathVal = locals && locals.hasOwnProperty(key0) ? locals : scope;
      if (pathVal == null)
        return pathVal;
      pathVal = pathVal[key0];
      if (!key1)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key1];
      if (!key2)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key2];
      if (!key3)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key3];
      if (!key4)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key4];
      return pathVal;
    } : function cspSafePromiseEnabledGetter(scope, locals) {
      var pathVal = locals && locals.hasOwnProperty(key0) ? locals : scope, promise;
      if (pathVal == null)
        return pathVal;
      pathVal = pathVal[key0];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = val;
          });
        }
        pathVal = pathVal.$$v;
      }
      if (!key1)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key1];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = val;
          });
        }
        pathVal = pathVal.$$v;
      }
      if (!key2)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key2];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = val;
          });
        }
        pathVal = pathVal.$$v;
      }
      if (!key3)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key3];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = val;
          });
        }
        pathVal = pathVal.$$v;
      }
      if (!key4)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key4];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = val;
          });
        }
        pathVal = pathVal.$$v;
      }
      return pathVal;
    };
  }
  function simpleGetterFn1(key0, fullExp) {
    ensureSafeMemberName(key0, fullExp);
    return function simpleGetterFn1(scope, locals) {
      if (scope == null)
        return undefined;
      return (locals && locals.hasOwnProperty(key0) ? locals : scope)[key0];
    };
  }
  function simpleGetterFn2(key0, key1, fullExp) {
    ensureSafeMemberName(key0, fullExp);
    ensureSafeMemberName(key1, fullExp);
    return function simpleGetterFn2(scope, locals) {
      if (scope == null)
        return undefined;
      scope = (locals && locals.hasOwnProperty(key0) ? locals : scope)[key0];
      return scope == null ? undefined : scope[key1];
    };
  }
  function getterFn(path, options, fullExp) {
    if (getterFnCache.hasOwnProperty(path)) {
      return getterFnCache[path];
    }
    var pathKeys = path.split('.'), pathKeysLength = pathKeys.length, fn;
    if (!options.unwrapPromises && pathKeysLength === 1) {
      fn = simpleGetterFn1(pathKeys[0], fullExp);
    } else if (!options.unwrapPromises && pathKeysLength === 2) {
      fn = simpleGetterFn2(pathKeys[0], pathKeys[1], fullExp);
    } else if (options.csp) {
      if (pathKeysLength < 6) {
        fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp, options);
      } else {
        fn = function (scope, locals) {
          var i = 0, val;
          do {
            val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], fullExp, options)(scope, locals);
            locals = undefined;
            scope = val;
          } while (i < pathKeysLength);
          return val;
        };
      }
    } else {
      var code = 'var p;\n';
      forEach(pathKeys, function (key, index) {
        ensureSafeMemberName(key, fullExp);
        code += 'if(s == null) return undefined;\n' + 's=' + (index ? 's' : '((k&&k.hasOwnProperty("' + key + '"))?k:s)') + '["' + key + '"]' + ';\n' + (options.unwrapPromises ? 'if (s && s.then) {\n' + ' pw("' + fullExp.replace(/(["\r\n])/g, '\\$1') + '");\n' + ' if (!("$$v" in s)) {\n' + ' p=s;\n' + ' p.$$v = undefined;\n' + ' p.then(function(v) {p.$$v=v;});\n' + '}\n' + ' s=s.$$v\n' + '}\n' : '');
      });
      code += 'return s;';
      var evaledFnGetter = new Function('s', 'k', 'pw', code);
      evaledFnGetter.toString = valueFn(code);
      fn = options.unwrapPromises ? function (scope, locals) {
        return evaledFnGetter(scope, locals, promiseWarning);
      } : evaledFnGetter;
    }
    if (path !== 'hasOwnProperty') {
      getterFnCache[path] = fn;
    }
    return fn;
  }
  function $ParseProvider() {
    var cache = {};
    var $parseOptions = {
        csp: false,
        unwrapPromises: false,
        logPromiseWarnings: true
      };
    this.unwrapPromises = function (value) {
      if (isDefined(value)) {
        $parseOptions.unwrapPromises = !!value;
        return this;
      } else {
        return $parseOptions.unwrapPromises;
      }
    };
    this.logPromiseWarnings = function (value) {
      if (isDefined(value)) {
        $parseOptions.logPromiseWarnings = value;
        return this;
      } else {
        return $parseOptions.logPromiseWarnings;
      }
    };
    this.$get = [
      '$filter',
      '$sniffer',
      '$log',
      function ($filter, $sniffer, $log) {
        $parseOptions.csp = $sniffer.csp;
        promiseWarning = function promiseWarningFn(fullExp) {
          if (!$parseOptions.logPromiseWarnings || promiseWarningCache.hasOwnProperty(fullExp))
            return;
          promiseWarningCache[fullExp] = true;
          $log.warn('[$parse] Promise found in the expression `' + fullExp + '`. ' + 'Automatic unwrapping of promises in Angular expressions is deprecated.');
        };
        return function (exp) {
          var parsedExpression;
          switch (typeof exp) {
          case 'string':
            if (cache.hasOwnProperty(exp)) {
              return cache[exp];
            }
            var lexer = new Lexer($parseOptions);
            var parser = new Parser(lexer, $filter, $parseOptions);
            parsedExpression = parser.parse(exp, false);
            if (exp !== 'hasOwnProperty') {
              cache[exp] = parsedExpression;
            }
            return parsedExpression;
          case 'function':
            return exp;
          default:
            return noop;
          }
        };
      }
    ];
  }
  function $QProvider() {
    this.$get = [
      '$rootScope',
      '$exceptionHandler',
      function ($rootScope, $exceptionHandler) {
        return qFactory(function (callback) {
          $rootScope.$evalAsync(callback);
        }, $exceptionHandler);
      }
    ];
  }
  function qFactory(nextTick, exceptionHandler) {
    var defer = function () {
      var pending = [], value, deferred;
      deferred = {
        resolve: function (val) {
          if (pending) {
            var callbacks = pending;
            pending = undefined;
            value = ref(val);
            if (callbacks.length) {
              nextTick(function () {
                var callback;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  callback = callbacks[i];
                  value.then(callback[0], callback[1], callback[2]);
                }
              });
            }
          }
        },
        reject: function (reason) {
          deferred.resolve(createInternalRejectedPromise(reason));
        },
        notify: function (progress) {
          if (pending) {
            var callbacks = pending;
            if (pending.length) {
              nextTick(function () {
                var callback;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  callback = callbacks[i];
                  callback[2](progress);
                }
              });
            }
          }
        },
        promise: {
          then: function (callback, errback, progressback) {
            var result = defer();
            var wrappedCallback = function (value) {
              try {
                result.resolve((isFunction(callback) ? callback : defaultCallback)(value));
              } catch (e) {
                result.reject(e);
                exceptionHandler(e);
              }
            };
            var wrappedErrback = function (reason) {
              try {
                result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
              } catch (e) {
                result.reject(e);
                exceptionHandler(e);
              }
            };
            var wrappedProgressback = function (progress) {
              try {
                result.notify((isFunction(progressback) ? progressback : defaultCallback)(progress));
              } catch (e) {
                exceptionHandler(e);
              }
            };
            if (pending) {
              pending.push([
                wrappedCallback,
                wrappedErrback,
                wrappedProgressback
              ]);
            } else {
              value.then(wrappedCallback, wrappedErrback, wrappedProgressback);
            }
            return result.promise;
          },
          'catch': function (callback) {
            return this.then(null, callback);
          },
          'finally': function (callback) {
            function makePromise(value, resolved) {
              var result = defer();
              if (resolved) {
                result.resolve(value);
              } else {
                result.reject(value);
              }
              return result.promise;
            }
            function handleCallback(value, isResolved) {
              var callbackOutput = null;
              try {
                callbackOutput = (callback || defaultCallback)();
              } catch (e) {
                return makePromise(e, false);
              }
              if (callbackOutput && isFunction(callbackOutput.then)) {
                return callbackOutput.then(function () {
                  return makePromise(value, isResolved);
                }, function (error) {
                  return makePromise(error, false);
                });
              } else {
                return makePromise(value, isResolved);
              }
            }
            return this.then(function (value) {
              return handleCallback(value, true);
            }, function (error) {
              return handleCallback(error, false);
            });
          }
        }
      };
      return deferred;
    };
    var ref = function (value) {
      if (value && isFunction(value.then))
        return value;
      return {
        then: function (callback) {
          var result = defer();
          nextTick(function () {
            result.resolve(callback(value));
          });
          return result.promise;
        }
      };
    };
    var reject = function (reason) {
      var result = defer();
      result.reject(reason);
      return result.promise;
    };
    var createInternalRejectedPromise = function (reason) {
      return {
        then: function (callback, errback) {
          var result = defer();
          nextTick(function () {
            try {
              result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
            } catch (e) {
              result.reject(e);
              exceptionHandler(e);
            }
          });
          return result.promise;
        }
      };
    };
    var when = function (value, callback, errback, progressback) {
      var result = defer(), done;
      var wrappedCallback = function (value) {
        try {
          return (isFunction(callback) ? callback : defaultCallback)(value);
        } catch (e) {
          exceptionHandler(e);
          return reject(e);
        }
      };
      var wrappedErrback = function (reason) {
        try {
          return (isFunction(errback) ? errback : defaultErrback)(reason);
        } catch (e) {
          exceptionHandler(e);
          return reject(e);
        }
      };
      var wrappedProgressback = function (progress) {
        try {
          return (isFunction(progressback) ? progressback : defaultCallback)(progress);
        } catch (e) {
          exceptionHandler(e);
        }
      };
      nextTick(function () {
        ref(value).then(function (value) {
          if (done)
            return;
          done = true;
          result.resolve(ref(value).then(wrappedCallback, wrappedErrback, wrappedProgressback));
        }, function (reason) {
          if (done)
            return;
          done = true;
          result.resolve(wrappedErrback(reason));
        }, function (progress) {
          if (done)
            return;
          result.notify(wrappedProgressback(progress));
        });
      });
      return result.promise;
    };
    function defaultCallback(value) {
      return value;
    }
    function defaultErrback(reason) {
      return reject(reason);
    }
    function all(promises) {
      var deferred = defer(), counter = 0, results = isArray(promises) ? [] : {};
      forEach(promises, function (promise, key) {
        counter++;
        ref(promise).then(function (value) {
          if (results.hasOwnProperty(key))
            return;
          results[key] = value;
          if (!--counter)
            deferred.resolve(results);
        }, function (reason) {
          if (results.hasOwnProperty(key))
            return;
          deferred.reject(reason);
        });
      });
      if (counter === 0) {
        deferred.resolve(results);
      }
      return deferred.promise;
    }
    return {
      defer: defer,
      reject: reject,
      when: when,
      all: all
    };
  }
  function $$RAFProvider() {
    this.$get = [
      '$window',
      '$timeout',
      function ($window, $timeout) {
        var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
        var cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.mozCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame;
        var rafSupported = !!requestAnimationFrame;
        var raf = rafSupported ? function (fn) {
            var id = requestAnimationFrame(fn);
            return function () {
              cancelAnimationFrame(id);
            };
          } : function (fn) {
            var timer = $timeout(fn, 16.66, false);
            return function () {
              $timeout.cancel(timer);
            };
          };
        raf.supported = rafSupported;
        return raf;
      }
    ];
  }
  function $RootScopeProvider() {
    var TTL = 10;
    var $rootScopeMinErr = minErr('$rootScope');
    var lastDirtyWatch = null;
    this.digestTtl = function (value) {
      if (arguments.length) {
        TTL = value;
      }
      return TTL;
    };
    this.$get = [
      '$injector',
      '$exceptionHandler',
      '$parse',
      '$browser',
      function ($injector, $exceptionHandler, $parse, $browser) {
        function Scope() {
          this.$id = nextUid();
          this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
          this['this'] = this.$root = this;
          this.$$destroyed = false;
          this.$$asyncQueue = [];
          this.$$postDigestQueue = [];
          this.$$listeners = {};
          this.$$listenerCount = {};
          this.$$isolateBindings = {};
        }
        Scope.prototype = {
          constructor: Scope,
          $new: function (isolate) {
            var ChildScope, child;
            if (isolate) {
              child = new Scope();
              child.$root = this.$root;
              child.$$asyncQueue = this.$$asyncQueue;
              child.$$postDigestQueue = this.$$postDigestQueue;
            } else {
              ChildScope = function () {
              };
              ChildScope.prototype = this;
              child = new ChildScope();
              child.$id = nextUid();
            }
            child['this'] = child;
            child.$$listeners = {};
            child.$$listenerCount = {};
            child.$parent = this;
            child.$$watchers = child.$$nextSibling = child.$$childHead = child.$$childTail = null;
            child.$$prevSibling = this.$$childTail;
            if (this.$$childHead) {
              this.$$childTail.$$nextSibling = child;
              this.$$childTail = child;
            } else {
              this.$$childHead = this.$$childTail = child;
            }
            return child;
          },
          $watch: function (watchExp, listener, objectEquality) {
            var scope = this, get = compileToFn(watchExp, 'watch'), array = scope.$$watchers, watcher = {
                fn: listener,
                last: initWatchVal,
                get: get,
                exp: watchExp,
                eq: !!objectEquality
              };
            lastDirtyWatch = null;
            if (!isFunction(listener)) {
              var listenFn = compileToFn(listener || noop, 'listener');
              watcher.fn = function (newVal, oldVal, scope) {
                listenFn(scope);
              };
            }
            if (typeof watchExp == 'string' && get.constant) {
              var originalFn = watcher.fn;
              watcher.fn = function (newVal, oldVal, scope) {
                originalFn.call(this, newVal, oldVal, scope);
                arrayRemove(array, watcher);
              };
            }
            if (!array) {
              array = scope.$$watchers = [];
            }
            array.unshift(watcher);
            return function () {
              arrayRemove(array, watcher);
              lastDirtyWatch = null;
            };
          },
          $watchCollection: function (obj, listener) {
            var self = this;
            var newValue;
            var oldValue;
            var veryOldValue;
            var trackVeryOldValue = listener.length > 1;
            var changeDetected = 0;
            var objGetter = $parse(obj);
            var internalArray = [];
            var internalObject = {};
            var initRun = true;
            var oldLength = 0;
            function $watchCollectionWatch() {
              newValue = objGetter(self);
              var newLength, key;
              if (!isObject(newValue)) {
                if (oldValue !== newValue) {
                  oldValue = newValue;
                  changeDetected++;
                }
              } else if (isArrayLike(newValue)) {
                if (oldValue !== internalArray) {
                  oldValue = internalArray;
                  oldLength = oldValue.length = 0;
                  changeDetected++;
                }
                newLength = newValue.length;
                if (oldLength !== newLength) {
                  changeDetected++;
                  oldValue.length = oldLength = newLength;
                }
                for (var i = 0; i < newLength; i++) {
                  var bothNaN = oldValue[i] !== oldValue[i] && newValue[i] !== newValue[i];
                  if (!bothNaN && oldValue[i] !== newValue[i]) {
                    changeDetected++;
                    oldValue[i] = newValue[i];
                  }
                }
              } else {
                if (oldValue !== internalObject) {
                  oldValue = internalObject = {};
                  oldLength = 0;
                  changeDetected++;
                }
                newLength = 0;
                for (key in newValue) {
                  if (newValue.hasOwnProperty(key)) {
                    newLength++;
                    if (oldValue.hasOwnProperty(key)) {
                      if (oldValue[key] !== newValue[key]) {
                        changeDetected++;
                        oldValue[key] = newValue[key];
                      }
                    } else {
                      oldLength++;
                      oldValue[key] = newValue[key];
                      changeDetected++;
                    }
                  }
                }
                if (oldLength > newLength) {
                  changeDetected++;
                  for (key in oldValue) {
                    if (oldValue.hasOwnProperty(key) && !newValue.hasOwnProperty(key)) {
                      oldLength--;
                      delete oldValue[key];
                    }
                  }
                }
              }
              return changeDetected;
            }
            function $watchCollectionAction() {
              if (initRun) {
                initRun = false;
                listener(newValue, newValue, self);
              } else {
                listener(newValue, veryOldValue, self);
              }
              if (trackVeryOldValue) {
                if (!isObject(newValue)) {
                  veryOldValue = newValue;
                } else if (isArrayLike(newValue)) {
                  veryOldValue = new Array(newValue.length);
                  for (var i = 0; i < newValue.length; i++) {
                    veryOldValue[i] = newValue[i];
                  }
                } else {
                  veryOldValue = {};
                  for (var key in newValue) {
                    if (hasOwnProperty.call(newValue, key)) {
                      veryOldValue[key] = newValue[key];
                    }
                  }
                }
              }
            }
            return this.$watch($watchCollectionWatch, $watchCollectionAction);
          },
          $digest: function () {
            var watch, value, last, watchers, asyncQueue = this.$$asyncQueue, postDigestQueue = this.$$postDigestQueue, length, dirty, ttl = TTL, next, current, target = this, watchLog = [], logIdx, logMsg, asyncTask;
            beginPhase('$digest');
            lastDirtyWatch = null;
            do {
              dirty = false;
              current = target;
              while (asyncQueue.length) {
                try {
                  asyncTask = asyncQueue.shift();
                  asyncTask.scope.$eval(asyncTask.expression);
                } catch (e) {
                  clearPhase();
                  $exceptionHandler(e);
                }
                lastDirtyWatch = null;
              }
              traverseScopesLoop:
                do {
                  if (watchers = current.$$watchers) {
                    length = watchers.length;
                    while (length--) {
                      try {
                        watch = watchers[length];
                        if (watch) {
                          if ((value = watch.get(current)) !== (last = watch.last) && !(watch.eq ? equals(value, last) : typeof value == 'number' && typeof last == 'number' && isNaN(value) && isNaN(last))) {
                            dirty = true;
                            lastDirtyWatch = watch;
                            watch.last = watch.eq ? copy(value) : value;
                            watch.fn(value, last === initWatchVal ? value : last, current);
                            if (ttl < 5) {
                              logIdx = 4 - ttl;
                              if (!watchLog[logIdx])
                                watchLog[logIdx] = [];
                              logMsg = isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp;
                              logMsg += '; newVal: ' + toJson(value) + '; oldVal: ' + toJson(last);
                              watchLog[logIdx].push(logMsg);
                            }
                          } else if (watch === lastDirtyWatch) {
                            dirty = false;
                            break traverseScopesLoop;
                          }
                        }
                      } catch (e) {
                        clearPhase();
                        $exceptionHandler(e);
                      }
                    }
                  }
                  if (!(next = current.$$childHead || current !== target && current.$$nextSibling)) {
                    while (current !== target && !(next = current.$$nextSibling)) {
                      current = current.$parent;
                    }
                  }
                } while (current = next);
              if ((dirty || asyncQueue.length) && !ttl--) {
                clearPhase();
                throw $rootScopeMinErr('infdig', '{0} $digest() iterations reached. Aborting!\n' + 'Watchers fired in the last 5 iterations: {1}', TTL, toJson(watchLog));
              }
            } while (dirty || asyncQueue.length);
            clearPhase();
            while (postDigestQueue.length) {
              try {
                postDigestQueue.shift()();
              } catch (e) {
                $exceptionHandler(e);
              }
            }
          },
          $destroy: function () {
            if (this.$$destroyed)
              return;
            var parent = this.$parent;
            this.$broadcast('$destroy');
            this.$$destroyed = true;
            if (this === $rootScope)
              return;
            forEach(this.$$listenerCount, bind(null, decrementListenerCount, this));
            if (parent.$$childHead == this)
              parent.$$childHead = this.$$nextSibling;
            if (parent.$$childTail == this)
              parent.$$childTail = this.$$prevSibling;
            if (this.$$prevSibling)
              this.$$prevSibling.$$nextSibling = this.$$nextSibling;
            if (this.$$nextSibling)
              this.$$nextSibling.$$prevSibling = this.$$prevSibling;
            this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = this.$root = null;
            this.$$listeners = {};
            this.$$watchers = this.$$asyncQueue = this.$$postDigestQueue = [];
            this.$destroy = this.$digest = this.$apply = noop;
            this.$on = this.$watch = function () {
              return noop;
            };
          },
          $eval: function (expr, locals) {
            return $parse(expr)(this, locals);
          },
          $evalAsync: function (expr) {
            if (!$rootScope.$$phase && !$rootScope.$$asyncQueue.length) {
              $browser.defer(function () {
                if ($rootScope.$$asyncQueue.length) {
                  $rootScope.$digest();
                }
              });
            }
            this.$$asyncQueue.push({
              scope: this,
              expression: expr
            });
          },
          $$postDigest: function (fn) {
            this.$$postDigestQueue.push(fn);
          },
          $apply: function (expr) {
            try {
              beginPhase('$apply');
              return this.$eval(expr);
            } catch (e) {
              $exceptionHandler(e);
            } finally {
              clearPhase();
              try {
                $rootScope.$digest();
              } catch (e) {
                $exceptionHandler(e);
                throw e;
              }
            }
          },
          $on: function (name, listener) {
            var namedListeners = this.$$listeners[name];
            if (!namedListeners) {
              this.$$listeners[name] = namedListeners = [];
            }
            namedListeners.push(listener);
            var current = this;
            do {
              if (!current.$$listenerCount[name]) {
                current.$$listenerCount[name] = 0;
              }
              current.$$listenerCount[name]++;
            } while (current = current.$parent);
            var self = this;
            return function () {
              namedListeners[indexOf(namedListeners, listener)] = null;
              decrementListenerCount(self, 1, name);
            };
          },
          $emit: function (name, args) {
            var empty = [], namedListeners, scope = this, stopPropagation = false, event = {
                name: name,
                targetScope: scope,
                stopPropagation: function () {
                  stopPropagation = true;
                },
                preventDefault: function () {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              }, listenerArgs = concat([event], arguments, 1), i, length;
            do {
              namedListeners = scope.$$listeners[name] || empty;
              event.currentScope = scope;
              for (i = 0, length = namedListeners.length; i < length; i++) {
                if (!namedListeners[i]) {
                  namedListeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }
                try {
                  namedListeners[i].apply(null, listenerArgs);
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              if (stopPropagation)
                return event;
              scope = scope.$parent;
            } while (scope);
            return event;
          },
          $broadcast: function (name, args) {
            var target = this, current = target, next = target, event = {
                name: name,
                targetScope: target,
                preventDefault: function () {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              }, listenerArgs = concat([event], arguments, 1), listeners, i, length;
            while (current = next) {
              event.currentScope = current;
              listeners = current.$$listeners[name] || [];
              for (i = 0, length = listeners.length; i < length; i++) {
                if (!listeners[i]) {
                  listeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }
                try {
                  listeners[i].apply(null, listenerArgs);
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              if (!(next = current.$$listenerCount[name] && current.$$childHead || current !== target && current.$$nextSibling)) {
                while (current !== target && !(next = current.$$nextSibling)) {
                  current = current.$parent;
                }
              }
            }
            return event;
          }
        };
        var $rootScope = new Scope();
        return $rootScope;
        function beginPhase(phase) {
          if ($rootScope.$$phase) {
            throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
          }
          $rootScope.$$phase = phase;
        }
        function clearPhase() {
          $rootScope.$$phase = null;
        }
        function compileToFn(exp, name) {
          var fn = $parse(exp);
          assertArgFn(fn, name);
          return fn;
        }
        function decrementListenerCount(current, count, name) {
          do {
            current.$$listenerCount[name] -= count;
            if (current.$$listenerCount[name] === 0) {
              delete current.$$listenerCount[name];
            }
          } while (current = current.$parent);
        }
        function initWatchVal() {
        }
      }
    ];
  }
  function $$SanitizeUriProvider() {
    var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/, imgSrcSanitizationWhitelist = /^\s*(https?|ftp|file):|data:image\//;
    this.aHrefSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        aHrefSanitizationWhitelist = regexp;
        return this;
      }
      return aHrefSanitizationWhitelist;
    };
    this.imgSrcSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        imgSrcSanitizationWhitelist = regexp;
        return this;
      }
      return imgSrcSanitizationWhitelist;
    };
    this.$get = function () {
      return function sanitizeUri(uri, isImage) {
        var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
        var normalizedVal;
        if (!msie || msie >= 8) {
          normalizedVal = urlResolve(uri).href;
          if (normalizedVal !== '' && !normalizedVal.match(regex)) {
            return 'unsafe:' + normalizedVal;
          }
        }
        return uri;
      };
    };
  }
  var $sceMinErr = minErr('$sce');
  var SCE_CONTEXTS = {
      HTML: 'html',
      CSS: 'css',
      URL: 'url',
      RESOURCE_URL: 'resourceUrl',
      JS: 'js'
    };
  function escapeForRegexp(s) {
    return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').replace(/\x08/g, '\\x08');
  }
  function adjustMatcher(matcher) {
    if (matcher === 'self') {
      return matcher;
    } else if (isString(matcher)) {
      if (matcher.indexOf('***') > -1) {
        throw $sceMinErr('iwcard', 'Illegal sequence *** in string matcher.  String: {0}', matcher);
      }
      matcher = escapeForRegexp(matcher).replace('\\*\\*', '.*').replace('\\*', '[^:/.?&;]*');
      return new RegExp('^' + matcher + '$');
    } else if (isRegExp(matcher)) {
      return new RegExp('^' + matcher.source + '$');
    } else {
      throw $sceMinErr('imatcher', 'Matchers may only be "self", string patterns or RegExp objects');
    }
  }
  function adjustMatchers(matchers) {
    var adjustedMatchers = [];
    if (isDefined(matchers)) {
      forEach(matchers, function (matcher) {
        adjustedMatchers.push(adjustMatcher(matcher));
      });
    }
    return adjustedMatchers;
  }
  function $SceDelegateProvider() {
    this.SCE_CONTEXTS = SCE_CONTEXTS;
    var resourceUrlWhitelist = ['self'], resourceUrlBlacklist = [];
    this.resourceUrlWhitelist = function (value) {
      if (arguments.length) {
        resourceUrlWhitelist = adjustMatchers(value);
      }
      return resourceUrlWhitelist;
    };
    this.resourceUrlBlacklist = function (value) {
      if (arguments.length) {
        resourceUrlBlacklist = adjustMatchers(value);
      }
      return resourceUrlBlacklist;
    };
    this.$get = [
      '$injector',
      function ($injector) {
        var htmlSanitizer = function htmlSanitizer(html) {
          throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
        };
        if ($injector.has('$sanitize')) {
          htmlSanitizer = $injector.get('$sanitize');
        }
        function matchUrl(matcher, parsedUrl) {
          if (matcher === 'self') {
            return urlIsSameOrigin(parsedUrl);
          } else {
            return !!matcher.exec(parsedUrl.href);
          }
        }
        function isResourceUrlAllowedByPolicy(url) {
          var parsedUrl = urlResolve(url.toString());
          var i, n, allowed = false;
          for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
            if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
              allowed = true;
              break;
            }
          }
          if (allowed) {
            for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
              if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
                allowed = false;
                break;
              }
            }
          }
          return allowed;
        }
        function generateHolderType(Base) {
          var holderType = function TrustedValueHolderType(trustedValue) {
            this.$$unwrapTrustedValue = function () {
              return trustedValue;
            };
          };
          if (Base) {
            holderType.prototype = new Base();
          }
          holderType.prototype.valueOf = function sceValueOf() {
            return this.$$unwrapTrustedValue();
          };
          holderType.prototype.toString = function sceToString() {
            return this.$$unwrapTrustedValue().toString();
          };
          return holderType;
        }
        var trustedValueHolderBase = generateHolderType(), byType = {};
        byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
        function trustAs(type, trustedValue) {
          var Constructor = byType.hasOwnProperty(type) ? byType[type] : null;
          if (!Constructor) {
            throw $sceMinErr('icontext', 'Attempted to trust a value in invalid context. Context: {0}; Value: {1}', type, trustedValue);
          }
          if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
            return trustedValue;
          }
          if (typeof trustedValue !== 'string') {
            throw $sceMinErr('itype', 'Attempted to trust a non-string value in a content requiring a string: Context: {0}', type);
          }
          return new Constructor(trustedValue);
        }
        function valueOf(maybeTrusted) {
          if (maybeTrusted instanceof trustedValueHolderBase) {
            return maybeTrusted.$$unwrapTrustedValue();
          } else {
            return maybeTrusted;
          }
        }
        function getTrusted(type, maybeTrusted) {
          if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
            return maybeTrusted;
          }
          var constructor = byType.hasOwnProperty(type) ? byType[type] : null;
          if (constructor && maybeTrusted instanceof constructor) {
            return maybeTrusted.$$unwrapTrustedValue();
          }
          if (type === SCE_CONTEXTS.RESOURCE_URL) {
            if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
              return maybeTrusted;
            } else {
              throw $sceMinErr('insecurl', 'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());
            }
          } else if (type === SCE_CONTEXTS.HTML) {
            return htmlSanitizer(maybeTrusted);
          }
          throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
        }
        return {
          trustAs: trustAs,
          getTrusted: getTrusted,
          valueOf: valueOf
        };
      }
    ];
  }
  function $SceProvider() {
    var enabled = true;
    this.enabled = function (value) {
      if (arguments.length) {
        enabled = !!value;
      }
      return enabled;
    };
    this.$get = [
      '$parse',
      '$sniffer',
      '$sceDelegate',
      function ($parse, $sniffer, $sceDelegate) {
        if (enabled && $sniffer.msie && $sniffer.msieDocumentMode < 8) {
          throw $sceMinErr('iequirks', 'Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks ' + 'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' + 'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
        }
        var sce = copy(SCE_CONTEXTS);
        sce.isEnabled = function () {
          return enabled;
        };
        sce.trustAs = $sceDelegate.trustAs;
        sce.getTrusted = $sceDelegate.getTrusted;
        sce.valueOf = $sceDelegate.valueOf;
        if (!enabled) {
          sce.trustAs = sce.getTrusted = function (type, value) {
            return value;
          };
          sce.valueOf = identity;
        }
        sce.parseAs = function sceParseAs(type, expr) {
          var parsed = $parse(expr);
          if (parsed.literal && parsed.constant) {
            return parsed;
          } else {
            return function sceParseAsTrusted(self, locals) {
              return sce.getTrusted(type, parsed(self, locals));
            };
          }
        };
        var parse = sce.parseAs, getTrusted = sce.getTrusted, trustAs = sce.trustAs;
        forEach(SCE_CONTEXTS, function (enumValue, name) {
          var lName = lowercase(name);
          sce[camelCase('parse_as_' + lName)] = function (expr) {
            return parse(enumValue, expr);
          };
          sce[camelCase('get_trusted_' + lName)] = function (value) {
            return getTrusted(enumValue, value);
          };
          sce[camelCase('trust_as_' + lName)] = function (value) {
            return trustAs(enumValue, value);
          };
        });
        return sce;
      }
    ];
  }
  function $SnifferProvider() {
    this.$get = [
      '$window',
      '$document',
      function ($window, $document) {
        var eventSupport = {}, android = int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]), boxee = /Boxee/i.test(($window.navigator || {}).userAgent), document = $document[0] || {}, documentMode = document.documentMode, vendorPrefix, vendorRegex = /^(Moz|webkit|O|ms)(?=[A-Z])/, bodyStyle = document.body && document.body.style, transitions = false, animations = false, match;
        if (bodyStyle) {
          for (var prop in bodyStyle) {
            if (match = vendorRegex.exec(prop)) {
              vendorPrefix = match[0];
              vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
              break;
            }
          }
          if (!vendorPrefix) {
            vendorPrefix = 'WebkitOpacity' in bodyStyle && 'webkit';
          }
          transitions = !!('transition' in bodyStyle || vendorPrefix + 'Transition' in bodyStyle);
          animations = !!('animation' in bodyStyle || vendorPrefix + 'Animation' in bodyStyle);
          if (android && (!transitions || !animations)) {
            transitions = isString(document.body.style.webkitTransition);
            animations = isString(document.body.style.webkitAnimation);
          }
        }
        return {
          history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
          hashchange: 'onhashchange' in $window && (!documentMode || documentMode > 7),
          hasEvent: function (event) {
            if (event == 'input' && msie == 9)
              return false;
            if (isUndefined(eventSupport[event])) {
              var divElm = document.createElement('div');
              eventSupport[event] = 'on' + event in divElm;
            }
            return eventSupport[event];
          },
          csp: csp(),
          vendorPrefix: vendorPrefix,
          transitions: transitions,
          animations: animations,
          android: android,
          msie: msie,
          msieDocumentMode: documentMode
        };
      }
    ];
  }
  function $TimeoutProvider() {
    this.$get = [
      '$rootScope',
      '$browser',
      '$q',
      '$exceptionHandler',
      function ($rootScope, $browser, $q, $exceptionHandler) {
        var deferreds = {};
        function timeout(fn, delay, invokeApply) {
          var deferred = $q.defer(), promise = deferred.promise, skipApply = isDefined(invokeApply) && !invokeApply, timeoutId;
          timeoutId = $browser.defer(function () {
            try {
              deferred.resolve(fn());
            } catch (e) {
              deferred.reject(e);
              $exceptionHandler(e);
            } finally {
              delete deferreds[promise.$$timeoutId];
            }
            if (!skipApply)
              $rootScope.$apply();
          }, delay);
          promise.$$timeoutId = timeoutId;
          deferreds[timeoutId] = deferred;
          return promise;
        }
        timeout.cancel = function (promise) {
          if (promise && promise.$$timeoutId in deferreds) {
            deferreds[promise.$$timeoutId].reject('canceled');
            delete deferreds[promise.$$timeoutId];
            return $browser.defer.cancel(promise.$$timeoutId);
          }
          return false;
        };
        return timeout;
      }
    ];
  }
  var urlParsingNode = document.createElement('a');
  var originUrl = urlResolve(window.location.href, true);
  function urlResolve(url, base) {
    var href = url;
    if (msie) {
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute('href', href);
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }
  function urlIsSameOrigin(requestUrl) {
    var parsed = isString(requestUrl) ? urlResolve(requestUrl) : requestUrl;
    return parsed.protocol === originUrl.protocol && parsed.host === originUrl.host;
  }
  function $WindowProvider() {
    this.$get = valueFn(window);
  }
  $FilterProvider.$inject = ['$provide'];
  function $FilterProvider($provide) {
    var suffix = 'Filter';
    function register(name, factory) {
      if (isObject(name)) {
        var filters = {};
        forEach(name, function (filter, key) {
          filters[key] = register(key, filter);
        });
        return filters;
      } else {
        return $provide.factory(name + suffix, factory);
      }
    }
    this.register = register;
    this.$get = [
      '$injector',
      function ($injector) {
        return function (name) {
          return $injector.get(name + suffix);
        };
      }
    ];
    register('currency', currencyFilter);
    register('date', dateFilter);
    register('filter', filterFilter);
    register('json', jsonFilter);
    register('limitTo', limitToFilter);
    register('lowercase', lowercaseFilter);
    register('number', numberFilter);
    register('orderBy', orderByFilter);
    register('uppercase', uppercaseFilter);
  }
  function filterFilter() {
    return function (array, expression, comparator) {
      if (!isArray(array))
        return array;
      var comparatorType = typeof comparator, predicates = [];
      predicates.check = function (value) {
        for (var j = 0; j < predicates.length; j++) {
          if (!predicates[j](value)) {
            return false;
          }
        }
        return true;
      };
      if (comparatorType !== 'function') {
        if (comparatorType === 'boolean' && comparator) {
          comparator = function (obj, text) {
            return angular.equals(obj, text);
          };
        } else {
          comparator = function (obj, text) {
            if (obj && text && typeof obj === 'object' && typeof text === 'object') {
              for (var objKey in obj) {
                if (objKey.charAt(0) !== '$' && hasOwnProperty.call(obj, objKey) && comparator(obj[objKey], text[objKey])) {
                  return true;
                }
              }
              return false;
            }
            text = ('' + text).toLowerCase();
            return ('' + obj).toLowerCase().indexOf(text) > -1;
          };
        }
      }
      var search = function (obj, text) {
        if (typeof text == 'string' && text.charAt(0) === '!') {
          return !search(obj, text.substr(1));
        }
        switch (typeof obj) {
        case 'boolean':
        case 'number':
        case 'string':
          return comparator(obj, text);
        case 'object':
          switch (typeof text) {
          case 'object':
            return comparator(obj, text);
          default:
            for (var objKey in obj) {
              if (objKey.charAt(0) !== '$' && search(obj[objKey], text)) {
                return true;
              }
            }
            break;
          }
          return false;
        case 'array':
          for (var i = 0; i < obj.length; i++) {
            if (search(obj[i], text)) {
              return true;
            }
          }
          return false;
        default:
          return false;
        }
      };
      switch (typeof expression) {
      case 'boolean':
      case 'number':
      case 'string':
        expression = { $: expression };
      case 'object':
        for (var key in expression) {
          (function (path) {
            if (typeof expression[path] == 'undefined')
              return;
            predicates.push(function (value) {
              return search(path == '$' ? value : value && value[path], expression[path]);
            });
          }(key));
        }
        break;
      case 'function':
        predicates.push(expression);
        break;
      default:
        return array;
      }
      var filtered = [];
      for (var j = 0; j < array.length; j++) {
        var value = array[j];
        if (predicates.check(value)) {
          filtered.push(value);
        }
      }
      return filtered;
    };
  }
  currencyFilter.$inject = ['$locale'];
  function currencyFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function (amount, currencySymbol) {
      if (isUndefined(currencySymbol))
        currencySymbol = formats.CURRENCY_SYM;
      return formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, 2).replace(/\u00A4/g, currencySymbol);
    };
  }
  numberFilter.$inject = ['$locale'];
  function numberFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function (number, fractionSize) {
      return formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
    };
  }
  var DECIMAL_SEP = '.';
  function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
    if (number == null || !isFinite(number) || isObject(number))
      return '';
    var isNegative = number < 0;
    number = Math.abs(number);
    var numStr = number + '', formatedText = '', parts = [];
    var hasExponent = false;
    if (numStr.indexOf('e') !== -1) {
      var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
      if (match && match[2] == '-' && match[3] > fractionSize + 1) {
        numStr = '0';
      } else {
        formatedText = numStr;
        hasExponent = true;
      }
    }
    if (!hasExponent) {
      var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;
      if (isUndefined(fractionSize)) {
        fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
      }
      var pow = Math.pow(10, fractionSize);
      number = Math.round(number * pow) / pow;
      var fraction = ('' + number).split(DECIMAL_SEP);
      var whole = fraction[0];
      fraction = fraction[1] || '';
      var i, pos = 0, lgroup = pattern.lgSize, group = pattern.gSize;
      if (whole.length >= lgroup + group) {
        pos = whole.length - lgroup;
        for (i = 0; i < pos; i++) {
          if ((pos - i) % group === 0 && i !== 0) {
            formatedText += groupSep;
          }
          formatedText += whole.charAt(i);
        }
      }
      for (i = pos; i < whole.length; i++) {
        if ((whole.length - i) % lgroup === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }
      while (fraction.length < fractionSize) {
        fraction += '0';
      }
      if (fractionSize && fractionSize !== '0')
        formatedText += decimalSep + fraction.substr(0, fractionSize);
    } else {
      if (fractionSize > 0 && number > -1 && number < 1) {
        formatedText = number.toFixed(fractionSize);
      }
    }
    parts.push(isNegative ? pattern.negPre : pattern.posPre);
    parts.push(formatedText);
    parts.push(isNegative ? pattern.negSuf : pattern.posSuf);
    return parts.join('');
  }
  function padNumber(num, digits, trim) {
    var neg = '';
    if (num < 0) {
      neg = '-';
      num = -num;
    }
    num = '' + num;
    while (num.length < digits)
      num = '0' + num;
    if (trim)
      num = num.substr(num.length - digits);
    return neg + num;
  }
  function dateGetter(name, size, offset, trim) {
    offset = offset || 0;
    return function (date) {
      var value = date['get' + name]();
      if (offset > 0 || value > -offset)
        value += offset;
      if (value === 0 && offset == -12)
        value = 12;
      return padNumber(value, size, trim);
    };
  }
  function dateStrGetter(name, shortForm) {
    return function (date, formats) {
      var value = date['get' + name]();
      var get = uppercase(shortForm ? 'SHORT' + name : name);
      return formats[get][value];
    };
  }
  function timeZoneGetter(date) {
    var zone = -1 * date.getTimezoneOffset();
    var paddedZone = zone >= 0 ? '+' : '';
    paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);
    return paddedZone;
  }
  function ampmGetter(date, formats) {
    return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
  }
  var DATE_FORMATS = {
      yyyy: dateGetter('FullYear', 4),
      yy: dateGetter('FullYear', 2, 0, true),
      y: dateGetter('FullYear', 1),
      MMMM: dateStrGetter('Month'),
      MMM: dateStrGetter('Month', true),
      MM: dateGetter('Month', 2, 1),
      M: dateGetter('Month', 1, 1),
      dd: dateGetter('Date', 2),
      d: dateGetter('Date', 1),
      HH: dateGetter('Hours', 2),
      H: dateGetter('Hours', 1),
      hh: dateGetter('Hours', 2, -12),
      h: dateGetter('Hours', 1, -12),
      mm: dateGetter('Minutes', 2),
      m: dateGetter('Minutes', 1),
      ss: dateGetter('Seconds', 2),
      s: dateGetter('Seconds', 1),
      sss: dateGetter('Milliseconds', 3),
      EEEE: dateStrGetter('Day'),
      EEE: dateStrGetter('Day', true),
      a: ampmGetter,
      Z: timeZoneGetter
    };
  var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/, NUMBER_STRING = /^\-?\d+$/;
  dateFilter.$inject = ['$locale'];
  function dateFilter($locale) {
    var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    function jsonStringToDate(string) {
      var match;
      if (match = string.match(R_ISO8601_STR)) {
        var date = new Date(0), tzHour = 0, tzMin = 0, dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear, timeSetter = match[8] ? date.setUTCHours : date.setHours;
        if (match[9]) {
          tzHour = int(match[9] + match[10]);
          tzMin = int(match[9] + match[11]);
        }
        dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
        var h = int(match[4] || 0) - tzHour;
        var m = int(match[5] || 0) - tzMin;
        var s = int(match[6] || 0);
        var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
        timeSetter.call(date, h, m, s, ms);
        return date;
      }
      return string;
    }
    return function (date, format) {
      var text = '', parts = [], fn, match;
      format = format || 'mediumDate';
      format = $locale.DATETIME_FORMATS[format] || format;
      if (isString(date)) {
        if (NUMBER_STRING.test(date)) {
          date = int(date);
        } else {
          date = jsonStringToDate(date);
        }
      }
      if (isNumber(date)) {
        date = new Date(date);
      }
      if (!isDate(date)) {
        return date;
      }
      while (format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
          parts = concat(parts, match, 1);
          format = parts.pop();
        } else {
          parts.push(format);
          format = null;
        }
      }
      forEach(parts, function (value) {
        fn = DATE_FORMATS[value];
        text += fn ? fn(date, $locale.DATETIME_FORMATS) : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
      });
      return text;
    };
  }
  function jsonFilter() {
    return function (object) {
      return toJson(object, true);
    };
  }
  var lowercaseFilter = valueFn(lowercase);
  var uppercaseFilter = valueFn(uppercase);
  function limitToFilter() {
    return function (input, limit) {
      if (!isArray(input) && !isString(input))
        return input;
      limit = int(limit);
      if (isString(input)) {
        if (limit) {
          return limit >= 0 ? input.slice(0, limit) : input.slice(limit, input.length);
        } else {
          return '';
        }
      }
      var out = [], i, n;
      if (limit > input.length)
        limit = input.length;
      else if (limit < -input.length)
        limit = -input.length;
      if (limit > 0) {
        i = 0;
        n = limit;
      } else {
        i = input.length + limit;
        n = input.length;
      }
      for (; i < n; i++) {
        out.push(input[i]);
      }
      return out;
    };
  }
  orderByFilter.$inject = ['$parse'];
  function orderByFilter($parse) {
    return function (array, sortPredicate, reverseOrder) {
      if (!isArray(array))
        return array;
      if (!sortPredicate)
        return array;
      sortPredicate = isArray(sortPredicate) ? sortPredicate : [sortPredicate];
      sortPredicate = map(sortPredicate, function (predicate) {
        var descending = false, get = predicate || identity;
        if (isString(predicate)) {
          if (predicate.charAt(0) == '+' || predicate.charAt(0) == '-') {
            descending = predicate.charAt(0) == '-';
            predicate = predicate.substring(1);
          }
          get = $parse(predicate);
          if (get.constant) {
            var key = get();
            return reverseComparator(function (a, b) {
              return compare(a[key], b[key]);
            }, descending);
          }
        }
        return reverseComparator(function (a, b) {
          return compare(get(a), get(b));
        }, descending);
      });
      var arrayCopy = [];
      for (var i = 0; i < array.length; i++) {
        arrayCopy.push(array[i]);
      }
      return arrayCopy.sort(reverseComparator(comparator, reverseOrder));
      function comparator(o1, o2) {
        for (var i = 0; i < sortPredicate.length; i++) {
          var comp = sortPredicate[i](o1, o2);
          if (comp !== 0)
            return comp;
        }
        return 0;
      }
      function reverseComparator(comp, descending) {
        return toBoolean(descending) ? function (a, b) {
          return comp(b, a);
        } : comp;
      }
      function compare(v1, v2) {
        var t1 = typeof v1;
        var t2 = typeof v2;
        if (t1 == t2) {
          if (t1 == 'string') {
            v1 = v1.toLowerCase();
            v2 = v2.toLowerCase();
          }
          if (v1 === v2)
            return 0;
          return v1 < v2 ? -1 : 1;
        } else {
          return t1 < t2 ? -1 : 1;
        }
      }
    };
  }
  function ngDirective(directive) {
    if (isFunction(directive)) {
      directive = { link: directive };
    }
    directive.restrict = directive.restrict || 'AC';
    return valueFn(directive);
  }
  var htmlAnchorDirective = valueFn({
      restrict: 'E',
      compile: function (element, attr) {
        if (msie <= 8) {
          if (!attr.href && !attr.name) {
            attr.$set('href', '');
          }
          element.append(document.createComment('IE fix'));
        }
        if (!attr.href && !attr.xlinkHref && !attr.name) {
          return function (scope, element) {
            var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ? 'xlink:href' : 'href';
            element.on('click', function (event) {
              if (!element.attr(href)) {
                event.preventDefault();
              }
            });
          };
        }
      }
    });
  var ngAttributeAliasDirectives = {};
  forEach(BOOLEAN_ATTR, function (propName, attrName) {
    if (propName == 'multiple')
      return;
    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function () {
      return {
        priority: 100,
        link: function (scope, element, attr) {
          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
            attr.$set(attrName, !!value);
          });
        }
      };
    };
  });
  forEach([
    'src',
    'srcset',
    'href'
  ], function (attrName) {
    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function () {
      return {
        priority: 99,
        link: function (scope, element, attr) {
          var propName = attrName, name = attrName;
          if (attrName === 'href' && toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
            name = 'xlinkHref';
            attr.$attr[name] = 'xlink:href';
            propName = null;
          }
          attr.$observe(normalized, function (value) {
            if (!value)
              return;
            attr.$set(name, value);
            if (msie && propName)
              element.prop(propName, attr[name]);
          });
        }
      };
    };
  });
  var nullFormCtrl = {
      $addControl: noop,
      $removeControl: noop,
      $setValidity: noop,
      $setDirty: noop,
      $setPristine: noop
    };
  FormController.$inject = [
    '$element',
    '$attrs',
    '$scope',
    '$animate'
  ];
  function FormController(element, attrs, $scope, $animate) {
    var form = this, parentForm = element.parent().controller('form') || nullFormCtrl, invalidCount = 0, errors = form.$error = {}, controls = [];
    form.$name = attrs.name || attrs.ngForm;
    form.$dirty = false;
    form.$pristine = true;
    form.$valid = true;
    form.$invalid = false;
    parentForm.$addControl(form);
    element.addClass(PRISTINE_CLASS);
    toggleValidCss(true);
    function toggleValidCss(isValid, validationErrorKey) {
      validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
      $animate.removeClass(element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
      $animate.addClass(element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
    }
    form.$addControl = function (control) {
      assertNotHasOwnProperty(control.$name, 'input');
      controls.push(control);
      if (control.$name) {
        form[control.$name] = control;
      }
    };
    form.$removeControl = function (control) {
      if (control.$name && form[control.$name] === control) {
        delete form[control.$name];
      }
      forEach(errors, function (queue, validationToken) {
        form.$setValidity(validationToken, true, control);
      });
      arrayRemove(controls, control);
    };
    form.$setValidity = function (validationToken, isValid, control) {
      var queue = errors[validationToken];
      if (isValid) {
        if (queue) {
          arrayRemove(queue, control);
          if (!queue.length) {
            invalidCount--;
            if (!invalidCount) {
              toggleValidCss(isValid);
              form.$valid = true;
              form.$invalid = false;
            }
            errors[validationToken] = false;
            toggleValidCss(true, validationToken);
            parentForm.$setValidity(validationToken, true, form);
          }
        }
      } else {
        if (!invalidCount) {
          toggleValidCss(isValid);
        }
        if (queue) {
          if (includes(queue, control))
            return;
        } else {
          errors[validationToken] = queue = [];
          invalidCount++;
          toggleValidCss(false, validationToken);
          parentForm.$setValidity(validationToken, false, form);
        }
        queue.push(control);
        form.$valid = false;
        form.$invalid = true;
      }
    };
    form.$setDirty = function () {
      $animate.removeClass(element, PRISTINE_CLASS);
      $animate.addClass(element, DIRTY_CLASS);
      form.$dirty = true;
      form.$pristine = false;
      parentForm.$setDirty();
    };
    form.$setPristine = function () {
      $animate.removeClass(element, DIRTY_CLASS);
      $animate.addClass(element, PRISTINE_CLASS);
      form.$dirty = false;
      form.$pristine = true;
      forEach(controls, function (control) {
        control.$setPristine();
      });
    };
  }
  var formDirectiveFactory = function (isNgForm) {
    return [
      '$timeout',
      function ($timeout) {
        var formDirective = {
            name: 'form',
            restrict: isNgForm ? 'EAC' : 'E',
            controller: FormController,
            compile: function () {
              return {
                pre: function (scope, formElement, attr, controller) {
                  if (!attr.action) {
                    var preventDefaultListener = function (event) {
                      event.preventDefault ? event.preventDefault() : event.returnValue = false;
                    };
                    addEventListenerFn(formElement[0], 'submit', preventDefaultListener);
                    formElement.on('$destroy', function () {
                      $timeout(function () {
                        removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);
                      }, 0, false);
                    });
                  }
                  var parentFormCtrl = formElement.parent().controller('form'), alias = attr.name || attr.ngForm;
                  if (alias) {
                    setter(scope, alias, controller, alias);
                  }
                  if (parentFormCtrl) {
                    formElement.on('$destroy', function () {
                      parentFormCtrl.$removeControl(controller);
                      if (alias) {
                        setter(scope, alias, undefined, alias);
                      }
                      extend(controller, nullFormCtrl);
                    });
                  }
                }
              };
            }
          };
        return formDirective;
      }
    ];
  };
  var formDirective = formDirectiveFactory();
  var ngFormDirective = formDirectiveFactory(true);
  var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
  var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9-]+(\.[a-z0-9-]+)*$/i;
  var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
  var inputType = {
      'text': textInputType,
      'number': numberInputType,
      'url': urlInputType,
      'email': emailInputType,
      'radio': radioInputType,
      'checkbox': checkboxInputType,
      'hidden': noop,
      'button': noop,
      'submit': noop,
      'reset': noop,
      'file': noop
    };
  function validate(ctrl, validatorName, validity, value) {
    ctrl.$setValidity(validatorName, validity);
    return validity ? value : undefined;
  }
  function addNativeHtml5Validators(ctrl, validatorName, element) {
    var validity = element.prop('validity');
    if (isObject(validity)) {
      var validator = function (value) {
        if (!ctrl.$error[validatorName] && (validity.badInput || validity.customError || validity.typeMismatch) && !validity.valueMissing) {
          ctrl.$setValidity(validatorName, false);
          return;
        }
        return value;
      };
      ctrl.$parsers.push(validator);
    }
  }
  function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    var validity = element.prop('validity');
    if (!$sniffer.android) {
      var composing = false;
      element.on('compositionstart', function (data) {
        composing = true;
      });
      element.on('compositionend', function () {
        composing = false;
        listener();
      });
    }
    var listener = function () {
      if (composing)
        return;
      var value = element.val();
      if (toBoolean(attr.ngTrim || 'T')) {
        value = trim(value);
      }
      if (ctrl.$viewValue !== value || validity && value === '' && !validity.valueMissing) {
        if (scope.$$phase) {
          ctrl.$setViewValue(value);
        } else {
          scope.$apply(function () {
            ctrl.$setViewValue(value);
          });
        }
      }
    };
    if ($sniffer.hasEvent('input')) {
      element.on('input', listener);
    } else {
      var timeout;
      var deferListener = function () {
        if (!timeout) {
          timeout = $browser.defer(function () {
            listener();
            timeout = null;
          });
        }
      };
      element.on('keydown', function (event) {
        var key = event.keyCode;
        if (key === 91 || 15 < key && key < 19 || 37 <= key && key <= 40)
          return;
        deferListener();
      });
      if ($sniffer.hasEvent('paste')) {
        element.on('paste cut', deferListener);
      }
    }
    element.on('change', listener);
    ctrl.$render = function () {
      element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
    };
    var pattern = attr.ngPattern, patternValidator, match;
    if (pattern) {
      var validateRegex = function (regexp, value) {
        return validate(ctrl, 'pattern', ctrl.$isEmpty(value) || regexp.test(value), value);
      };
      match = pattern.match(/^\/(.*)\/([gim]*)$/);
      if (match) {
        pattern = new RegExp(match[1], match[2]);
        patternValidator = function (value) {
          return validateRegex(pattern, value);
        };
      } else {
        patternValidator = function (value) {
          var patternObj = scope.$eval(pattern);
          if (!patternObj || !patternObj.test) {
            throw minErr('ngPattern')('noregexp', 'Expected {0} to be a RegExp but was {1}. Element: {2}', pattern, patternObj, startingTag(element));
          }
          return validateRegex(patternObj, value);
        };
      }
      ctrl.$formatters.push(patternValidator);
      ctrl.$parsers.push(patternValidator);
    }
    if (attr.ngMinlength) {
      var minlength = int(attr.ngMinlength);
      var minLengthValidator = function (value) {
        return validate(ctrl, 'minlength', ctrl.$isEmpty(value) || value.length >= minlength, value);
      };
      ctrl.$parsers.push(minLengthValidator);
      ctrl.$formatters.push(minLengthValidator);
    }
    if (attr.ngMaxlength) {
      var maxlength = int(attr.ngMaxlength);
      var maxLengthValidator = function (value) {
        return validate(ctrl, 'maxlength', ctrl.$isEmpty(value) || value.length <= maxlength, value);
      };
      ctrl.$parsers.push(maxLengthValidator);
      ctrl.$formatters.push(maxLengthValidator);
    }
  }
  function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);
    ctrl.$parsers.push(function (value) {
      var empty = ctrl.$isEmpty(value);
      if (empty || NUMBER_REGEXP.test(value)) {
        ctrl.$setValidity('number', true);
        return value === '' ? null : empty ? value : parseFloat(value);
      } else {
        ctrl.$setValidity('number', false);
        return undefined;
      }
    });
    addNativeHtml5Validators(ctrl, 'number', element);
    ctrl.$formatters.push(function (value) {
      return ctrl.$isEmpty(value) ? '' : '' + value;
    });
    if (attr.min) {
      var minValidator = function (value) {
        var min = parseFloat(attr.min);
        return validate(ctrl, 'min', ctrl.$isEmpty(value) || value >= min, value);
      };
      ctrl.$parsers.push(minValidator);
      ctrl.$formatters.push(minValidator);
    }
    if (attr.max) {
      var maxValidator = function (value) {
        var max = parseFloat(attr.max);
        return validate(ctrl, 'max', ctrl.$isEmpty(value) || value <= max, value);
      };
      ctrl.$parsers.push(maxValidator);
      ctrl.$formatters.push(maxValidator);
    }
    ctrl.$formatters.push(function (value) {
      return validate(ctrl, 'number', ctrl.$isEmpty(value) || isNumber(value), value);
    });
  }
  function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var urlValidator = function (value) {
      return validate(ctrl, 'url', ctrl.$isEmpty(value) || URL_REGEXP.test(value), value);
    };
    ctrl.$formatters.push(urlValidator);
    ctrl.$parsers.push(urlValidator);
  }
  function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var emailValidator = function (value) {
      return validate(ctrl, 'email', ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value), value);
    };
    ctrl.$formatters.push(emailValidator);
    ctrl.$parsers.push(emailValidator);
  }
  function radioInputType(scope, element, attr, ctrl) {
    if (isUndefined(attr.name)) {
      element.attr('name', nextUid());
    }
    element.on('click', function () {
      if (element[0].checked) {
        scope.$apply(function () {
          ctrl.$setViewValue(attr.value);
        });
      }
    });
    ctrl.$render = function () {
      var value = attr.value;
      element[0].checked = value == ctrl.$viewValue;
    };
    attr.$observe('value', ctrl.$render);
  }
  function checkboxInputType(scope, element, attr, ctrl) {
    var trueValue = attr.ngTrueValue, falseValue = attr.ngFalseValue;
    if (!isString(trueValue))
      trueValue = true;
    if (!isString(falseValue))
      falseValue = false;
    element.on('click', function () {
      scope.$apply(function () {
        ctrl.$setViewValue(element[0].checked);
      });
    });
    ctrl.$render = function () {
      element[0].checked = ctrl.$viewValue;
    };
    ctrl.$isEmpty = function (value) {
      return value !== trueValue;
    };
    ctrl.$formatters.push(function (value) {
      return value === trueValue;
    });
    ctrl.$parsers.push(function (value) {
      return value ? trueValue : falseValue;
    });
  }
  var inputDirective = [
      '$browser',
      '$sniffer',
      function ($browser, $sniffer) {
        return {
          restrict: 'E',
          require: '?ngModel',
          link: function (scope, element, attr, ctrl) {
            if (ctrl) {
              (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer, $browser);
            }
          }
        };
      }
    ];
  var VALID_CLASS = 'ng-valid', INVALID_CLASS = 'ng-invalid', PRISTINE_CLASS = 'ng-pristine', DIRTY_CLASS = 'ng-dirty';
  var NgModelController = [
      '$scope',
      '$exceptionHandler',
      '$attrs',
      '$element',
      '$parse',
      '$animate',
      function ($scope, $exceptionHandler, $attr, $element, $parse, $animate) {
        this.$viewValue = Number.NaN;
        this.$modelValue = Number.NaN;
        this.$parsers = [];
        this.$formatters = [];
        this.$viewChangeListeners = [];
        this.$pristine = true;
        this.$dirty = false;
        this.$valid = true;
        this.$invalid = false;
        this.$name = $attr.name;
        var ngModelGet = $parse($attr.ngModel), ngModelSet = ngModelGet.assign;
        if (!ngModelSet) {
          throw minErr('ngModel')('nonassign', 'Expression \'{0}\' is non-assignable. Element: {1}', $attr.ngModel, startingTag($element));
        }
        this.$render = noop;
        this.$isEmpty = function (value) {
          return isUndefined(value) || value === '' || value === null || value !== value;
        };
        var parentForm = $element.inheritedData('$formController') || nullFormCtrl, invalidCount = 0, $error = this.$error = {};
        $element.addClass(PRISTINE_CLASS);
        toggleValidCss(true);
        function toggleValidCss(isValid, validationErrorKey) {
          validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
          $animate.removeClass($element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
          $animate.addClass($element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
        }
        this.$setValidity = function (validationErrorKey, isValid) {
          if ($error[validationErrorKey] === !isValid)
            return;
          if (isValid) {
            if ($error[validationErrorKey])
              invalidCount--;
            if (!invalidCount) {
              toggleValidCss(true);
              this.$valid = true;
              this.$invalid = false;
            }
          } else {
            toggleValidCss(false);
            this.$invalid = true;
            this.$valid = false;
            invalidCount++;
          }
          $error[validationErrorKey] = !isValid;
          toggleValidCss(isValid, validationErrorKey);
          parentForm.$setValidity(validationErrorKey, isValid, this);
        };
        this.$setPristine = function () {
          this.$dirty = false;
          this.$pristine = true;
          $animate.removeClass($element, DIRTY_CLASS);
          $animate.addClass($element, PRISTINE_CLASS);
        };
        this.$setViewValue = function (value) {
          this.$viewValue = value;
          if (this.$pristine) {
            this.$dirty = true;
            this.$pristine = false;
            $animate.removeClass($element, PRISTINE_CLASS);
            $animate.addClass($element, DIRTY_CLASS);
            parentForm.$setDirty();
          }
          forEach(this.$parsers, function (fn) {
            value = fn(value);
          });
          if (this.$modelValue !== value) {
            this.$modelValue = value;
            ngModelSet($scope, value);
            forEach(this.$viewChangeListeners, function (listener) {
              try {
                listener();
              } catch (e) {
                $exceptionHandler(e);
              }
            });
          }
        };
        var ctrl = this;
        $scope.$watch(function ngModelWatch() {
          var value = ngModelGet($scope);
          if (ctrl.$modelValue !== value) {
            var formatters = ctrl.$formatters, idx = formatters.length;
            ctrl.$modelValue = value;
            while (idx--) {
              value = formatters[idx](value);
            }
            if (ctrl.$viewValue !== value) {
              ctrl.$viewValue = value;
              ctrl.$render();
            }
          }
          return value;
        });
      }
    ];
  var ngModelDirective = function () {
    return {
      require: [
        'ngModel',
        '^?form'
      ],
      controller: NgModelController,
      link: function (scope, element, attr, ctrls) {
        var modelCtrl = ctrls[0], formCtrl = ctrls[1] || nullFormCtrl;
        formCtrl.$addControl(modelCtrl);
        scope.$on('$destroy', function () {
          formCtrl.$removeControl(modelCtrl);
        });
      }
    };
  };
  var ngChangeDirective = valueFn({
      require: 'ngModel',
      link: function (scope, element, attr, ctrl) {
        ctrl.$viewChangeListeners.push(function () {
          scope.$eval(attr.ngChange);
        });
      }
    });
  var requiredDirective = function () {
    return {
      require: '?ngModel',
      link: function (scope, elm, attr, ctrl) {
        if (!ctrl)
          return;
        attr.required = true;
        var validator = function (value) {
          if (attr.required && ctrl.$isEmpty(value)) {
            ctrl.$setValidity('required', false);
            return;
          } else {
            ctrl.$setValidity('required', true);
            return value;
          }
        };
        ctrl.$formatters.push(validator);
        ctrl.$parsers.unshift(validator);
        attr.$observe('required', function () {
          validator(ctrl.$viewValue);
        });
      }
    };
  };
  var ngListDirective = function () {
    return {
      require: 'ngModel',
      link: function (scope, element, attr, ctrl) {
        var match = /\/(.*)\//.exec(attr.ngList), separator = match && new RegExp(match[1]) || attr.ngList || ',';
        var parse = function (viewValue) {
          if (isUndefined(viewValue))
            return;
          var list = [];
          if (viewValue) {
            forEach(viewValue.split(separator), function (value) {
              if (value)
                list.push(trim(value));
            });
          }
          return list;
        };
        ctrl.$parsers.push(parse);
        ctrl.$formatters.push(function (value) {
          if (isArray(value)) {
            return value.join(', ');
          }
          return undefined;
        });
        ctrl.$isEmpty = function (value) {
          return !value || !value.length;
        };
      }
    };
  };
  var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
  var ngValueDirective = function () {
    return {
      priority: 100,
      compile: function (tpl, tplAttr) {
        if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
          return function ngValueConstantLink(scope, elm, attr) {
            attr.$set('value', scope.$eval(attr.ngValue));
          };
        } else {
          return function ngValueLink(scope, elm, attr) {
            scope.$watch(attr.ngValue, function valueWatchAction(value) {
              attr.$set('value', value);
            });
          };
        }
      }
    };
  };
  var ngBindDirective = ngDirective(function (scope, element, attr) {
      element.addClass('ng-binding').data('$binding', attr.ngBind);
      scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
        element.text(value == undefined ? '' : value);
      });
    });
  var ngBindTemplateDirective = [
      '$interpolate',
      function ($interpolate) {
        return function (scope, element, attr) {
          var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
          element.addClass('ng-binding').data('$binding', interpolateFn);
          attr.$observe('ngBindTemplate', function (value) {
            element.text(value);
          });
        };
      }
    ];
  var ngBindHtmlDirective = [
      '$sce',
      '$parse',
      function ($sce, $parse) {
        return function (scope, element, attr) {
          element.addClass('ng-binding').data('$binding', attr.ngBindHtml);
          var parsed = $parse(attr.ngBindHtml);
          function getStringValue() {
            return (parsed(scope) || '').toString();
          }
          scope.$watch(getStringValue, function ngBindHtmlWatchAction(value) {
            element.html($sce.getTrustedHtml(parsed(scope)) || '');
          });
        };
      }
    ];
  function classDirective(name, selector) {
    name = 'ngClass' + name;
    return [
      '$animate',
      function ($animate) {
        return {
          restrict: 'AC',
          link: function (scope, element, attr) {
            var oldVal;
            scope.$watch(attr[name], ngClassWatchAction, true);
            attr.$observe('class', function (value) {
              ngClassWatchAction(scope.$eval(attr[name]));
            });
            if (name !== 'ngClass') {
              scope.$watch('$index', function ($index, old$index) {
                var mod = $index & 1;
                if (mod !== old$index & 1) {
                  var classes = arrayClasses(scope.$eval(attr[name]));
                  mod === selector ? addClasses(classes) : removeClasses(classes);
                }
              });
            }
            function addClasses(classes) {
              var newClasses = digestClassCounts(classes, 1);
              attr.$addClass(newClasses);
            }
            function removeClasses(classes) {
              var newClasses = digestClassCounts(classes, -1);
              attr.$removeClass(newClasses);
            }
            function digestClassCounts(classes, count) {
              var classCounts = element.data('$classCounts') || {};
              var classesToUpdate = [];
              forEach(classes, function (className) {
                if (count > 0 || classCounts[className]) {
                  classCounts[className] = (classCounts[className] || 0) + count;
                  if (classCounts[className] === +(count > 0)) {
                    classesToUpdate.push(className);
                  }
                }
              });
              element.data('$classCounts', classCounts);
              return classesToUpdate.join(' ');
            }
            function updateClasses(oldClasses, newClasses) {
              var toAdd = arrayDifference(newClasses, oldClasses);
              var toRemove = arrayDifference(oldClasses, newClasses);
              toRemove = digestClassCounts(toRemove, -1);
              toAdd = digestClassCounts(toAdd, 1);
              if (toAdd.length === 0) {
                $animate.removeClass(element, toRemove);
              } else if (toRemove.length === 0) {
                $animate.addClass(element, toAdd);
              } else {
                $animate.setClass(element, toAdd, toRemove);
              }
            }
            function ngClassWatchAction(newVal) {
              if (selector === true || scope.$index % 2 === selector) {
                var newClasses = arrayClasses(newVal || []);
                if (!oldVal) {
                  addClasses(newClasses);
                } else if (!equals(newVal, oldVal)) {
                  var oldClasses = arrayClasses(oldVal);
                  updateClasses(oldClasses, newClasses);
                }
              }
              oldVal = copy(newVal);
            }
          }
        };
        function arrayDifference(tokens1, tokens2) {
          var values = [];
          outer:
            for (var i = 0; i < tokens1.length; i++) {
              var token = tokens1[i];
              for (var j = 0; j < tokens2.length; j++) {
                if (token == tokens2[j])
                  continue outer;
              }
              values.push(token);
            }
          return values;
        }
        function arrayClasses(classVal) {
          if (isArray(classVal)) {
            return classVal;
          } else if (isString(classVal)) {
            return classVal.split(' ');
          } else if (isObject(classVal)) {
            var classes = [], i = 0;
            forEach(classVal, function (v, k) {
              if (v) {
                classes.push(k);
              }
            });
            return classes;
          }
          return classVal;
        }
      }
    ];
  }
  var ngClassDirective = classDirective('', true);
  var ngClassOddDirective = classDirective('Odd', 0);
  var ngClassEvenDirective = classDirective('Even', 1);
  var ngCloakDirective = ngDirective({
      compile: function (element, attr) {
        attr.$set('ngCloak', undefined);
        element.removeClass('ng-cloak');
      }
    });
  var ngControllerDirective = [function () {
        return {
          scope: true,
          controller: '@',
          priority: 500
        };
      }];
  var ngEventDirectives = {};
  forEach('click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '), function (name) {
    var directiveName = directiveNormalize('ng-' + name);
    ngEventDirectives[directiveName] = [
      '$parse',
      function ($parse) {
        return {
          compile: function ($element, attr) {
            var fn = $parse(attr[directiveName]);
            return function (scope, element, attr) {
              element.on(lowercase(name), function (event) {
                scope.$apply(function () {
                  fn(scope, { $event: event });
                });
              });
            };
          }
        };
      }
    ];
  });
  var ngIfDirective = [
      '$animate',
      function ($animate) {
        return {
          transclude: 'element',
          priority: 600,
          terminal: true,
          restrict: 'A',
          $$tlb: true,
          link: function ($scope, $element, $attr, ctrl, $transclude) {
            var block, childScope, previousElements;
            $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
              if (toBoolean(value)) {
                if (!childScope) {
                  childScope = $scope.$new();
                  $transclude(childScope, function (clone) {
                    clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                    block = { clone: clone };
                    $animate.enter(clone, $element.parent(), $element);
                  });
                }
              } else {
                if (previousElements) {
                  previousElements.remove();
                  previousElements = null;
                }
                if (childScope) {
                  childScope.$destroy();
                  childScope = null;
                }
                if (block) {
                  previousElements = getBlockElements(block.clone);
                  $animate.leave(previousElements, function () {
                    previousElements = null;
                  });
                  block = null;
                }
              }
            });
          }
        };
      }
    ];
  var ngIncludeDirective = [
      '$http',
      '$templateCache',
      '$anchorScroll',
      '$animate',
      '$sce',
      function ($http, $templateCache, $anchorScroll, $animate, $sce) {
        return {
          restrict: 'ECA',
          priority: 400,
          terminal: true,
          transclude: 'element',
          controller: angular.noop,
          compile: function (element, attr) {
            var srcExp = attr.ngInclude || attr.src, onloadExp = attr.onload || '', autoScrollExp = attr.autoscroll;
            return function (scope, $element, $attr, ctrl, $transclude) {
              var changeCounter = 0, currentScope, previousElement, currentElement;
              var cleanupLastIncludeContent = function () {
                if (previousElement) {
                  previousElement.remove();
                  previousElement = null;
                }
                if (currentScope) {
                  currentScope.$destroy();
                  currentScope = null;
                }
                if (currentElement) {
                  $animate.leave(currentElement, function () {
                    previousElement = null;
                  });
                  previousElement = currentElement;
                  currentElement = null;
                }
              };
              scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
                var afterAnimation = function () {
                  if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                    $anchorScroll();
                  }
                };
                var thisChangeId = ++changeCounter;
                if (src) {
                  $http.get(src, { cache: $templateCache }).success(function (response) {
                    if (thisChangeId !== changeCounter)
                      return;
                    var newScope = scope.$new();
                    ctrl.template = response;
                    var clone = $transclude(newScope, function (clone) {
                        cleanupLastIncludeContent();
                        $animate.enter(clone, null, $element, afterAnimation);
                      });
                    currentScope = newScope;
                    currentElement = clone;
                    currentScope.$emit('$includeContentLoaded');
                    scope.$eval(onloadExp);
                  }).error(function () {
                    if (thisChangeId === changeCounter)
                      cleanupLastIncludeContent();
                  });
                  scope.$emit('$includeContentRequested');
                } else {
                  cleanupLastIncludeContent();
                  ctrl.template = null;
                }
              });
            };
          }
        };
      }
    ];
  var ngIncludeFillContentDirective = [
      '$compile',
      function ($compile) {
        return {
          restrict: 'ECA',
          priority: -400,
          require: 'ngInclude',
          link: function (scope, $element, $attr, ctrl) {
            $element.html(ctrl.template);
            $compile($element.contents())(scope);
          }
        };
      }
    ];
  var ngInitDirective = ngDirective({
      priority: 450,
      compile: function () {
        return {
          pre: function (scope, element, attrs) {
            scope.$eval(attrs.ngInit);
          }
        };
      }
    });
  var ngNonBindableDirective = ngDirective({
      terminal: true,
      priority: 1000
    });
  var ngPluralizeDirective = [
      '$locale',
      '$interpolate',
      function ($locale, $interpolate) {
        var BRACE = /{}/g;
        return {
          restrict: 'EA',
          link: function (scope, element, attr) {
            var numberExp = attr.count, whenExp = attr.$attr.when && element.attr(attr.$attr.when), offset = attr.offset || 0, whens = scope.$eval(whenExp) || {}, whensExpFns = {}, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), isWhen = /^when(Minus)?(.+)$/;
            forEach(attr, function (expression, attributeName) {
              if (isWhen.test(attributeName)) {
                whens[lowercase(attributeName.replace('when', '').replace('Minus', '-'))] = element.attr(attr.$attr[attributeName]);
              }
            });
            forEach(whens, function (expression, key) {
              whensExpFns[key] = $interpolate(expression.replace(BRACE, startSymbol + numberExp + '-' + offset + endSymbol));
            });
            scope.$watch(function ngPluralizeWatch() {
              var value = parseFloat(scope.$eval(numberExp));
              if (!isNaN(value)) {
                if (!(value in whens))
                  value = $locale.pluralCat(value - offset);
                return whensExpFns[value](scope, element, true);
              } else {
                return '';
              }
            }, function ngPluralizeWatchAction(newVal) {
              element.text(newVal);
            });
          }
        };
      }
    ];
  var ngRepeatDirective = [
      '$parse',
      '$animate',
      function ($parse, $animate) {
        var NG_REMOVED = '$$NG_REMOVED';
        var ngRepeatMinErr = minErr('ngRepeat');
        return {
          transclude: 'element',
          priority: 1000,
          terminal: true,
          $$tlb: true,
          link: function ($scope, $element, $attr, ctrl, $transclude) {
            var expression = $attr.ngRepeat;
            var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/), trackByExp, trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn, lhs, rhs, valueIdentifier, keyIdentifier, hashFnLocals = { $id: hashKey };
            if (!match) {
              throw ngRepeatMinErr('iexp', 'Expected expression in form of \'_item_ in _collection_[ track by _id_]\' but got \'{0}\'.', expression);
            }
            lhs = match[1];
            rhs = match[2];
            trackByExp = match[3];
            if (trackByExp) {
              trackByExpGetter = $parse(trackByExp);
              trackByIdExpFn = function (key, value, index) {
                if (keyIdentifier)
                  hashFnLocals[keyIdentifier] = key;
                hashFnLocals[valueIdentifier] = value;
                hashFnLocals.$index = index;
                return trackByExpGetter($scope, hashFnLocals);
              };
            } else {
              trackByIdArrayFn = function (key, value) {
                return hashKey(value);
              };
              trackByIdObjFn = function (key) {
                return key;
              };
            }
            match = lhs.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);
            if (!match) {
              throw ngRepeatMinErr('iidexp', '\'_item_\' in \'_item_ in _collection_\' should be an identifier or \'(_key_, _value_)\' expression, but got \'{0}\'.', lhs);
            }
            valueIdentifier = match[3] || match[1];
            keyIdentifier = match[2];
            var lastBlockMap = {};
            $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
              var index, length, previousNode = $element[0], nextNode, nextBlockMap = {}, arrayLength, childScope, key, value, trackById, trackByIdFn, collectionKeys, block, nextBlockOrder = [], elementsToRemove;
              if (isArrayLike(collection)) {
                collectionKeys = collection;
                trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
              } else {
                trackByIdFn = trackByIdExpFn || trackByIdObjFn;
                collectionKeys = [];
                for (key in collection) {
                  if (collection.hasOwnProperty(key) && key.charAt(0) != '$') {
                    collectionKeys.push(key);
                  }
                }
                collectionKeys.sort();
              }
              arrayLength = collectionKeys.length;
              length = nextBlockOrder.length = collectionKeys.length;
              for (index = 0; index < length; index++) {
                key = collection === collectionKeys ? index : collectionKeys[index];
                value = collection[key];
                trackById = trackByIdFn(key, value, index);
                assertNotHasOwnProperty(trackById, '`track by` id');
                if (lastBlockMap.hasOwnProperty(trackById)) {
                  block = lastBlockMap[trackById];
                  delete lastBlockMap[trackById];
                  nextBlockMap[trackById] = block;
                  nextBlockOrder[index] = block;
                } else if (nextBlockMap.hasOwnProperty(trackById)) {
                  forEach(nextBlockOrder, function (block) {
                    if (block && block.scope)
                      lastBlockMap[block.id] = block;
                  });
                  throw ngRepeatMinErr('dupes', 'Duplicates in a repeater are not allowed. Use \'track by\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}', expression, trackById);
                } else {
                  nextBlockOrder[index] = { id: trackById };
                  nextBlockMap[trackById] = false;
                }
              }
              for (key in lastBlockMap) {
                if (lastBlockMap.hasOwnProperty(key)) {
                  block = lastBlockMap[key];
                  elementsToRemove = getBlockElements(block.clone);
                  $animate.leave(elementsToRemove);
                  forEach(elementsToRemove, function (element) {
                    element[NG_REMOVED] = true;
                  });
                  block.scope.$destroy();
                }
              }
              for (index = 0, length = collectionKeys.length; index < length; index++) {
                key = collection === collectionKeys ? index : collectionKeys[index];
                value = collection[key];
                block = nextBlockOrder[index];
                if (nextBlockOrder[index - 1])
                  previousNode = getBlockEnd(nextBlockOrder[index - 1]);
                if (block.scope) {
                  childScope = block.scope;
                  nextNode = previousNode;
                  do {
                    nextNode = nextNode.nextSibling;
                  } while (nextNode && nextNode[NG_REMOVED]);
                  if (getBlockStart(block) != nextNode) {
                    $animate.move(getBlockElements(block.clone), null, jqLite(previousNode));
                  }
                  previousNode = getBlockEnd(block);
                } else {
                  childScope = $scope.$new();
                }
                childScope[valueIdentifier] = value;
                if (keyIdentifier)
                  childScope[keyIdentifier] = key;
                childScope.$index = index;
                childScope.$first = index === 0;
                childScope.$last = index === arrayLength - 1;
                childScope.$middle = !(childScope.$first || childScope.$last);
                childScope.$odd = !(childScope.$even = (index & 1) === 0);
                if (!block.scope) {
                  $transclude(childScope, function (clone) {
                    clone[clone.length++] = document.createComment(' end ngRepeat: ' + expression + ' ');
                    $animate.enter(clone, null, jqLite(previousNode));
                    previousNode = clone;
                    block.scope = childScope;
                    block.clone = clone;
                    nextBlockMap[block.id] = block;
                  });
                }
              }
              lastBlockMap = nextBlockMap;
            });
          }
        };
        function getBlockStart(block) {
          return block.clone[0];
        }
        function getBlockEnd(block) {
          return block.clone[block.clone.length - 1];
        }
      }
    ];
  var ngShowDirective = [
      '$animate',
      function ($animate) {
        return function (scope, element, attr) {
          scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
            $animate[toBoolean(value) ? 'removeClass' : 'addClass'](element, 'ng-hide');
          });
        };
      }
    ];
  var ngHideDirective = [
      '$animate',
      function ($animate) {
        return function (scope, element, attr) {
          scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
            $animate[toBoolean(value) ? 'addClass' : 'removeClass'](element, 'ng-hide');
          });
        };
      }
    ];
  var ngStyleDirective = ngDirective(function (scope, element, attr) {
      scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
        if (oldStyles && newStyles !== oldStyles) {
          forEach(oldStyles, function (val, style) {
            element.css(style, '');
          });
        }
        if (newStyles)
          element.css(newStyles);
      }, true);
    });
  var ngSwitchDirective = [
      '$animate',
      function ($animate) {
        return {
          restrict: 'EA',
          require: 'ngSwitch',
          controller: [
            '$scope',
            function ngSwitchController() {
              this.cases = {};
            }
          ],
          link: function (scope, element, attr, ngSwitchController) {
            var watchExpr = attr.ngSwitch || attr.on, selectedTranscludes, selectedElements, previousElements, selectedScopes = [];
            scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
              var i, ii = selectedScopes.length;
              if (ii > 0) {
                if (previousElements) {
                  for (i = 0; i < ii; i++) {
                    previousElements[i].remove();
                  }
                  previousElements = null;
                }
                previousElements = [];
                for (i = 0; i < ii; i++) {
                  var selected = selectedElements[i];
                  selectedScopes[i].$destroy();
                  previousElements[i] = selected;
                  $animate.leave(selected, function () {
                    previousElements.splice(i, 1);
                    if (previousElements.length === 0) {
                      previousElements = null;
                    }
                  });
                }
              }
              selectedElements = [];
              selectedScopes = [];
              if (selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?']) {
                scope.$eval(attr.change);
                forEach(selectedTranscludes, function (selectedTransclude) {
                  var selectedScope = scope.$new();
                  selectedScopes.push(selectedScope);
                  selectedTransclude.transclude(selectedScope, function (caseElement) {
                    var anchor = selectedTransclude.element;
                    selectedElements.push(caseElement);
                    $animate.enter(caseElement, anchor.parent(), anchor);
                  });
                });
              }
            });
          }
        };
      }
    ];
  var ngSwitchWhenDirective = ngDirective({
      transclude: 'element',
      priority: 800,
      require: '^ngSwitch',
      link: function (scope, element, attrs, ctrl, $transclude) {
        ctrl.cases['!' + attrs.ngSwitchWhen] = ctrl.cases['!' + attrs.ngSwitchWhen] || [];
        ctrl.cases['!' + attrs.ngSwitchWhen].push({
          transclude: $transclude,
          element: element
        });
      }
    });
  var ngSwitchDefaultDirective = ngDirective({
      transclude: 'element',
      priority: 800,
      require: '^ngSwitch',
      link: function (scope, element, attr, ctrl, $transclude) {
        ctrl.cases['?'] = ctrl.cases['?'] || [];
        ctrl.cases['?'].push({
          transclude: $transclude,
          element: element
        });
      }
    });
  var ngTranscludeDirective = ngDirective({
      link: function ($scope, $element, $attrs, controller, $transclude) {
        if (!$transclude) {
          throw minErr('ngTransclude')('orphan', 'Illegal use of ngTransclude directive in the template! ' + 'No parent directive that requires a transclusion found. ' + 'Element: {0}', startingTag($element));
        }
        $transclude(function (clone) {
          $element.empty();
          $element.append(clone);
        });
      }
    });
  var scriptDirective = [
      '$templateCache',
      function ($templateCache) {
        return {
          restrict: 'E',
          terminal: true,
          compile: function (element, attr) {
            if (attr.type == 'text/ng-template') {
              var templateUrl = attr.id, text = element[0].text;
              $templateCache.put(templateUrl, text);
            }
          }
        };
      }
    ];
  var ngOptionsMinErr = minErr('ngOptions');
  var ngOptionsDirective = valueFn({ terminal: true });
  var selectDirective = [
      '$compile',
      '$parse',
      function ($compile, $parse) {
        var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, nullModelCtrl = { $setViewValue: noop };
        return {
          restrict: 'E',
          require: [
            'select',
            '?ngModel'
          ],
          controller: [
            '$element',
            '$scope',
            '$attrs',
            function ($element, $scope, $attrs) {
              var self = this, optionsMap = {}, ngModelCtrl = nullModelCtrl, nullOption, unknownOption;
              self.databound = $attrs.ngModel;
              self.init = function (ngModelCtrl_, nullOption_, unknownOption_) {
                ngModelCtrl = ngModelCtrl_;
                nullOption = nullOption_;
                unknownOption = unknownOption_;
              };
              self.addOption = function (value) {
                assertNotHasOwnProperty(value, '"option value"');
                optionsMap[value] = true;
                if (ngModelCtrl.$viewValue == value) {
                  $element.val(value);
                  if (unknownOption.parent())
                    unknownOption.remove();
                }
              };
              self.removeOption = function (value) {
                if (this.hasOption(value)) {
                  delete optionsMap[value];
                  if (ngModelCtrl.$viewValue == value) {
                    this.renderUnknownOption(value);
                  }
                }
              };
              self.renderUnknownOption = function (val) {
                var unknownVal = '? ' + hashKey(val) + ' ?';
                unknownOption.val(unknownVal);
                $element.prepend(unknownOption);
                $element.val(unknownVal);
                unknownOption.prop('selected', true);
              };
              self.hasOption = function (value) {
                return optionsMap.hasOwnProperty(value);
              };
              $scope.$on('$destroy', function () {
                self.renderUnknownOption = noop;
              });
            }
          ],
          link: function (scope, element, attr, ctrls) {
            if (!ctrls[1])
              return;
            var selectCtrl = ctrls[0], ngModelCtrl = ctrls[1], multiple = attr.multiple, optionsExp = attr.ngOptions, nullOption = false, emptyOption, optionTemplate = jqLite(document.createElement('option')), optGroupTemplate = jqLite(document.createElement('optgroup')), unknownOption = optionTemplate.clone();
            for (var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
              if (children[i].value === '') {
                emptyOption = nullOption = children.eq(i);
                break;
              }
            }
            selectCtrl.init(ngModelCtrl, nullOption, unknownOption);
            if (multiple) {
              ngModelCtrl.$isEmpty = function (value) {
                return !value || value.length === 0;
              };
            }
            if (optionsExp)
              setupAsOptions(scope, element, ngModelCtrl);
            else if (multiple)
              setupAsMultiple(scope, element, ngModelCtrl);
            else
              setupAsSingle(scope, element, ngModelCtrl, selectCtrl);
            function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
              ngModelCtrl.$render = function () {
                var viewValue = ngModelCtrl.$viewValue;
                if (selectCtrl.hasOption(viewValue)) {
                  if (unknownOption.parent())
                    unknownOption.remove();
                  selectElement.val(viewValue);
                  if (viewValue === '')
                    emptyOption.prop('selected', true);
                } else {
                  if (isUndefined(viewValue) && emptyOption) {
                    selectElement.val('');
                  } else {
                    selectCtrl.renderUnknownOption(viewValue);
                  }
                }
              };
              selectElement.on('change', function () {
                scope.$apply(function () {
                  if (unknownOption.parent())
                    unknownOption.remove();
                  ngModelCtrl.$setViewValue(selectElement.val());
                });
              });
            }
            function setupAsMultiple(scope, selectElement, ctrl) {
              var lastView;
              ctrl.$render = function () {
                var items = new HashMap(ctrl.$viewValue);
                forEach(selectElement.find('option'), function (option) {
                  option.selected = isDefined(items.get(option.value));
                });
              };
              scope.$watch(function selectMultipleWatch() {
                if (!equals(lastView, ctrl.$viewValue)) {
                  lastView = copy(ctrl.$viewValue);
                  ctrl.$render();
                }
              });
              selectElement.on('change', function () {
                scope.$apply(function () {
                  var array = [];
                  forEach(selectElement.find('option'), function (option) {
                    if (option.selected) {
                      array.push(option.value);
                    }
                  });
                  ctrl.$setViewValue(array);
                });
              });
            }
            function setupAsOptions(scope, selectElement, ctrl) {
              var match;
              if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
                throw ngOptionsMinErr('iexp', 'Expected expression in form of ' + '\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\'' + ' but got \'{0}\'. Element: {1}', optionsExp, startingTag(selectElement));
              }
              var displayFn = $parse(match[2] || match[1]), valueName = match[4] || match[6], keyName = match[5], groupByFn = $parse(match[3] || ''), valueFn = $parse(match[2] ? match[1] : valueName), valuesFn = $parse(match[7]), track = match[8], trackFn = track ? $parse(match[8]) : null, optionGroupsCache = [[{
                      element: selectElement,
                      label: ''
                    }]];
              if (nullOption) {
                $compile(nullOption)(scope);
                nullOption.removeClass('ng-scope');
                nullOption.remove();
              }
              selectElement.empty();
              selectElement.on('change', function () {
                scope.$apply(function () {
                  var optionGroup, collection = valuesFn(scope) || [], locals = {}, key, value, optionElement, index, groupIndex, length, groupLength, trackIndex;
                  if (multiple) {
                    value = [];
                    for (groupIndex = 0, groupLength = optionGroupsCache.length; groupIndex < groupLength; groupIndex++) {
                      optionGroup = optionGroupsCache[groupIndex];
                      for (index = 1, length = optionGroup.length; index < length; index++) {
                        if ((optionElement = optionGroup[index].element)[0].selected) {
                          key = optionElement.val();
                          if (keyName)
                            locals[keyName] = key;
                          if (trackFn) {
                            for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                              locals[valueName] = collection[trackIndex];
                              if (trackFn(scope, locals) == key)
                                break;
                            }
                          } else {
                            locals[valueName] = collection[key];
                          }
                          value.push(valueFn(scope, locals));
                        }
                      }
                    }
                  } else {
                    key = selectElement.val();
                    if (key == '?') {
                      value = undefined;
                    } else if (key === '') {
                      value = null;
                    } else {
                      if (trackFn) {
                        for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                          locals[valueName] = collection[trackIndex];
                          if (trackFn(scope, locals) == key) {
                            value = valueFn(scope, locals);
                            break;
                          }
                        }
                      } else {
                        locals[valueName] = collection[key];
                        if (keyName)
                          locals[keyName] = key;
                        value = valueFn(scope, locals);
                      }
                    }
                    if (optionGroupsCache[0].length > 1) {
                      if (optionGroupsCache[0][1].id !== key) {
                        optionGroupsCache[0][1].selected = false;
                      }
                    }
                  }
                  ctrl.$setViewValue(value);
                });
              });
              ctrl.$render = render;
              scope.$watch(render);
              function render() {
                var optionGroups = { '': [] }, optionGroupNames = [''], optionGroupName, optionGroup, option, existingParent, existingOptions, existingOption, modelValue = ctrl.$modelValue, values = valuesFn(scope) || [], keys = keyName ? sortedKeys(values) : values, key, groupLength, length, groupIndex, index, locals = {}, selected, selectedSet = false, lastElement, element, label;
                if (multiple) {
                  if (trackFn && isArray(modelValue)) {
                    selectedSet = new HashMap([]);
                    for (var trackIndex = 0; trackIndex < modelValue.length; trackIndex++) {
                      locals[valueName] = modelValue[trackIndex];
                      selectedSet.put(trackFn(scope, locals), modelValue[trackIndex]);
                    }
                  } else {
                    selectedSet = new HashMap(modelValue);
                  }
                }
                for (index = 0; length = keys.length, index < length; index++) {
                  key = index;
                  if (keyName) {
                    key = keys[index];
                    if (key.charAt(0) === '$')
                      continue;
                    locals[keyName] = key;
                  }
                  locals[valueName] = values[key];
                  optionGroupName = groupByFn(scope, locals) || '';
                  if (!(optionGroup = optionGroups[optionGroupName])) {
                    optionGroup = optionGroups[optionGroupName] = [];
                    optionGroupNames.push(optionGroupName);
                  }
                  if (multiple) {
                    selected = isDefined(selectedSet.remove(trackFn ? trackFn(scope, locals) : valueFn(scope, locals)));
                  } else {
                    if (trackFn) {
                      var modelCast = {};
                      modelCast[valueName] = modelValue;
                      selected = trackFn(scope, modelCast) === trackFn(scope, locals);
                    } else {
                      selected = modelValue === valueFn(scope, locals);
                    }
                    selectedSet = selectedSet || selected;
                  }
                  label = displayFn(scope, locals);
                  label = isDefined(label) ? label : '';
                  optionGroup.push({
                    id: trackFn ? trackFn(scope, locals) : keyName ? keys[index] : index,
                    label: label,
                    selected: selected
                  });
                }
                if (!multiple) {
                  if (nullOption || modelValue === null) {
                    optionGroups[''].unshift({
                      id: '',
                      label: '',
                      selected: !selectedSet
                    });
                  } else if (!selectedSet) {
                    optionGroups[''].unshift({
                      id: '?',
                      label: '',
                      selected: true
                    });
                  }
                }
                for (groupIndex = 0, groupLength = optionGroupNames.length; groupIndex < groupLength; groupIndex++) {
                  optionGroupName = optionGroupNames[groupIndex];
                  optionGroup = optionGroups[optionGroupName];
                  if (optionGroupsCache.length <= groupIndex) {
                    existingParent = {
                      element: optGroupTemplate.clone().attr('label', optionGroupName),
                      label: optionGroup.label
                    };
                    existingOptions = [existingParent];
                    optionGroupsCache.push(existingOptions);
                    selectElement.append(existingParent.element);
                  } else {
                    existingOptions = optionGroupsCache[groupIndex];
                    existingParent = existingOptions[0];
                    if (existingParent.label != optionGroupName) {
                      existingParent.element.attr('label', existingParent.label = optionGroupName);
                    }
                  }
                  lastElement = null;
                  for (index = 0, length = optionGroup.length; index < length; index++) {
                    option = optionGroup[index];
                    if (existingOption = existingOptions[index + 1]) {
                      lastElement = existingOption.element;
                      if (existingOption.label !== option.label) {
                        lastElement.text(existingOption.label = option.label);
                      }
                      if (existingOption.id !== option.id) {
                        lastElement.val(existingOption.id = option.id);
                      }
                      if (existingOption.selected !== option.selected) {
                        lastElement.prop('selected', existingOption.selected = option.selected);
                      }
                    } else {
                      if (option.id === '' && nullOption) {
                        element = nullOption;
                      } else {
                        (element = optionTemplate.clone()).val(option.id).attr('selected', option.selected).text(option.label);
                      }
                      existingOptions.push(existingOption = {
                        element: element,
                        label: option.label,
                        id: option.id,
                        selected: option.selected
                      });
                      if (lastElement) {
                        lastElement.after(element);
                      } else {
                        existingParent.element.append(element);
                      }
                      lastElement = element;
                    }
                  }
                  index++;
                  while (existingOptions.length > index) {
                    existingOptions.pop().element.remove();
                  }
                }
                while (optionGroupsCache.length > groupIndex) {
                  optionGroupsCache.pop()[0].element.remove();
                }
              }
            }
          }
        };
      }
    ];
  var optionDirective = [
      '$interpolate',
      function ($interpolate) {
        var nullSelectCtrl = {
            addOption: noop,
            removeOption: noop
          };
        return {
          restrict: 'E',
          priority: 100,
          compile: function (element, attr) {
            if (isUndefined(attr.value)) {
              var interpolateFn = $interpolate(element.text(), true);
              if (!interpolateFn) {
                attr.$set('value', element.text());
              }
            }
            return function (scope, element, attr) {
              var selectCtrlName = '$selectController', parent = element.parent(), selectCtrl = parent.data(selectCtrlName) || parent.parent().data(selectCtrlName);
              if (selectCtrl && selectCtrl.databound) {
                element.prop('selected', false);
              } else {
                selectCtrl = nullSelectCtrl;
              }
              if (interpolateFn) {
                scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
                  attr.$set('value', newVal);
                  if (newVal !== oldVal)
                    selectCtrl.removeOption(oldVal);
                  selectCtrl.addOption(newVal);
                });
              } else {
                selectCtrl.addOption(attr.value);
              }
              element.on('$destroy', function () {
                selectCtrl.removeOption(attr.value);
              });
            };
          }
        };
      }
    ];
  var styleDirective = valueFn({
      restrict: 'E',
      terminal: true
    });
  if (window.angular.bootstrap) {
    console.log('WARNING: Tried to load angular more than once.');
    return;
  }
  bindJQuery();
  publishExternalAPI(angular);
  jqLite(document).ready(function () {
    angularInit(document, bootstrap);
  });
}(window, document));
!angular.$$csp() && angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}</style>');
if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {
  module.exports = 'ui.router';
}
(function (window, angular, undefined) {
  'use strict';
  var isDefined = angular.isDefined, isFunction = angular.isFunction, isString = angular.isString, isObject = angular.isObject, isArray = angular.isArray, forEach = angular.forEach, extend = angular.extend, copy = angular.copy;
  function inherit(parent, extra) {
    return extend(new (extend(function () {
    }, { prototype: parent }))(), extra);
  }
  function merge(dst) {
    forEach(arguments, function (obj) {
      if (obj !== dst) {
        forEach(obj, function (value, key) {
          if (!dst.hasOwnProperty(key))
            dst[key] = value;
        });
      }
    });
    return dst;
  }
  function ancestors(first, second) {
    var path = [];
    for (var n in first.path) {
      if (first.path[n] !== second.path[n])
        break;
      path.push(first.path[n]);
    }
    return path;
  }
  function keys(object) {
    if (Object.keys) {
      return Object.keys(object);
    }
    var result = [];
    angular.forEach(object, function (val, key) {
      result.push(key);
    });
    return result;
  }
  function arraySearch(array, value) {
    if (Array.prototype.indexOf) {
      return array.indexOf(value, Number(arguments[2]) || 0);
    }
    var len = array.length >>> 0, from = Number(arguments[2]) || 0;
    from = from < 0 ? Math.ceil(from) : Math.floor(from);
    if (from < 0)
      from += len;
    for (; from < len; from++) {
      if (from in array && array[from] === value)
        return from;
    }
    return -1;
  }
  function inheritParams(currentParams, newParams, $current, $to) {
    var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];
    for (var i in parents) {
      if (!parents[i].params || !parents[i].params.length)
        continue;
      parentParams = parents[i].params;
      for (var j in parentParams) {
        if (arraySearch(inheritList, parentParams[j]) >= 0)
          continue;
        inheritList.push(parentParams[j]);
        inherited[parentParams[j]] = currentParams[parentParams[j]];
      }
    }
    return extend({}, inherited, newParams);
  }
  function normalize(keys, values) {
    var normalized = {};
    forEach(keys, function (name) {
      var value = values[name];
      normalized[name] = value != null ? String(value) : null;
    });
    return normalized;
  }
  function equalForKeys(a, b, keys) {
    if (!keys) {
      keys = [];
      for (var n in a)
        keys.push(n);
    }
    for (var i = 0; i < keys.length; i++) {
      var k = keys[i];
      if (a[k] != b[k])
        return false;
    }
    return true;
  }
  function filterByKeys(keys, values) {
    var filtered = {};
    forEach(keys, function (name) {
      filtered[name] = values[name];
    });
    return filtered;
  }
  angular.module('ui.router.util', ['ng']);
  angular.module('ui.router.router', ['ui.router.util']);
  angular.module('ui.router.state', [
    'ui.router.router',
    'ui.router.util'
  ]);
  angular.module('ui.router', ['ui.router.state']);
  angular.module('ui.router.compat', ['ui.router']);
  $Resolve.$inject = [
    '$q',
    '$injector'
  ];
  function $Resolve($q, $injector) {
    var VISIT_IN_PROGRESS = 1, VISIT_DONE = 2, NOTHING = {}, NO_DEPENDENCIES = [], NO_LOCALS = NOTHING, NO_PARENT = extend($q.when(NOTHING), {
        $$promises: NOTHING,
        $$values: NOTHING
      });
    this.study = function (invocables) {
      if (!isObject(invocables))
        throw new Error('\'invocables\' must be an object');
      var plan = [], cycle = [], visited = {};
      function visit(value, key) {
        if (visited[key] === VISIT_DONE)
          return;
        cycle.push(key);
        if (visited[key] === VISIT_IN_PROGRESS) {
          cycle.splice(0, cycle.indexOf(key));
          throw new Error('Cyclic dependency: ' + cycle.join(' -> '));
        }
        visited[key] = VISIT_IN_PROGRESS;
        if (isString(value)) {
          plan.push(key, [function () {
              return $injector.get(value);
            }], NO_DEPENDENCIES);
        } else {
          var params = $injector.annotate(value);
          forEach(params, function (param) {
            if (param !== key && invocables.hasOwnProperty(param))
              visit(invocables[param], param);
          });
          plan.push(key, value, params);
        }
        cycle.pop();
        visited[key] = VISIT_DONE;
      }
      forEach(invocables, visit);
      invocables = cycle = visited = null;
      function isResolve(value) {
        return isObject(value) && value.then && value.$$promises;
      }
      return function (locals, parent, self) {
        if (isResolve(locals) && self === undefined) {
          self = parent;
          parent = locals;
          locals = null;
        }
        if (!locals)
          locals = NO_LOCALS;
        else if (!isObject(locals)) {
          throw new Error('\'locals\' must be an object');
        }
        if (!parent)
          parent = NO_PARENT;
        else if (!isResolve(parent)) {
          throw new Error('\'parent\' must be a promise returned by $resolve.resolve()');
        }
        var resolution = $q.defer(), result = resolution.promise, promises = result.$$promises = {}, values = extend({}, locals), wait = 1 + plan.length / 3, merged = false;
        function done() {
          if (!--wait) {
            if (!merged)
              merge(values, parent.$$values);
            result.$$values = values;
            result.$$promises = true;
            resolution.resolve(values);
          }
        }
        function fail(reason) {
          result.$$failure = reason;
          resolution.reject(reason);
        }
        if (isDefined(parent.$$failure)) {
          fail(parent.$$failure);
          return result;
        }
        if (parent.$$values) {
          merged = merge(values, parent.$$values);
          done();
        } else {
          extend(promises, parent.$$promises);
          parent.then(done, fail);
        }
        for (var i = 0, ii = plan.length; i < ii; i += 3) {
          if (locals.hasOwnProperty(plan[i]))
            done();
          else
            invoke(plan[i], plan[i + 1], plan[i + 2]);
        }
        function invoke(key, invocable, params) {
          var invocation = $q.defer(), waitParams = 0;
          function onfailure(reason) {
            invocation.reject(reason);
            fail(reason);
          }
          forEach(params, function (dep) {
            if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
              waitParams++;
              promises[dep].then(function (result) {
                values[dep] = result;
                if (!--waitParams)
                  proceed();
              }, onfailure);
            }
          });
          if (!waitParams)
            proceed();
          function proceed() {
            if (isDefined(result.$$failure))
              return;
            try {
              invocation.resolve($injector.invoke(invocable, self, values));
              invocation.promise.then(function (result) {
                values[key] = result;
                done();
              }, onfailure);
            } catch (e) {
              onfailure(e);
            }
          }
          promises[key] = invocation.promise;
        }
        return result;
      };
    };
    this.resolve = function (invocables, locals, parent, self) {
      return this.study(invocables)(locals, parent, self);
    };
  }
  angular.module('ui.router.util').service('$resolve', $Resolve);
  $TemplateFactory.$inject = [
    '$http',
    '$templateCache',
    '$injector'
  ];
  function $TemplateFactory($http, $templateCache, $injector) {
    this.fromConfig = function (config, params, locals) {
      return isDefined(config.template) ? this.fromString(config.template, params) : isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) : isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) : null;
    };
    this.fromString = function (template, params) {
      return isFunction(template) ? template(params) : template;
    };
    this.fromUrl = function (url, params) {
      if (isFunction(url))
        url = url(params);
      if (url == null)
        return null;
      else
        return $http.get(url, { cache: $templateCache }).then(function (response) {
          return response.data;
        });
    };
    this.fromProvider = function (provider, params, locals) {
      return $injector.invoke(provider, null, locals || { params: params });
    };
  }
  angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);
  function UrlMatcher(pattern) {
    var placeholder = /([:*])(\w+)|\{(\w+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, names = {}, compiled = '^', last = 0, m, segments = this.segments = [], params = this.params = [];
    function addParameter(id) {
      if (!/^\w+(-+\w+)*$/.test(id))
        throw new Error('Invalid parameter name \'' + id + '\' in pattern \'' + pattern + '\'');
      if (names[id])
        throw new Error('Duplicate parameter name \'' + id + '\' in pattern \'' + pattern + '\'');
      names[id] = true;
      params.push(id);
    }
    function quoteRegExp(string) {
      return string.replace(/[\\\[\]\^$*+?.()|{}]/g, '\\$&');
    }
    this.source = pattern;
    var id, regexp, segment;
    while (m = placeholder.exec(pattern)) {
      id = m[2] || m[3];
      regexp = m[4] || (m[1] == '*' ? '.*' : '[^/]*');
      segment = pattern.substring(last, m.index);
      if (segment.indexOf('?') >= 0)
        break;
      compiled += quoteRegExp(segment) + '(' + regexp + ')';
      addParameter(id);
      segments.push(segment);
      last = placeholder.lastIndex;
    }
    segment = pattern.substring(last);
    var i = segment.indexOf('?');
    if (i >= 0) {
      var search = this.sourceSearch = segment.substring(i);
      segment = segment.substring(0, i);
      this.sourcePath = pattern.substring(0, last + i);
      forEach(search.substring(1).split(/[&?]/), addParameter);
    } else {
      this.sourcePath = pattern;
      this.sourceSearch = '';
    }
    compiled += quoteRegExp(segment) + '$';
    segments.push(segment);
    this.regexp = new RegExp(compiled);
    this.prefix = segments[0];
  }
  UrlMatcher.prototype.concat = function (pattern) {
    return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch);
  };
  UrlMatcher.prototype.toString = function () {
    return this.source;
  };
  UrlMatcher.prototype.exec = function (path, searchParams) {
    var m = this.regexp.exec(path);
    if (!m)
      return null;
    var params = this.params, nTotal = params.length, nPath = this.segments.length - 1, values = {}, i;
    if (nPath !== m.length - 1)
      throw new Error('Unbalanced capture group in route \'' + this.source + '\'');
    for (i = 0; i < nPath; i++)
      values[params[i]] = m[i + 1];
    for (; i < nTotal; i++)
      values[params[i]] = searchParams[params[i]];
    return values;
  };
  UrlMatcher.prototype.parameters = function () {
    return this.params;
  };
  UrlMatcher.prototype.format = function (values) {
    var segments = this.segments, params = this.params;
    if (!values)
      return segments.join('');
    var nPath = segments.length - 1, nTotal = params.length, result = segments[0], i, search, value;
    for (i = 0; i < nPath; i++) {
      value = values[params[i]];
      if (value != null)
        result += encodeURIComponent(value);
      result += segments[i + 1];
    }
    for (; i < nTotal; i++) {
      value = values[params[i]];
      if (value != null) {
        result += (search ? '&' : '?') + params[i] + '=' + encodeURIComponent(value);
        search = true;
      }
    }
    return result;
  };
  function $UrlMatcherFactory() {
    this.compile = function (pattern) {
      return new UrlMatcher(pattern);
    };
    this.isMatcher = function (o) {
      return isObject(o) && isFunction(o.exec) && isFunction(o.format) && isFunction(o.concat);
    };
    this.$get = function () {
      return this;
    };
  }
  angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
  $UrlRouterProvider.$inject = ['$urlMatcherFactoryProvider'];
  function $UrlRouterProvider($urlMatcherFactory) {
    var rules = [], otherwise = null;
    function regExpPrefix(re) {
      var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
      return prefix != null ? prefix[1].replace(/\\(.)/g, '$1') : '';
    }
    function interpolate(pattern, match) {
      return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
        return match[what === '$' ? 0 : Number(what)];
      });
    }
    this.rule = function (rule) {
      if (!isFunction(rule))
        throw new Error('\'rule\' must be a function');
      rules.push(rule);
      return this;
    };
    this.otherwise = function (rule) {
      if (isString(rule)) {
        var redirect = rule;
        rule = function () {
          return redirect;
        };
      } else if (!isFunction(rule))
        throw new Error('\'rule\' must be a function');
      otherwise = rule;
      return this;
    };
    function handleIfMatch($injector, handler, match) {
      if (!match)
        return false;
      var result = $injector.invoke(handler, handler, { $match: match });
      return isDefined(result) ? result : true;
    }
    this.when = function (what, handler) {
      var redirect, handlerIsString = isString(handler);
      if (isString(what))
        what = $urlMatcherFactory.compile(what);
      if (!handlerIsString && !isFunction(handler) && !isArray(handler))
        throw new Error('invalid \'handler\' in when()');
      var strategies = {
          matcher: function (what, handler) {
            if (handlerIsString) {
              redirect = $urlMatcherFactory.compile(handler);
              handler = [
                '$match',
                function ($match) {
                  return redirect.format($match);
                }
              ];
            }
            return extend(function ($injector, $location) {
              return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
            }, { prefix: isString(what.prefix) ? what.prefix : '' });
          },
          regex: function (what, handler) {
            if (what.global || what.sticky)
              throw new Error('when() RegExp must not be global or sticky');
            if (handlerIsString) {
              redirect = handler;
              handler = [
                '$match',
                function ($match) {
                  return interpolate(redirect, $match);
                }
              ];
            }
            return extend(function ($injector, $location) {
              return handleIfMatch($injector, handler, what.exec($location.path()));
            }, { prefix: regExpPrefix(what) });
          }
        };
      var check = {
          matcher: $urlMatcherFactory.isMatcher(what),
          regex: what instanceof RegExp
        };
      for (var n in check) {
        if (check[n]) {
          return this.rule(strategies[n](what, handler));
        }
      }
      throw new Error('invalid \'what\' in when()');
    };
    this.$get = [
      '$location',
      '$rootScope',
      '$injector',
      function ($location, $rootScope, $injector) {
        function update(evt) {
          if (evt && evt.defaultPrevented)
            return;
          function check(rule) {
            var handled = rule($injector, $location);
            if (handled) {
              if (isString(handled))
                $location.replace().url(handled);
              return true;
            }
            return false;
          }
          var n = rules.length, i;
          for (i = 0; i < n; i++) {
            if (check(rules[i]))
              return;
          }
          if (otherwise)
            check(otherwise);
        }
        $rootScope.$on('$locationChangeSuccess', update);
        return {
          sync: function () {
            update();
          }
        };
      }
    ];
  }
  angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);
  $StateProvider.$inject = [
    '$urlRouterProvider',
    '$urlMatcherFactoryProvider',
    '$locationProvider'
  ];
  function $StateProvider($urlRouterProvider, $urlMatcherFactory, $locationProvider) {
    var root, states = {}, $state, queue = {}, abstractKey = 'abstract';
    var stateBuilder = {
        parent: function (state) {
          if (isDefined(state.parent) && state.parent)
            return findState(state.parent);
          var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
          return compositeName ? findState(compositeName[1]) : root;
        },
        data: function (state) {
          if (state.parent && state.parent.data) {
            state.data = state.self.data = extend({}, state.parent.data, state.data);
          }
          return state.data;
        },
        url: function (state) {
          var url = state.url;
          if (isString(url)) {
            if (url.charAt(0) == '^') {
              return $urlMatcherFactory.compile(url.substring(1));
            }
            return (state.parent.navigable || root).url.concat(url);
          }
          if ($urlMatcherFactory.isMatcher(url) || url == null) {
            return url;
          }
          throw new Error('Invalid url \'' + url + '\' in state \'' + state + '\'');
        },
        navigable: function (state) {
          return state.url ? state : state.parent ? state.parent.navigable : null;
        },
        params: function (state) {
          if (!state.params) {
            return state.url ? state.url.parameters() : state.parent.params;
          }
          if (!isArray(state.params))
            throw new Error('Invalid params in state \'' + state + '\'');
          if (state.url)
            throw new Error('Both params and url specicified in state \'' + state + '\'');
          return state.params;
        },
        views: function (state) {
          var views = {};
          forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
            if (name.indexOf('@') < 0)
              name += '@' + state.parent.name;
            views[name] = view;
          });
          return views;
        },
        ownParams: function (state) {
          if (!state.parent) {
            return state.params;
          }
          var paramNames = {};
          forEach(state.params, function (p) {
            paramNames[p] = true;
          });
          forEach(state.parent.params, function (p) {
            if (!paramNames[p]) {
              throw new Error('Missing required parameter \'' + p + '\' in state \'' + state.name + '\'');
            }
            paramNames[p] = false;
          });
          var ownParams = [];
          forEach(paramNames, function (own, p) {
            if (own)
              ownParams.push(p);
          });
          return ownParams;
        },
        path: function (state) {
          return state.parent ? state.parent.path.concat(state) : [];
        },
        includes: function (state) {
          var includes = state.parent ? extend({}, state.parent.includes) : {};
          includes[state.name] = true;
          return includes;
        },
        $delegates: {}
      };
    function isRelative(stateName) {
      return stateName.indexOf('.') === 0 || stateName.indexOf('^') === 0;
    }
    function findState(stateOrName, base) {
      var isStr = isString(stateOrName), name = isStr ? stateOrName : stateOrName.name, path = isRelative(name);
      if (path) {
        if (!base)
          throw new Error('No reference point given for path \'' + name + '\'');
        var rel = name.split('.'), i = 0, pathLength = rel.length, current = base;
        for (; i < pathLength; i++) {
          if (rel[i] === '' && i === 0) {
            current = base;
            continue;
          }
          if (rel[i] === '^') {
            if (!current.parent)
              throw new Error('Path \'' + name + '\' not valid for state \'' + base.name + '\'');
            current = current.parent;
            continue;
          }
          break;
        }
        rel = rel.slice(i).join('.');
        name = current.name + (current.name && rel ? '.' : '') + rel;
      }
      var state = states[name];
      if (state && (isStr || !isStr && (state === stateOrName || state.self === stateOrName))) {
        return state;
      }
      return undefined;
    }
    function queueState(parentName, state) {
      if (!queue[parentName]) {
        queue[parentName] = [];
      }
      queue[parentName].push(state);
    }
    function registerState(state) {
      state = inherit(state, {
        self: state,
        resolve: state.resolve || {},
        toString: function () {
          return this.name;
        }
      });
      var name = state.name;
      if (!isString(name) || name.indexOf('@') >= 0)
        throw new Error('State must have a valid name');
      if (states.hasOwnProperty(name))
        throw new Error('State \'' + name + '\'\' is already defined');
      var parentName = name.indexOf('.') !== -1 ? name.substring(0, name.lastIndexOf('.')) : isString(state.parent) ? state.parent : '';
      if (parentName && !states[parentName]) {
        return queueState(parentName, state.self);
      }
      for (var key in stateBuilder) {
        if (isFunction(stateBuilder[key]))
          state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
      }
      states[name] = state;
      if (!state[abstractKey] && state.url) {
        $urlRouterProvider.when(state.url, [
          '$match',
          '$stateParams',
          function ($match, $stateParams) {
            if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
              $state.transitionTo(state, $match, { location: false });
            }
          }
        ]);
      }
      if (queue[name]) {
        for (var i = 0; i < queue[name].length; i++) {
          registerState(queue[name][i]);
        }
      }
      return state;
    }
    function isGlob(text) {
      return text.indexOf('*') > -1;
    }
    function doesStateMatchGlob(glob) {
      var globSegments = glob.split('.'), segments = $state.$current.name.split('.');
      if (globSegments[0] === '**') {
        segments = segments.slice(segments.indexOf(globSegments[1]));
        segments.unshift('**');
      }
      if (globSegments[globSegments.length - 1] === '**') {
        segments.splice(segments.indexOf(globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
        segments.push('**');
      }
      if (globSegments.length != segments.length) {
        return false;
      }
      for (var i = 0, l = globSegments.length; i < l; i++) {
        if (globSegments[i] === '*') {
          segments[i] = '*';
        }
      }
      return segments.join('') === globSegments.join('');
    }
    root = registerState({
      name: '',
      url: '^',
      views: null,
      'abstract': true
    });
    root.navigable = null;
    this.decorator = decorator;
    function decorator(name, func) {
      if (isString(name) && !isDefined(func)) {
        return stateBuilder[name];
      }
      if (!isFunction(func) || !isString(name)) {
        return this;
      }
      if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
        stateBuilder.$delegates[name] = stateBuilder[name];
      }
      stateBuilder[name] = func;
      return this;
    }
    this.state = state;
    function state(name, definition) {
      if (isObject(name))
        definition = name;
      else
        definition.name = name;
      registerState(definition);
      return this;
    }
    this.$get = $get;
    $get.$inject = [
      '$rootScope',
      '$q',
      '$view',
      '$injector',
      '$resolve',
      '$stateParams',
      '$location',
      '$urlRouter',
      '$browser'
    ];
    function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $location, $urlRouter, $browser) {
      var TransitionSuperseded = $q.reject(new Error('transition superseded'));
      var TransitionPrevented = $q.reject(new Error('transition prevented'));
      var TransitionAborted = $q.reject(new Error('transition aborted'));
      var TransitionFailed = $q.reject(new Error('transition failed'));
      var currentLocation = $location.url();
      var baseHref = $browser.baseHref();
      function syncUrl() {
        if ($location.url() !== currentLocation) {
          $location.url(currentLocation);
          $location.replace();
        }
      }
      root.locals = {
        resolve: null,
        globals: { $stateParams: {} }
      };
      $state = {
        params: {},
        current: root.self,
        $current: root,
        transition: null
      };
      $state.reload = function reload() {
        $state.transitionTo($state.current, $stateParams, {
          reload: true,
          inherit: false,
          notify: false
        });
      };
      $state.go = function go(to, params, options) {
        return this.transitionTo(to, params, extend({
          inherit: true,
          relative: $state.$current
        }, options));
      };
      $state.transitionTo = function transitionTo(to, toParams, options) {
        toParams = toParams || {};
        options = extend({
          location: true,
          inherit: false,
          relative: null,
          notify: true,
          reload: false,
          $retry: false
        }, options || {});
        var from = $state.$current, fromParams = $state.params, fromPath = from.path;
        var evt, toState = findState(to, options.relative);
        if (!isDefined(toState)) {
          var redirect = {
              to: to,
              toParams: toParams,
              options: options
            };
          evt = $rootScope.$broadcast('$stateNotFound', redirect, from.self, fromParams);
          if (evt.defaultPrevented) {
            syncUrl();
            return TransitionAborted;
          }
          if (evt.retry) {
            if (options.$retry) {
              syncUrl();
              return TransitionFailed;
            }
            var retryTransition = $state.transition = $q.when(evt.retry);
            retryTransition.then(function () {
              if (retryTransition !== $state.transition)
                return TransitionSuperseded;
              redirect.options.$retry = true;
              return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
            }, function () {
              return TransitionAborted;
            });
            syncUrl();
            return retryTransition;
          }
          to = redirect.to;
          toParams = redirect.toParams;
          options = redirect.options;
          toState = findState(to, options.relative);
          if (!isDefined(toState)) {
            if (options.relative)
              throw new Error('Could not resolve \'' + to + '\' from state \'' + options.relative + '\'');
            throw new Error('No such state \'' + to + '\'');
          }
        }
        if (toState[abstractKey])
          throw new Error('Cannot transition to abstract state \'' + to + '\'');
        if (options.inherit)
          toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
        to = toState;
        var toPath = to.path;
        var keep, state, locals = root.locals, toLocals = [];
        for (keep = 0, state = toPath[keep]; state && state === fromPath[keep] && equalForKeys(toParams, fromParams, state.ownParams) && !options.reload; keep++, state = toPath[keep]) {
          locals = toLocals[keep] = state.locals;
        }
        if (shouldTriggerReload(to, from, locals, options)) {
          if (to.self.reloadOnSearch !== false)
            syncUrl();
          $state.transition = null;
          return $q.when($state.current);
        }
        toParams = normalize(to.params, toParams || {});
        if (options.notify) {
          evt = $rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams);
          if (evt.defaultPrevented) {
            syncUrl();
            return TransitionPrevented;
          }
        }
        var resolved = $q.when(locals);
        for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
          locals = toLocals[l] = inherit(locals);
          resolved = resolveState(state, toParams, state === to, resolved, locals);
        }
        var transition = $state.transition = resolved.then(function () {
            var l, entering, exiting;
            if ($state.transition !== transition)
              return TransitionSuperseded;
            for (l = fromPath.length - 1; l >= keep; l--) {
              exiting = fromPath[l];
              if (exiting.self.onExit) {
                $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
              }
              exiting.locals = null;
            }
            for (l = keep; l < toPath.length; l++) {
              entering = toPath[l];
              entering.locals = toLocals[l];
              if (entering.self.onEnter) {
                $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
              }
            }
            if ($state.transition !== transition)
              return TransitionSuperseded;
            $state.$current = to;
            $state.current = to.self;
            $state.params = toParams;
            copy($state.params, $stateParams);
            $state.transition = null;
            var toNav = to.navigable;
            if (options.location && toNav) {
              $location.url(toNav.url.format(toNav.locals.globals.$stateParams));
              if (options.location === 'replace') {
                $location.replace();
              }
            }
            if (options.notify) {
              $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
            }
            currentLocation = $location.url();
            return $state.current;
          }, function (error) {
            if ($state.transition !== transition)
              return TransitionSuperseded;
            $state.transition = null;
            $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);
            syncUrl();
            return $q.reject(error);
          });
        return transition;
      };
      $state.is = function is(stateOrName, params) {
        var state = findState(stateOrName);
        if (!isDefined(state)) {
          return undefined;
        }
        if ($state.$current !== state) {
          return false;
        }
        return isDefined(params) && params !== null ? angular.equals($stateParams, params) : true;
      };
      $state.includes = function includes(stateOrName, params) {
        if (isString(stateOrName) && isGlob(stateOrName)) {
          if (doesStateMatchGlob(stateOrName)) {
            stateOrName = $state.$current.name;
          } else {
            return false;
          }
        }
        var state = findState(stateOrName);
        if (!isDefined(state)) {
          return undefined;
        }
        if (!isDefined($state.$current.includes[state.name])) {
          return false;
        }
        var validParams = true;
        angular.forEach(params, function (value, key) {
          if (!isDefined($stateParams[key]) || $stateParams[key] !== value) {
            validParams = false;
          }
        });
        return validParams;
      };
      $state.href = function href(stateOrName, params, options) {
        options = extend({
          lossy: true,
          inherit: false,
          absolute: false,
          relative: $state.$current
        }, options || {});
        var state = findState(stateOrName, options.relative);
        if (!isDefined(state))
          return null;
        params = inheritParams($stateParams, params || {}, $state.$current, state);
        var nav = state && options.lossy ? state.navigable : state;
        var url = nav && nav.url ? nav.url.format(normalize(state.params, params || {})) : null;
        if (!$locationProvider.html5Mode() && url) {
          url = '#' + $locationProvider.hashPrefix() + url;
        }
        if (baseHref !== '/') {
          if ($locationProvider.html5Mode()) {
            url = baseHref.slice(0, -1) + url;
          } else if (options.absolute) {
            url = baseHref.slice(1) + url;
          }
        }
        if (options.absolute && url) {
          url = $location.protocol() + '://' + $location.host() + ($location.port() == 80 || $location.port() == 443 ? '' : ':' + $location.port()) + (!$locationProvider.html5Mode() && url ? '/' : '') + url;
        }
        return url;
      };
      $state.get = function (stateOrName, context) {
        if (!isDefined(stateOrName)) {
          var list = [];
          forEach(states, function (state) {
            list.push(state.self);
          });
          return list;
        }
        var state = findState(stateOrName, context);
        return state && state.self ? state.self : null;
      };
      function resolveState(state, params, paramsAreFiltered, inherited, dst) {
        var $stateParams = paramsAreFiltered ? params : filterByKeys(state.params, params);
        var locals = { $stateParams: $stateParams };
        dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
        var promises = [dst.resolve.then(function (globals) {
              dst.globals = globals;
            })];
        if (inherited)
          promises.push(inherited);
        forEach(state.views, function (view, name) {
          var injectables = view.resolve && view.resolve !== state.resolve ? view.resolve : {};
          injectables.$template = [function () {
              return $view.load(name, {
                view: view,
                locals: locals,
                params: $stateParams,
                notify: false
              }) || '';
            }];
          promises.push($resolve.resolve(injectables, locals, dst.resolve, state).then(function (result) {
            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
              var injectLocals = angular.extend({}, injectables, locals);
              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
            } else {
              result.$$controller = view.controller;
            }
            result.$$state = state;
            result.$$controllerAs = view.controllerAs;
            dst[name] = result;
          }));
        });
        return $q.all(promises).then(function (values) {
          return dst;
        });
      }
      return $state;
    }
    function shouldTriggerReload(to, from, locals, options) {
      if (to === from && (locals === from.locals && !options.reload || to.self.reloadOnSearch === false)) {
        return true;
      }
    }
  }
  angular.module('ui.router.state').value('$stateParams', {}).provider('$state', $StateProvider);
  $ViewProvider.$inject = [];
  function $ViewProvider() {
    this.$get = $get;
    $get.$inject = [
      '$rootScope',
      '$templateFactory'
    ];
    function $get($rootScope, $templateFactory) {
      return {
        load: function load(name, options) {
          var result, defaults = {
              template: null,
              controller: null,
              view: null,
              locals: null,
              notify: true,
              async: true,
              params: {}
            };
          options = extend(defaults, options);
          if (options.view) {
            result = $templateFactory.fromConfig(options.view, options.params, options.locals);
          }
          if (result && options.notify) {
            $rootScope.$broadcast('$viewContentLoading', options);
          }
          return result;
        }
      };
    }
  }
  angular.module('ui.router.state').provider('$view', $ViewProvider);
  function $ViewScrollProvider() {
    var useAnchorScroll = false;
    this.useAnchorScroll = function () {
      useAnchorScroll = true;
    };
    this.$get = [
      '$anchorScroll',
      '$timeout',
      function ($anchorScroll, $timeout) {
        if (useAnchorScroll) {
          return $anchorScroll;
        }
        return function ($element) {
          $timeout(function () {
            $element[0].scrollIntoView();
          }, 0, false);
        };
      }
    ];
  }
  angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);
  $ViewDirective.$inject = [
    '$state',
    '$injector',
    '$uiViewScroll'
  ];
  function $ViewDirective($state, $injector, $uiViewScroll) {
    function getService() {
      return $injector.has ? function (service) {
        return $injector.has(service) ? $injector.get(service) : null;
      } : function (service) {
        try {
          return $injector.get(service);
        } catch (e) {
          return null;
        }
      };
    }
    var service = getService(), $animator = service('$animator'), $animate = service('$animate');
    function getRenderer(attrs, scope) {
      var statics = function () {
        return {
          enter: function (element, target, cb) {
            target.after(element);
            cb();
          },
          leave: function (element, cb) {
            element.remove();
            cb();
          }
        };
      };
      if ($animate) {
        return {
          enter: function (element, target, cb) {
            $animate.enter(element, null, target, cb);
          },
          leave: function (element, cb) {
            $animate.leave(element, cb);
          }
        };
      }
      if ($animator) {
        var animate = $animator && $animator(scope, attrs);
        return {
          enter: function (element, target, cb) {
            animate.enter(element, null, target);
            cb();
          },
          leave: function (element, cb) {
            animate.leave(element);
            cb();
          }
        };
      }
      return statics();
    }
    var directive = {
        restrict: 'ECA',
        terminal: true,
        priority: 400,
        transclude: 'element',
        compile: function (tElement, tAttrs, $transclude) {
          return function (scope, $element, attrs) {
            var previousEl, currentEl, currentScope, latestLocals, onloadExp = attrs.onload || '', autoScrollExp = attrs.autoscroll, renderer = getRenderer(attrs, scope);
            scope.$on('$stateChangeSuccess', function () {
              updateView(false);
            });
            scope.$on('$viewContentLoading', function () {
              updateView(false);
            });
            updateView(true);
            function cleanupLastView() {
              if (previousEl) {
                previousEl.remove();
                previousEl = null;
              }
              if (currentScope) {
                currentScope.$destroy();
                currentScope = null;
              }
              if (currentEl) {
                renderer.leave(currentEl, function () {
                  previousEl = null;
                });
                previousEl = currentEl;
                currentEl = null;
              }
            }
            function updateView(firstTime) {
              var newScope = scope.$new(), name = currentEl && currentEl.data('$uiViewName'), previousLocals = name && $state.$current && $state.$current.locals[name];
              if (!firstTime && previousLocals === latestLocals)
                return;
              var clone = $transclude(newScope, function (clone) {
                  renderer.enter(clone, $element, function onUiViewEnter() {
                    if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                      $uiViewScroll(clone);
                    }
                  });
                  cleanupLastView();
                });
              latestLocals = $state.$current.locals[clone.data('$uiViewName')];
              currentEl = clone;
              currentScope = newScope;
              currentScope.$emit('$viewContentLoaded');
              currentScope.$eval(onloadExp);
            }
          };
        }
      };
    return directive;
  }
  $ViewDirectiveFill.$inject = [
    '$compile',
    '$controller',
    '$state'
  ];
  function $ViewDirectiveFill($compile, $controller, $state) {
    return {
      restrict: 'ECA',
      priority: -400,
      compile: function (tElement) {
        var initial = tElement.html();
        return function (scope, $element, attrs) {
          var name = attrs.uiView || attrs.name || '', inherited = $element.inheritedData('$uiView');
          if (name.indexOf('@') < 0) {
            name = name + '@' + (inherited ? inherited.state.name : '');
          }
          $element.data('$uiViewName', name);
          var current = $state.$current, locals = current && current.locals[name];
          if (!locals) {
            return;
          }
          $element.data('$uiView', {
            name: name,
            state: locals.$$state
          });
          $element.html(locals.$template ? locals.$template : initial);
          var link = $compile($element.contents());
          if (locals.$$controller) {
            locals.$scope = scope;
            var controller = $controller(locals.$$controller, locals);
            if (locals.$$controllerAs) {
              scope[locals.$$controllerAs] = controller;
            }
            $element.data('$ngControllerController', controller);
            $element.children().data('$ngControllerController', controller);
          }
          link(scope);
        };
      }
    };
  }
  angular.module('ui.router.state').directive('uiView', $ViewDirective);
  angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);
  function parseStateRef(ref) {
    var parsed = ref.replace(/\n/g, ' ').match(/^([^(]+?)\s*(\((.*)\))?$/);
    if (!parsed || parsed.length !== 4)
      throw new Error('Invalid state ref \'' + ref + '\'');
    return {
      state: parsed[1],
      paramExpr: parsed[3] || null
    };
  }
  function stateContext(el) {
    var stateData = el.parent().inheritedData('$uiView');
    if (stateData && stateData.state && stateData.state.name) {
      return stateData.state;
    }
  }
  $StateRefDirective.$inject = [
    '$state',
    '$timeout'
  ];
  function $StateRefDirective($state, $timeout) {
    var allowedOptions = [
        'location',
        'inherit',
        'reload'
      ];
    return {
      restrict: 'A',
      require: '?^uiSrefActive',
      link: function (scope, element, attrs, uiSrefActive) {
        var ref = parseStateRef(attrs.uiSref);
        var params = null, url = null, base = stateContext(element) || $state.$current;
        var isForm = element[0].nodeName === 'FORM';
        var attr = isForm ? 'action' : 'href', nav = true;
        var options = { relative: base };
        var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};
        angular.forEach(allowedOptions, function (option) {
          if (option in optionsOverride) {
            options[option] = optionsOverride[option];
          }
        });
        var update = function (newVal) {
          if (newVal)
            params = newVal;
          if (!nav)
            return;
          var newHref = $state.href(ref.state, params, options);
          if (uiSrefActive) {
            uiSrefActive.$$setStateInfo(ref.state, params);
          }
          if (!newHref) {
            nav = false;
            return false;
          }
          element[0][attr] = newHref;
        };
        if (ref.paramExpr) {
          scope.$watch(ref.paramExpr, function (newVal, oldVal) {
            if (newVal !== params)
              update(newVal);
          }, true);
          params = scope.$eval(ref.paramExpr);
        }
        update();
        if (isForm)
          return;
        element.bind('click', function (e) {
          var button = e.which || e.button;
          if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target'))) {
            $timeout(function () {
              $state.go(ref.state, params, options);
            });
            e.preventDefault();
          }
        });
      }
    };
  }
  $StateActiveDirective.$inject = [
    '$state',
    '$stateParams',
    '$interpolate'
  ];
  function $StateActiveDirective($state, $stateParams, $interpolate) {
    return {
      restrict: 'A',
      controller: [
        '$scope',
        '$element',
        '$attrs',
        function ($scope, $element, $attrs) {
          var state, params, activeClass;
          activeClass = $interpolate($attrs.uiSrefActive || '', false)($scope);
          this.$$setStateInfo = function (newState, newParams) {
            state = $state.get(newState, stateContext($element));
            params = newParams;
            update();
          };
          $scope.$on('$stateChangeSuccess', update);
          function update() {
            if ($state.$current.self === state && matchesParams()) {
              $element.addClass(activeClass);
            } else {
              $element.removeClass(activeClass);
            }
          }
          function matchesParams() {
            return !params || equalForKeys(params, $stateParams);
          }
        }
      ]
    };
  }
  angular.module('ui.router.state').directive('uiSref', $StateRefDirective).directive('uiSrefActive', $StateActiveDirective);
  $IsStateFilter.$inject = ['$state'];
  function $IsStateFilter($state) {
    return function (state) {
      return $state.is(state);
    };
  }
  $IncludedByStateFilter.$inject = ['$state'];
  function $IncludedByStateFilter($state) {
    return function (state) {
      return $state.includes(state);
    };
  }
  angular.module('ui.router.state').filter('isState', $IsStateFilter).filter('includedByState', $IncludedByStateFilter);
  $RouteProvider.$inject = [
    '$stateProvider',
    '$urlRouterProvider'
  ];
  function $RouteProvider($stateProvider, $urlRouterProvider) {
    var routes = [];
    onEnterRoute.$inject = ['$$state'];
    function onEnterRoute($$state) {
      this.locals = $$state.locals.globals;
      this.params = this.locals.$stateParams;
    }
    function onExitRoute() {
      this.locals = null;
      this.params = null;
    }
    this.when = when;
    function when(url, route) {
      if (route.redirectTo != null) {
        var redirect = route.redirectTo, handler;
        if (isString(redirect)) {
          handler = redirect;
        } else if (isFunction(redirect)) {
          handler = function (params, $location) {
            return redirect(params, $location.path(), $location.search());
          };
        } else {
          throw new Error('Invalid \'redirectTo\' in when()');
        }
        $urlRouterProvider.when(url, handler);
      } else {
        $stateProvider.state(inherit(route, {
          parent: null,
          name: 'route:' + encodeURIComponent(url),
          url: url,
          onEnter: onEnterRoute,
          onExit: onExitRoute
        }));
      }
      routes.push(route);
      return this;
    }
    this.$get = $get;
    $get.$inject = [
      '$state',
      '$rootScope',
      '$routeParams'
    ];
    function $get($state, $rootScope, $routeParams) {
      var $route = {
          routes: routes,
          params: $routeParams,
          current: undefined
        };
      function stateAsRoute(state) {
        return state.name !== '' ? state : undefined;
      }
      $rootScope.$on('$stateChangeStart', function (ev, to, toParams, from, fromParams) {
        $rootScope.$broadcast('$routeChangeStart', stateAsRoute(to), stateAsRoute(from));
      });
      $rootScope.$on('$stateChangeSuccess', function (ev, to, toParams, from, fromParams) {
        $route.current = stateAsRoute(to);
        $rootScope.$broadcast('$routeChangeSuccess', stateAsRoute(to), stateAsRoute(from));
        copy(toParams, $route.params);
      });
      $rootScope.$on('$stateChangeError', function (ev, to, toParams, from, fromParams, error) {
        $rootScope.$broadcast('$routeChangeError', stateAsRoute(to), stateAsRoute(from), error);
      });
      return $route;
    }
  }
  angular.module('ui.router.compat').provider('$route', $RouteProvider).directive('ngView', $ViewDirective);
}(window, window.angular));
(function (s, g, P) {
  'use strict';
  g.module('ngAnimate', ['ng']).factory('$$animateReflow', [
    '$$rAF',
    '$document',
    function (g, s) {
      return function (e) {
        return g(function () {
          e();
        });
      };
    }
  ]).config([
    '$provide',
    '$animateProvider',
    function (ga, G) {
      function e(e) {
        for (var p = 0; p < e.length; p++) {
          var g = e[p];
          if (g.nodeType == ba)
            return g;
        }
      }
      function u(p) {
        return g.element(e(p));
      }
      var m = g.noop, p = g.forEach, Q = G.$$selectors, ba = 1, h = '$$ngAnimateState', J = 'ng-animate', r = { running: !0 };
      ga.decorator('$animate', [
        '$delegate',
        '$injector',
        '$sniffer',
        '$rootElement',
        '$$asyncCallback',
        '$rootScope',
        '$document',
        function (t, s, aa, K, E, H, P) {
          function R(a) {
            if (a) {
              var b = [], c = {};
              a = a.substr(1).split('.');
              (aa.transitions || aa.animations) && b.push(s.get(Q['']));
              for (var d = 0; d < a.length; d++) {
                var f = a[d], e = Q[f];
                e && !c[f] && (b.push(s.get(e)), c[f] = !0);
              }
              return b;
            }
          }
          function L(a, b, c) {
            function d(a, b) {
              var c = a[b], d = a['before' + b.charAt(0).toUpperCase() + b.substr(1)];
              if (c || d)
                return 'leave' == b && (d = c, c = null), A.push({
                  event: b,
                  fn: c
                }), l.push({
                  event: b,
                  fn: d
                }), !0;
            }
            function f(b, d, e) {
              var f = [];
              p(b, function (a) {
                a.fn && f.push(a);
              });
              var n = 0;
              p(f, function (b, p) {
                var C = function () {
                  a: {
                    if (d) {
                      (d[p] || m)();
                      if (++n < f.length)
                        break a;
                      d = null;
                    }
                    e();
                  }
                };
                switch (b.event) {
                case 'setClass':
                  d.push(b.fn(a, q, y, C));
                  break;
                case 'addClass':
                  d.push(b.fn(a, q || c, C));
                  break;
                case 'removeClass':
                  d.push(b.fn(a, y || c, C));
                  break;
                default:
                  d.push(b.fn(a, C));
                }
              });
              d && 0 === d.length && e();
            }
            var e = a[0];
            if (e) {
              var h = 'setClass' == b, r = h || 'addClass' == b || 'removeClass' == b, q, y;
              g.isArray(c) && (q = c[0], y = c[1], c = q + ' ' + y);
              var z = a.attr('class') + ' ' + c;
              if (T(z)) {
                var v = m, w = [], l = [], x = m, n = [], A = [], z = (' ' + z).replace(/\s+/g, '.');
                p(R(z), function (a) {
                  !d(a, b) && h && (d(a, 'addClass'), d(a, 'removeClass'));
                });
                return {
                  node: e,
                  event: b,
                  className: c,
                  isClassBased: r,
                  isSetClassOperation: h,
                  before: function (a) {
                    v = a;
                    f(l, w, function () {
                      v = m;
                      a();
                    });
                  },
                  after: function (a) {
                    x = a;
                    f(A, n, function () {
                      x = m;
                      a();
                    });
                  },
                  cancel: function () {
                    w && (p(w, function (a) {
                      (a || m)(!0);
                    }), v(!0));
                    n && (p(n, function (a) {
                      (a || m)(!0);
                    }), x(!0));
                  }
                };
              }
            }
          }
          function F(a, b, c, d, f, e, r) {
            function m(d) {
              var e = '$animate:' + d;
              x && (x[e] && 0 < x[e].length) && E(function () {
                c.triggerHandler(e, {
                  event: a,
                  className: b
                });
              });
            }
            function q() {
              m('before');
            }
            function y() {
              m('after');
            }
            function z() {
              m('close');
              r && E(function () {
                r();
              });
            }
            function v() {
              v.hasBeenRun || (v.hasBeenRun = !0, e());
            }
            function w() {
              if (!w.hasBeenRun) {
                w.hasBeenRun = !0;
                var d = c.data(h);
                d && (l && l.isClassBased ? B(c, b) : (E(function () {
                  var d = c.data(h) || {};
                  t == d.index && B(c, b, a);
                }), c.data(h, d)));
                z();
              }
            }
            var l = L(c, a, b);
            if (l) {
              b = l.className;
              var x = g.element._data(l.node), x = x && x.events;
              d || (d = f ? f.parent() : c.parent());
              var n = c.data(h) || {};
              f = n.active || {};
              var A = n.totalActive || 0, C = n.last;
              if (l.isClassBased && (n.disabled || C && !C.isClassBased) || N(c, d))
                v(), q(), y(), w();
              else {
                d = !1;
                if (0 < A) {
                  n = [];
                  if (l.isClassBased)
                    'setClass' == C.event ? (n.push(C), B(c, b)) : f[b] && (s = f[b], s.event == a ? d = !0 : (n.push(s), B(c, b)));
                  else if ('leave' == a && f['ng-leave'])
                    d = !0;
                  else {
                    for (var s in f)
                      n.push(f[s]), B(c, s);
                    f = {};
                    A = 0;
                  }
                  0 < n.length && p(n, function (a) {
                    a.cancel();
                  });
                }
                !l.isClassBased || (l.isSetClassOperation || d) || (d = 'addClass' == a == c.hasClass(b));
                if (d)
                  q(), y(), z();
                else {
                  if ('leave' == a)
                    c.one('$destroy', function (a) {
                      a = g.element(this);
                      var b = a.data(h);
                      b && (b = b.active['ng-leave']) && (b.cancel(), B(a, 'ng-leave'));
                    });
                  c.addClass(J);
                  var t = O++;
                  A++;
                  f[b] = l;
                  c.data(h, {
                    last: l,
                    active: f,
                    index: t,
                    totalActive: A
                  });
                  q();
                  l.before(function (d) {
                    var e = c.data(h);
                    d = d || !e || !e.active[b] || l.isClassBased && e.active[b].event != a;
                    v();
                    !0 === d ? w() : (y(), l.after(w));
                  });
                }
              }
            } else
              v(), q(), y(), w();
          }
          function U(a) {
            if (a = e(a))
              a = g.isFunction(a.getElementsByClassName) ? a.getElementsByClassName(J) : a.querySelectorAll('.' + J), p(a, function (a) {
                a = g.element(a);
                (a = a.data(h)) && a.active && p(a.active, function (a) {
                  a.cancel();
                });
              });
          }
          function B(a, b) {
            if (e(a) == e(K))
              r.disabled || (r.running = !1, r.structural = !1);
            else if (b) {
              var c = a.data(h) || {}, d = !0 === b;
              !d && (c.active && c.active[b]) && (c.totalActive--, delete c.active[b]);
              if (d || !c.totalActive)
                a.removeClass(J), a.removeData(h);
            }
          }
          function N(a, b) {
            if (r.disabled)
              return !0;
            if (e(a) == e(K))
              return r.disabled || r.running;
            do {
              if (0 === b.length)
                break;
              var c = e(b) == e(K), d = c ? r : b.data(h), d = d && (!!d.disabled || d.running || 0 < d.totalActive);
              if (c || d)
                return d;
              if (c)
                break;
            } while (b = b.parent());
            return !0;
          }
          var O = 0;
          K.data(h, r);
          H.$$postDigest(function () {
            H.$$postDigest(function () {
              r.running = !1;
            });
          });
          var V = G.classNameFilter(), T = V ? function (a) {
              return V.test(a);
            } : function () {
              return !0;
            };
          return {
            enter: function (a, b, c, d) {
              this.enabled(!1, a);
              t.enter(a, b, c);
              H.$$postDigest(function () {
                a = u(a);
                F('enter', 'ng-enter', a, b, c, m, d);
              });
            },
            leave: function (a, b) {
              U(a);
              this.enabled(!1, a);
              H.$$postDigest(function () {
                F('leave', 'ng-leave', u(a), null, null, function () {
                  t.leave(a);
                }, b);
              });
            },
            move: function (a, b, c, d) {
              U(a);
              this.enabled(!1, a);
              t.move(a, b, c);
              H.$$postDigest(function () {
                a = u(a);
                F('move', 'ng-move', a, b, c, m, d);
              });
            },
            addClass: function (a, b, c) {
              a = u(a);
              F('addClass', b, a, null, null, function () {
                t.addClass(a, b);
              }, c);
            },
            removeClass: function (a, b, c) {
              a = u(a);
              F('removeClass', b, a, null, null, function () {
                t.removeClass(a, b);
              }, c);
            },
            setClass: function (a, b, c, d) {
              a = u(a);
              F('setClass', [
                b,
                c
              ], a, null, null, function () {
                t.setClass(a, b, c);
              }, d);
            },
            enabled: function (a, b) {
              switch (arguments.length) {
              case 2:
                if (a)
                  B(b);
                else {
                  var c = b.data(h) || {};
                  c.disabled = !0;
                  b.data(h, c);
                }
                break;
              case 1:
                r.disabled = !a;
                break;
              default:
                a = !r.disabled;
              }
              return !!a;
            }
          };
        }
      ]);
      G.register('', [
        '$window',
        '$sniffer',
        '$timeout',
        '$$animateReflow',
        function (h, r, u, K) {
          function E(a, k) {
            S && S();
            W.push(k);
            S = K(function () {
              p(W, function (a) {
                a();
              });
              W = [];
              S = null;
              M = {};
            });
          }
          function H(a, k) {
            var b = e(a);
            a = g.element(b);
            Y.push(a);
            b = Date.now() + k;
            b <= fa || (u.cancel(ea), fa = b, ea = u(function () {
              J(Y);
              Y = [];
            }, k, !1));
          }
          function J(a) {
            p(a, function (a) {
              (a = a.data(n)) && (a.closeAnimationFn || m)();
            });
          }
          function R(a, k) {
            var b = k ? M[k] : null;
            if (!b) {
              var c = 0, d = 0, e = 0, f = 0, n, Z, $, g;
              p(a, function (a) {
                if (a.nodeType == ba) {
                  a = h.getComputedStyle(a) || {};
                  $ = a[I + z];
                  c = Math.max(L($), c);
                  g = a[I + v];
                  n = a[I + w];
                  d = Math.max(L(n), d);
                  Z = a[q + w];
                  f = Math.max(L(Z), f);
                  var k = L(a[q + z]);
                  0 < k && (k *= parseInt(a[q + l], 10) || 1);
                  e = Math.max(k, e);
                }
              });
              b = {
                total: 0,
                transitionPropertyStyle: g,
                transitionDurationStyle: $,
                transitionDelayStyle: n,
                transitionDelay: d,
                transitionDuration: c,
                animationDelayStyle: Z,
                animationDelay: f,
                animationDuration: e
              };
              k && (M[k] = b);
            }
            return b;
          }
          function L(a) {
            var k = 0;
            a = g.isString(a) ? a.split(/\s*,\s*/) : [];
            p(a, function (a) {
              k = Math.max(parseFloat(a) || 0, k);
            });
            return k;
          }
          function F(a) {
            var k = a.parent(), b = k.data(x);
            b || (k.data(x, ++da), b = da);
            return b + '-' + e(a).getAttribute('class');
          }
          function U(a, k, b, c) {
            var d = F(k), f = d + ' ' + b, p = M[f] ? ++M[f].total : 0, g = {};
            if (0 < p) {
              var h = b + '-stagger', g = d + ' ' + h;
              (d = !M[g]) && k.addClass(h);
              g = R(k, g);
              d && k.removeClass(h);
            }
            c = c || function (a) {
              return a();
            };
            k.addClass(b);
            var h = k.data(n) || {}, l = c(function () {
                return R(k, f);
              });
            c = l.transitionDuration;
            d = l.animationDuration;
            if (0 === c && 0 === d)
              return k.removeClass(b), !1;
            k.data(n, {
              running: h.running || 0,
              itemIndex: p,
              stagger: g,
              timings: l,
              closeAnimationFn: m
            });
            a = 0 < h.running || 'setClass' == a;
            0 < c && B(k, b, a);
            0 < d && (0 < g.animationDelay && 0 === g.animationDuration) && (e(k).style[q] = 'none 0s');
            return !0;
          }
          function B(a, b, c) {
            'ng-enter' != b && ('ng-move' != b && 'ng-leave' != b) && c ? a.addClass(A) : e(a).style[I + v] = 'none';
          }
          function N(a, b) {
            var c = I + v, d = e(a);
            d.style[c] && 0 < d.style[c].length && (d.style[c] = '');
            a.removeClass(A);
          }
          function O(a) {
            var b = q;
            a = e(a);
            a.style[b] && 0 < a.style[b].length && (a.style[b] = '');
          }
          function V(a, b, c, f) {
            function g(a) {
              b.off(z, h);
              b.removeClass(r);
              d(b, c);
              a = e(b);
              for (var X in u)
                a.style.removeProperty(u[X]);
            }
            function h(a) {
              a.stopPropagation();
              var b = a.originalEvent || a;
              a = b.$manualTimeStamp || b.timeStamp || Date.now();
              b = parseFloat(b.elapsedTime.toFixed(C));
              Math.max(a - A, 0) >= x && b >= v && f();
            }
            var l = e(b);
            a = b.data(n);
            if (-1 != l.getAttribute('class').indexOf(c) && a) {
              var r = '';
              p(c.split(' '), function (a, b) {
                r += (0 < b ? ' ' : '') + a + '-active';
              });
              var q = a.stagger, m = a.timings, s = a.itemIndex, v = Math.max(m.transitionDuration, m.animationDuration), w = Math.max(m.transitionDelay, m.animationDelay), x = w * ca, A = Date.now(), z = y + ' ' + G, t = '', u = [];
              if (0 < m.transitionDuration) {
                var B = m.transitionPropertyStyle;
                -1 == B.indexOf('all') && (t += D + 'transition-property: ' + B + ';', t += D + 'transition-duration: ' + m.transitionDurationStyle + ';', u.push(D + 'transition-property'), u.push(D + 'transition-duration'));
              }
              0 < s && (0 < q.transitionDelay && 0 === q.transitionDuration && (t += D + 'transition-delay: ' + T(m.transitionDelayStyle, q.transitionDelay, s) + '; ', u.push(D + 'transition-delay')), 0 < q.animationDelay && 0 === q.animationDuration && (t += D + 'animation-delay: ' + T(m.animationDelayStyle, q.animationDelay, s) + '; ', u.push(D + 'animation-delay')));
              0 < u.length && (m = l.getAttribute('style') || '', l.setAttribute('style', m + ' ' + t));
              b.on(z, h);
              b.addClass(r);
              a.closeAnimationFn = function () {
                g();
                f();
              };
              l = (s * (Math.max(q.animationDelay, q.transitionDelay) || 0) + (w + v) * Q) * ca;
              a.running++;
              H(b, l);
              return g;
            }
            f();
          }
          function T(a, b, c) {
            var d = '';
            p(a.split(','), function (a, X) {
              d += (0 < X ? ',' : '') + (c * b + parseInt(a, 10)) + 's';
            });
            return d;
          }
          function a(a, b, c, e) {
            if (U(a, b, c, e))
              return function (a) {
                a && d(b, c);
              };
          }
          function b(a, b, c, e) {
            if (b.data(n))
              return V(a, b, c, e);
            d(b, c);
            e();
          }
          function c(c, d, e, f) {
            var g = a(c, d, e);
            if (g) {
              var h = g;
              E(d, function () {
                N(d, e);
                O(d);
                h = b(c, d, e, f);
              });
              return function (a) {
                (h || m)(a);
              };
            }
            f();
          }
          function d(a, b) {
            a.removeClass(b);
            var c = a.data(n);
            c && (c.running && c.running--, c.running && 0 !== c.running || a.removeData(n));
          }
          function f(a, b) {
            var c = '';
            a = g.isArray(a) ? a : a.split(/\s+/);
            p(a, function (a, d) {
              a && 0 < a.length && (c += (0 < d ? ' ' : '') + a + b);
            });
            return c;
          }
          var D = '', I, G, q, y;
          s.ontransitionend === P && s.onwebkittransitionend !== P ? (D = '-webkit-', I = 'WebkitTransition', G = 'webkitTransitionEnd transitionend') : (I = 'transition', G = 'transitionend');
          s.onanimationend === P && s.onwebkitanimationend !== P ? (D = '-webkit-', q = 'WebkitAnimation', y = 'webkitAnimationEnd animationend') : (q = 'animation', y = 'animationend');
          var z = 'Duration', v = 'Property', w = 'Delay', l = 'IterationCount', x = '$$ngAnimateKey', n = '$$ngAnimateCSS3Data', A = 'ng-animate-block-transitions', C = 3, Q = 1.5, ca = 1000, M = {}, da = 0, W = [], S, ea = null, fa = 0, Y = [];
          return {
            enter: function (a, b) {
              return c('enter', a, 'ng-enter', b);
            },
            leave: function (a, b) {
              return c('leave', a, 'ng-leave', b);
            },
            move: function (a, b) {
              return c('move', a, 'ng-move', b);
            },
            beforeSetClass: function (b, c, d, e) {
              var g = f(d, '-remove') + ' ' + f(c, '-add'), h = a('setClass', b, g, function (a) {
                  var e = b.attr('class');
                  b.removeClass(d);
                  b.addClass(c);
                  a = a();
                  b.attr('class', e);
                  return a;
                });
              if (h)
                return E(b, function () {
                  N(b, g);
                  O(b);
                  e();
                }), h;
              e();
            },
            beforeAddClass: function (b, c, d) {
              var e = a('addClass', b, f(c, '-add'), function (a) {
                  b.addClass(c);
                  a = a();
                  b.removeClass(c);
                  return a;
                });
              if (e)
                return E(b, function () {
                  N(b, c);
                  O(b);
                  d();
                }), e;
              d();
            },
            setClass: function (a, c, d, e) {
              d = f(d, '-remove');
              c = f(c, '-add');
              return b('setClass', a, d + ' ' + c, e);
            },
            addClass: function (a, c, d) {
              return b('addClass', a, f(c, '-add'), d);
            },
            beforeRemoveClass: function (b, c, d) {
              var e = a('removeClass', b, f(c, '-remove'), function (a) {
                  var d = b.attr('class');
                  b.removeClass(c);
                  a = a();
                  b.attr('class', d);
                  return a;
                });
              if (e)
                return E(b, function () {
                  N(b, c);
                  O(b);
                  d();
                }), e;
              d();
            },
            removeClass: function (a, c, d) {
              return b('removeClass', a, f(c, '-remove'), d);
            }
          };
        }
      ]);
    }
  ]);
}(window, window.angular));
(function (p, h, q) {
  'use strict';
  function E(a) {
    var e = [];
    s(e, h.noop).chars(a);
    return e.join('');
  }
  function k(a) {
    var e = {};
    a = a.split(',');
    var d;
    for (d = 0; d < a.length; d++)
      e[a[d]] = !0;
    return e;
  }
  function F(a, e) {
    function d(a, b, d, g) {
      b = h.lowercase(b);
      if (t[b])
        for (; f.last() && u[f.last()];)
          c('', f.last());
      v[b] && f.last() == b && c('', b);
      (g = w[b] || !!g) || f.push(b);
      var l = {};
      d.replace(G, function (a, b, e, c, d) {
        l[b] = r(e || c || d || '');
      });
      e.start && e.start(b, l, g);
    }
    function c(a, b) {
      var c = 0, d;
      if (b = h.lowercase(b))
        for (c = f.length - 1; 0 <= c && f[c] != b; c--);
      if (0 <= c) {
        for (d = f.length - 1; d >= c; d--)
          e.end && e.end(f[d]);
        f.length = c;
      }
    }
    var b, g, f = [], l = a;
    for (f.last = function () {
        return f[f.length - 1];
      }; a;) {
      g = !0;
      if (f.last() && x[f.last()])
        a = a.replace(RegExp('(.*)<\\s*\\/\\s*' + f.last() + '[^>]*>', 'i'), function (b, a) {
          a = a.replace(H, '$1').replace(I, '$1');
          e.chars && e.chars(r(a));
          return '';
        }), c('', f.last());
      else {
        if (0 === a.indexOf('<!--'))
          b = a.indexOf('--', 4), 0 <= b && a.lastIndexOf('-->', b) === b && (e.comment && e.comment(a.substring(4, b)), a = a.substring(b + 3), g = !1);
        else if (y.test(a)) {
          if (b = a.match(y))
            a = a.replace(b[0], ''), g = !1;
        } else if (J.test(a)) {
          if (b = a.match(z))
            a = a.substring(b[0].length), b[0].replace(z, c), g = !1;
        } else
          K.test(a) && (b = a.match(A)) && (a = a.substring(b[0].length), b[0].replace(A, d), g = !1);
        g && (b = a.indexOf('<'), g = 0 > b ? a : a.substring(0, b), a = 0 > b ? '' : a.substring(b), e.chars && e.chars(r(g)));
      }
      if (a == l)
        throw L('badparse', a);
      l = a;
    }
    c();
  }
  function r(a) {
    if (!a)
      return '';
    var e = M.exec(a);
    a = e[1];
    var d = e[3];
    if (e = e[2])
      n.innerHTML = e.replace(/</g, '&lt;'), e = 'textContent' in n ? n.textContent : n.innerText;
    return a + e + d;
  }
  function B(a) {
    return a.replace(/&/g, '&amp;').replace(N, function (a) {
      return '&#' + a.charCodeAt(0) + ';';
    }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  function s(a, e) {
    var d = !1, c = h.bind(a, a.push);
    return {
      start: function (a, g, f) {
        a = h.lowercase(a);
        !d && x[a] && (d = a);
        d || !0 !== C[a] || (c('<'), c(a), h.forEach(g, function (d, f) {
          var g = h.lowercase(f), k = 'img' === a && 'src' === g || 'background' === g;
          !0 !== O[g] || !0 === D[g] && !e(d, k) || (c(' '), c(f), c('="'), c(B(d)), c('"'));
        }), c(f ? '/>' : '>'));
      },
      end: function (a) {
        a = h.lowercase(a);
        d || !0 !== C[a] || (c('</'), c(a), c('>'));
        a == d && (d = !1);
      },
      chars: function (a) {
        d || c(B(a));
      }
    };
  }
  var L = h.$$minErr('$sanitize'), A = /^<\s*([\w:-]+)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*>/, z = /^<\s*\/\s*([\w:-]+)[^>]*>/, G = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g, K = /^</, J = /^<\s*\//, H = /\x3c!--(.*?)--\x3e/g, y = /<!DOCTYPE([^>]*?)>/i, I = /<!\[CDATA\[(.*?)]]\x3e/g, N = /([^\#-~| |!])/g, w = k('area,br,col,hr,img,wbr');
  p = k('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
  q = k('rp,rt');
  var v = h.extend({}, q, p), t = h.extend({}, p, k('address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul')), u = h.extend({}, q, k('a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var')), x = k('script,style'), C = h.extend({}, w, t, u, v), D = k('background,cite,href,longdesc,src,usemap'), O = h.extend({}, D, k('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width')), n = document.createElement('pre'), M = /^(\s*)([\s\S]*?)(\s*)$/;
  h.module('ngSanitize', []).provider('$sanitize', function () {
    this.$get = [
      '$$sanitizeUri',
      function (a) {
        return function (e) {
          var d = [];
          F(e, s(d, function (c, b) {
            return !/^unsafe/.test(a(c, b));
          }));
          return d.join('');
        };
      }
    ];
  });
  h.module('ngSanitize').filter('linky', [
    '$sanitize',
    function (a) {
      var e = /((ftp|https?):\/\/|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>]/, d = /^mailto:/;
      return function (c, b) {
        function g(a) {
          a && m.push(E(a));
        }
        function f(a, c) {
          m.push('<a ');
          h.isDefined(b) && (m.push('target="'), m.push(b), m.push('" '));
          m.push('href="');
          m.push(a);
          m.push('">');
          g(c);
          m.push('</a>');
        }
        if (!c)
          return c;
        for (var l, k = c, m = [], n, p; l = k.match(e);)
          n = l[0], l[2] == l[3] && (n = 'mailto:' + n), p = l.index, g(k.substr(0, p)), f(n, l[0].replace(d, '')), k = k.substring(p + l[0].length);
        g(k);
        return a(m.join(''));
      };
    }
  ]);
}(window, window.angular));
(function () {
  function g(a) {
    throw a;
  }
  var aa = void 0, j = !0, k = null, l = !1;
  function ba(a) {
    return function () {
      return this[a];
    };
  }
  function o(a) {
    return function () {
      return a;
    };
  }
  var s, ca = this;
  function da() {
  }
  function ea(a) {
    a.mb = function () {
      return a.ed ? a.ed : a.ed = new a();
    };
  }
  function fa(a) {
    var b = typeof a;
    if ('object' == b)
      if (a) {
        if (a instanceof Array)
          return 'array';
        if (a instanceof Object)
          return b;
        var c = Object.prototype.toString.call(a);
        if ('[object Window]' == c)
          return 'object';
        if ('[object Array]' == c || 'number' == typeof a.length && 'undefined' != typeof a.splice && 'undefined' != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable('splice'))
          return 'array';
        if ('[object Function]' == c || 'undefined' != typeof a.call && 'undefined' != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable('call'))
          return 'function';
      } else
        return 'null';
    else if ('function' == b && 'undefined' == typeof a.call)
      return 'object';
    return b;
  }
  function t(a) {
    return a !== aa;
  }
  function ga(a) {
    var b = fa(a);
    return 'array' == b || 'object' == b && 'number' == typeof a.length;
  }
  function u(a) {
    return 'string' == typeof a;
  }
  function ha(a) {
    return 'number' == typeof a;
  }
  function ia(a) {
    var b = typeof a;
    return 'object' == b && a != k || 'function' == b;
  }
  Math.floor(2147483648 * Math.random()).toString(36);
  function ja(a, b, c) {
    return a.call.apply(a.bind, arguments);
  }
  function ka(a, b, c) {
    a || g(Error());
    if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);
      return function () {
        var c = Array.prototype.slice.call(arguments);
        Array.prototype.unshift.apply(c, d);
        return a.apply(b, c);
      };
    }
    return function () {
      return a.apply(b, arguments);
    };
  }
  function v(a, b, c) {
    v = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf('native code') ? ja : ka;
    return v.apply(k, arguments);
  }
  function la(a, b) {
    function c() {
    }
    c.prototype = b.prototype;
    a.Yd = b.prototype;
    a.prototype = new c();
  }
  ;
  function ma(a) {
    a = String(a);
    if (/^\s*$/.test(a) ? 0 : /^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g, '@').replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x10-\x1f\x80-\x9f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g, '')))
      try {
        return eval('(' + a + ')');
      } catch (b) {
      }
    g(Error('Invalid JSON string: ' + a));
  }
  function na() {
    this.gc = aa;
  }
  function oa(a, b, c) {
    switch (typeof b) {
    case 'string':
      pa(b, c);
      break;
    case 'number':
      c.push(isFinite(b) && !isNaN(b) ? b : 'null');
      break;
    case 'boolean':
      c.push(b);
      break;
    case 'undefined':
      c.push('null');
      break;
    case 'object':
      if (b == k) {
        c.push('null');
        break;
      }
      if ('array' == fa(b)) {
        var d = b.length;
        c.push('[');
        for (var e = '', f = 0; f < d; f++)
          c.push(e), e = b[f], oa(a, a.gc ? a.gc.call(b, String(f), e) : e, c), e = ',';
        c.push(']');
        break;
      }
      c.push('{');
      d = '';
      for (f in b)
        Object.prototype.hasOwnProperty.call(b, f) && (e = b[f], 'function' != typeof e && (c.push(d), pa(f, c), c.push(':'), oa(a, a.gc ? a.gc.call(b, f, e) : e, c), d = ','));
      c.push('}');
      break;
    case 'function':
      break;
    default:
      g(Error('Unknown type: ' + typeof b));
    }
  }
  var qa = {
      '"': '\\"',
      '\\': '\\\\',
      '/': '\\/',
      '\b': '\\b',
      '\f': '\\f',
      '\n': '\\n',
      '\r': '\\r',
      '\t': '\\t',
      '\x0B': '\\u000b'
    }, ra = /\uffff/.test('\uffff') ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
  function pa(a, b) {
    b.push('"', a.replace(ra, function (a) {
      if (a in qa)
        return qa[a];
      var b = a.charCodeAt(0), e = '\\u';
      16 > b ? e += '000' : 256 > b ? e += '00' : 4096 > b && (e += '0');
      return qa[a] = e + b.toString(16);
    }), '"');
  }
  ;
  function sa(a) {
    return 'undefined' !== typeof JSON && t(JSON.parse) ? JSON.parse(a) : ma(a);
  }
  function w(a) {
    if ('undefined' !== typeof JSON && t(JSON.stringify))
      a = JSON.stringify(a);
    else {
      var b = [];
      oa(new na(), a, b);
      a = b.join('');
    }
    return a;
  }
  ;
  function ta(a) {
    for (var b = [], c = 0, d = 0; d < a.length; d++) {
      var e = a.charCodeAt(d);
      55296 <= e && 56319 >= e && (e -= 55296, d++, y(d < a.length, 'Surrogate pair missing trail surrogate.'), e = 65536 + (e << 10) + (a.charCodeAt(d) - 56320));
      128 > e ? b[c++] = e : (2048 > e ? b[c++] = e >> 6 | 192 : (65536 > e ? b[c++] = e >> 12 | 224 : (b[c++] = e >> 18 | 240, b[c++] = e >> 12 & 63 | 128), b[c++] = e >> 6 & 63 | 128), b[c++] = e & 63 | 128);
    }
    return b;
  }
  ;
  function z(a, b, c, d) {
    var e;
    d < b ? e = 'at least ' + b : d > c && (e = 0 === c ? 'none' : 'no more than ' + c);
    e && g(Error(a + ' failed: Was called with ' + d + (1 === d ? ' argument.' : ' arguments.') + ' Expects ' + e + '.'));
  }
  function A(a, b, c) {
    var d = '';
    switch (b) {
    case 1:
      d = c ? 'first' : 'First';
      break;
    case 2:
      d = c ? 'second' : 'Second';
      break;
    case 3:
      d = c ? 'third' : 'Third';
      break;
    case 4:
      d = c ? 'fourth' : 'Fourth';
      break;
    default:
      ua.assert(l, 'errorPrefix_ called with argumentNumber > 4.  Need to update it?');
    }
    return a + ' failed: ' + (d + ' argument ');
  }
  function B(a, b, c, d) {
    (!d || t(c)) && 'function' != fa(c) && g(Error(A(a, b, d) + 'must be a valid function.'));
  }
  function va(a, b, c) {
    t(c) && (!ia(c) || c === k) && g(Error(A(a, b, j) + 'must be a valid context object.'));
  }
  ;
  function C(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }
  function wa(a, b) {
    if (Object.prototype.hasOwnProperty.call(a, b))
      return a[b];
  }
  ;
  var ua = {}, xa = /[\[\].#$\/]/, ya = /[\[\].#$]/;
  function za(a) {
    return u(a) && 0 !== a.length && !xa.test(a);
  }
  function Aa(a, b, c) {
    (!c || t(b)) && Ba(A(a, 1, c), b);
  }
  function Ba(a, b, c, d) {
    c || (c = 0);
    d || (d = []);
    t(b) || g(Error(a + 'contains undefined' + Ca(d)));
    'function' == fa(b) && g(Error(a + 'contains a function' + Ca(d) + ' with contents: ' + b.toString()));
    Da(b) && g(Error(a + 'contains ' + b.toString() + Ca(d)));
    1000 < c && g(new TypeError(a + 'contains a cyclic object value (' + d.slice(0, 100).join('.') + '...)'));
    u(b) && (b.length > 10485760 / 3 && 10485760 < ta(b).length) && g(Error(a + 'contains a string greater than 10485760 utf8 bytes' + Ca(d) + ' (\'' + b.substring(0, 50) + '...\')'));
    if (ia(b))
      for (var e in b)
        C(b, e) && ('.priority' !== e && ('.value' !== e && '.sv' !== e && !za(e)) && g(Error(a + 'contains an invalid key (' + e + ')' + Ca(d) + '.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"')), d.push(e), Ba(a, b[e], c + 1, d), d.pop());
  }
  function Ca(a) {
    return 0 == a.length ? '' : ' in property \'' + a.join('.') + '\'';
  }
  function Ea(a, b) {
    ia(b) || g(Error(A(a, 1, l) + ' must be an object containing the children to replace.'));
    Aa(a, b, l);
  }
  function Fa(a, b, c, d) {
    if (!d || t(c))
      c !== k && (!ha(c) && !u(c) && (!ia(c) || !C(c, '.sv'))) && g(Error(A(a, b, d) + 'must be a valid firebase priority (a string, number, or null).'));
  }
  function Ga(a, b, c) {
    if (!c || t(b))
      switch (b) {
      case 'value':
      case 'child_added':
      case 'child_removed':
      case 'child_changed':
      case 'child_moved':
        break;
      default:
        g(Error(A(a, 1, c) + 'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".'));
      }
  }
  function Ha(a, b) {
    t(b) && !za(b) && g(Error(A(a, 2, j) + 'was an invalid key: "' + b + '".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").'));
  }
  function Ia(a, b) {
    (!u(b) || 0 === b.length || ya.test(b)) && g(Error(A(a, 1, l) + 'was an invalid path: "' + b + '". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"'));
  }
  function D(a, b) {
    '.info' === E(b) && g(Error(a + ' failed: Can\'t modify data under /.info/'));
  }
  ;
  function F(a, b, c, d, e, f, h) {
    this.n = a;
    this.path = b;
    this.Ca = c;
    this.da = d;
    this.va = e;
    this.Aa = f;
    this.Ra = h;
    t(this.da) && (t(this.Aa) && t(this.Ca)) && g('Query: Can\'t combine startAt(), endAt(), and limit().');
  }
  F.prototype.Nc = function () {
    z('Query.ref', 0, 0, arguments.length);
    return new H(this.n, this.path);
  };
  F.prototype.ref = F.prototype.Nc;
  F.prototype.Xa = function (a, b) {
    z('Query.on', 2, 4, arguments.length);
    Ga('Query.on', a, l);
    B('Query.on', 2, b, l);
    var c = Ja('Query.on', arguments[2], arguments[3]);
    this.n.Mb(this, a, b, c.cancel, c.T);
    return b;
  };
  F.prototype.on = F.prototype.Xa;
  F.prototype.ub = function (a, b, c) {
    z('Query.off', 0, 3, arguments.length);
    Ga('Query.off', a, j);
    B('Query.off', 2, b, j);
    va('Query.off', 3, c);
    this.n.fc(this, a, b, c);
  };
  F.prototype.off = F.prototype.ub;
  F.prototype.Ld = function (a, b) {
    function c(h) {
      f && (f = l, e.ub(a, c), b.call(d.T, h));
    }
    z('Query.once', 2, 4, arguments.length);
    Ga('Query.once', a, l);
    B('Query.once', 2, b, l);
    var d = Ja('Query.once', arguments[2], arguments[3]), e = this, f = j;
    this.Xa(a, c, function (b) {
      e.ub(a, c);
      d.cancel && d.cancel.call(d.T, b);
    });
  };
  F.prototype.once = F.prototype.Ld;
  F.prototype.Ed = function (a) {
    z('Query.limit', 1, 1, arguments.length);
    (!ha(a) || Math.floor(a) !== a || 0 >= a) && g('Query.limit: First argument must be a positive integer.');
    return new F(this.n, this.path, a, this.da, this.va, this.Aa, this.Ra);
  };
  F.prototype.limit = F.prototype.Ed;
  F.prototype.Ud = function (a, b) {
    z('Query.startAt', 0, 2, arguments.length);
    Fa('Query.startAt', 1, a, j);
    Ha('Query.startAt', b);
    t(a) || (b = a = k);
    return new F(this.n, this.path, this.Ca, a, b, this.Aa, this.Ra);
  };
  F.prototype.startAt = F.prototype.Ud;
  F.prototype.zd = function (a, b) {
    z('Query.endAt', 0, 2, arguments.length);
    Fa('Query.endAt', 1, a, j);
    Ha('Query.endAt', b);
    return new F(this.n, this.path, this.Ca, this.da, this.va, a, b);
  };
  F.prototype.endAt = F.prototype.zd;
  function Ka(a) {
    var b = {};
    t(a.da) && (b.sp = a.da);
    t(a.va) && (b.sn = a.va);
    t(a.Aa) && (b.ep = a.Aa);
    t(a.Ra) && (b.en = a.Ra);
    t(a.Ca) && (b.l = a.Ca);
    t(a.da) && (t(a.va) && a.da === k && a.va === k) && (b.vf = 'l');
    return b;
  }
  F.prototype.La = function () {
    var a = La(Ka(this));
    return '{}' === a ? 'default' : a;
  };
  function Ja(a, b, c) {
    var d = {};
    b && c ? (d.cancel = b, B(a, 3, d.cancel, j), d.T = c, va(a, 4, d.T)) : b && ('object' === typeof b && b !== k ? d.T = b : 'function' === typeof b ? d.cancel = b : g(Error(A(a, 3, j) + 'must either be a cancel callback or a context object.')));
    return d;
  }
  ;
  function J(a) {
    if (a instanceof J)
      return a;
    if (1 == arguments.length) {
      this.m = a.split('/');
      for (var b = 0, c = 0; c < this.m.length; c++)
        0 < this.m[c].length && (this.m[b] = this.m[c], b++);
      this.m.length = b;
      this.Z = 0;
    } else
      this.m = arguments[0], this.Z = arguments[1];
  }
  function E(a) {
    return a.Z >= a.m.length ? k : a.m[a.Z];
  }
  function Ma(a) {
    var b = a.Z;
    b < a.m.length && b++;
    return new J(a.m, b);
  }
  s = J.prototype;
  s.toString = function () {
    for (var a = '', b = this.Z; b < this.m.length; b++)
      '' !== this.m[b] && (a += '/' + this.m[b]);
    return a || '/';
  };
  s.parent = function () {
    if (this.Z >= this.m.length)
      return k;
    for (var a = [], b = this.Z; b < this.m.length - 1; b++)
      a.push(this.m[b]);
    return new J(a, 0);
  };
  s.F = function (a) {
    for (var b = [], c = this.Z; c < this.m.length; c++)
      b.push(this.m[c]);
    if (a instanceof J)
      for (c = a.Z; c < a.m.length; c++)
        b.push(a.m[c]);
    else {
      a = a.split('/');
      for (c = 0; c < a.length; c++)
        0 < a[c].length && b.push(a[c]);
    }
    return new J(b, 0);
  };
  s.f = function () {
    return this.Z >= this.m.length;
  };
  function Na(a, b) {
    var c = E(a);
    if (c === k)
      return b;
    if (c === E(b))
      return Na(Ma(a), Ma(b));
    g('INTERNAL ERROR: innerPath (' + b + ') is not within outerPath (' + a + ')');
  }
  s.contains = function (a) {
    var b = 0;
    if (this.m.length > a.m.length)
      return l;
    for (; b < this.m.length;) {
      if (this.m[b] !== a.m[b])
        return l;
      ++b;
    }
    return j;
  };
  function Oa() {
    this.children = {};
    this.sc = 0;
    this.value = k;
  }
  function Pa(a, b, c) {
    this.Da = a ? a : '';
    this.Ab = b ? b : k;
    this.z = c ? c : new Oa();
  }
  function K(a, b) {
    for (var c = b instanceof J ? b : new J(b), d = a, e; (e = E(c)) !== k;)
      d = new Pa(e, d, wa(d.z.children, e) || new Oa()), c = Ma(c);
    return d;
  }
  s = Pa.prototype;
  s.k = function () {
    return this.z.value;
  };
  function Qa(a, b) {
    y('undefined' !== typeof b);
    a.z.value = b;
    Ra(a);
  }
  s.nb = function () {
    return 0 < this.z.sc;
  };
  s.f = function () {
    return this.k() === k && !this.nb();
  };
  s.w = function (a) {
    for (var b in this.z.children)
      a(new Pa(b, this, this.z.children[b]));
  };
  function Sa(a, b, c, d) {
    c && !d && b(a);
    a.w(function (a) {
      Sa(a, b, j, d);
    });
    c && d && b(a);
  }
  function Ta(a, b, c) {
    for (a = c ? a : a.parent(); a !== k;) {
      if (b(a))
        return j;
      a = a.parent();
    }
    return l;
  }
  s.path = function () {
    return new J(this.Ab === k ? this.Da : this.Ab.path() + '/' + this.Da);
  };
  s.name = ba('Da');
  s.parent = ba('Ab');
  function Ra(a) {
    if (a.Ab !== k) {
      var b = a.Ab, c = a.Da, d = a.f(), e = C(b.z.children, c);
      d && e ? (delete b.z.children[c], b.z.sc--, Ra(b)) : !d && !e && (b.z.children[c] = a.z, b.z.sc++, Ra(b));
    }
  }
  ;
  function Ua(a, b) {
    this.Oa = a ? a : Va;
    this.ca = b ? b : Wa;
  }
  function Va(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  s = Ua.prototype;
  s.oa = function (a, b) {
    return new Ua(this.Oa, this.ca.oa(a, b, this.Oa).copy(k, k, l, k, k));
  };
  s.remove = function (a) {
    return new Ua(this.Oa, this.ca.remove(a, this.Oa).copy(k, k, l, k, k));
  };
  s.get = function (a) {
    for (var b, c = this.ca; !c.f();) {
      b = this.Oa(a, c.key);
      if (0 === b)
        return c.value;
      0 > b ? c = c.left : 0 < b && (c = c.right);
    }
    return k;
  };
  function Xa(a, b) {
    for (var c, d = a.ca, e = k; !d.f();) {
      c = a.Oa(b, d.key);
      if (0 === c) {
        if (d.left.f())
          return e ? e.key : k;
        for (d = d.left; !d.right.f();)
          d = d.right;
        return d.key;
      }
      0 > c ? d = d.left : 0 < c && (e = d, d = d.right);
    }
    g(Error('Attempted to find predecessor key for a nonexistent key.  What gives?'));
  }
  s.f = function () {
    return this.ca.f();
  };
  s.count = function () {
    return this.ca.count();
  };
  s.tb = function () {
    return this.ca.tb();
  };
  s.Va = function () {
    return this.ca.Va();
  };
  s.Ba = function (a) {
    return this.ca.Ba(a);
  };
  s.Ma = function (a) {
    return this.ca.Ma(a);
  };
  s.Ua = function (a) {
    return new Ya(this.ca, a);
  };
  function Ya(a, b) {
    this.md = b;
    for (this.Tb = []; !a.f();)
      this.Tb.push(a), a = a.left;
  }
  function Za(a) {
    if (0 === a.Tb.length)
      return k;
    var b = a.Tb.pop(), c;
    c = a.md ? a.md(b.key, b.value) : {
      key: b.key,
      value: b.value
    };
    for (b = b.right; !b.f();)
      a.Tb.push(b), b = b.left;
    return c;
  }
  function $a(a, b, c, d, e) {
    this.key = a;
    this.value = b;
    this.color = c != k ? c : j;
    this.left = d != k ? d : Wa;
    this.right = e != k ? e : Wa;
  }
  s = $a.prototype;
  s.copy = function (a, b, c, d, e) {
    return new $a(a != k ? a : this.key, b != k ? b : this.value, c != k ? c : this.color, d != k ? d : this.left, e != k ? e : this.right);
  };
  s.count = function () {
    return this.left.count() + 1 + this.right.count();
  };
  s.f = o(l);
  s.Ba = function (a) {
    return this.left.Ba(a) || a(this.key, this.value) || this.right.Ba(a);
  };
  s.Ma = function (a) {
    return this.right.Ma(a) || a(this.key, this.value) || this.left.Ma(a);
  };
  function ab(a) {
    return a.left.f() ? a : ab(a.left);
  }
  s.tb = function () {
    return ab(this).key;
  };
  s.Va = function () {
    return this.right.f() ? this.key : this.right.Va();
  };
  s.oa = function (a, b, c) {
    var d, e;
    e = this;
    d = c(a, e.key);
    e = 0 > d ? e.copy(k, k, k, e.left.oa(a, b, c), k) : 0 === d ? e.copy(k, b, k, k, k) : e.copy(k, k, k, k, e.right.oa(a, b, c));
    return db(e);
  };
  function eb(a) {
    if (a.left.f())
      return Wa;
    !a.left.N() && !a.left.left.N() && (a = fb(a));
    a = a.copy(k, k, k, eb(a.left), k);
    return db(a);
  }
  s.remove = function (a, b) {
    var c, d;
    c = this;
    if (0 > b(a, c.key))
      !c.left.f() && (!c.left.N() && !c.left.left.N()) && (c = fb(c)), c = c.copy(k, k, k, c.left.remove(a, b), k);
    else {
      c.left.N() && (c = gb(c));
      !c.right.f() && (!c.right.N() && !c.right.left.N()) && (c = hb(c), c.left.left.N() && (c = gb(c), c = hb(c)));
      if (0 === b(a, c.key)) {
        if (c.right.f())
          return Wa;
        d = ab(c.right);
        c = c.copy(d.key, d.value, k, k, eb(c.right));
      }
      c = c.copy(k, k, k, k, c.right.remove(a, b));
    }
    return db(c);
  };
  s.N = ba('color');
  function db(a) {
    a.right.N() && !a.left.N() && (a = ib(a));
    a.left.N() && a.left.left.N() && (a = gb(a));
    a.left.N() && a.right.N() && (a = hb(a));
    return a;
  }
  function fb(a) {
    a = hb(a);
    a.right.left.N() && (a = a.copy(k, k, k, k, gb(a.right)), a = ib(a), a = hb(a));
    return a;
  }
  function ib(a) {
    var b;
    b = a.copy(k, k, j, k, a.right.left);
    return a.right.copy(k, k, a.color, b, k);
  }
  function gb(a) {
    var b;
    b = a.copy(k, k, j, a.left.right, k);
    return a.left.copy(k, k, a.color, k, b);
  }
  function hb(a) {
    var b, c;
    b = a.left.copy(k, k, !a.left.color, k, k);
    c = a.right.copy(k, k, !a.right.color, k, k);
    return a.copy(k, k, !a.color, b, c);
  }
  function jb() {
  }
  s = jb.prototype;
  s.copy = function () {
    return this;
  };
  s.oa = function (a, b) {
    return new $a(a, b, aa, aa, aa);
  };
  s.remove = function () {
    return this;
  };
  s.count = o(0);
  s.f = o(j);
  s.Ba = o(l);
  s.Ma = o(l);
  s.tb = o(k);
  s.Va = o(k);
  s.N = o(l);
  var Wa = new jb();
  function kb(a) {
    this.Pb = a;
    this.bc = 'firebase:';
  }
  kb.prototype.set = function (a, b) {
    b == k ? this.Pb.removeItem(this.bc + a) : this.Pb.setItem(this.bc + a, w(b));
  };
  kb.prototype.get = function (a) {
    a = this.Pb.getItem(this.bc + a);
    return a == k ? k : sa(a);
  };
  kb.prototype.remove = function (a) {
    this.Pb.removeItem(this.bc + a);
  };
  function lb() {
    this.ib = {};
  }
  lb.prototype.set = function (a, b) {
    b == k ? delete this.ib[a] : this.ib[a] = b;
  };
  lb.prototype.get = function (a) {
    return C(this.ib, a) ? this.ib[a] : k;
  };
  lb.prototype.remove = function (a) {
    delete this.ib[a];
  };
  function mb(a) {
    try {
      if ('undefined' !== typeof window && 'undefined' !== typeof window[a]) {
        var b = window[a];
        b.setItem('firebase:sentinel', 'cache');
        b.removeItem('firebase:sentinel');
        return new kb(b);
      }
    } catch (c) {
    }
    return new lb();
  }
  var nb = mb('localStorage'), ob = mb('sessionStorage');
  function pb(a, b, c, d) {
    this.host = a.toLowerCase();
    this.domain = this.host.substr(this.host.indexOf('.') + 1);
    this.hc = b;
    this.Sb = c;
    this.fa = d || nb.get('host:' + a) || this.host;
  }
  function qb(a, b) {
    b !== a.fa && (a.fa = b, 's-' === a.fa.substr(0, 2) && nb.set('host:' + a.host, a.fa));
  }
  pb.prototype.toString = function () {
    return (this.hc ? 'https://' : 'http://') + this.host;
  };
  function rb() {
  }
  ;
  function sb() {
    this.B = [];
    this.rc = [];
    this.ud = [];
    this.Zb = [];
    this.Zb[0] = 128;
    for (var a = 1; 64 > a; ++a)
      this.Zb[a] = 0;
    this.reset();
  }
  la(sb, rb);
  sb.prototype.reset = function () {
    this.B[0] = 1732584193;
    this.B[1] = 4023233417;
    this.B[2] = 2562383102;
    this.B[3] = 271733878;
    this.B[4] = 3285377520;
    this.Vc = this.ob = 0;
  };
  function tb(a, b) {
    var c;
    c || (c = 0);
    for (var d = a.ud, e = c; e < c + 64; e += 4)
      d[e / 4] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3];
    for (e = 16; 80 > e; e++) {
      var f = d[e - 3] ^ d[e - 8] ^ d[e - 14] ^ d[e - 16];
      d[e] = (f << 1 | f >>> 31) & 4294967295;
    }
    c = a.B[0];
    for (var h = a.B[1], i = a.B[2], m = a.B[3], n = a.B[4], p, e = 0; 80 > e; e++)
      40 > e ? 20 > e ? (f = m ^ h & (i ^ m), p = 1518500249) : (f = h ^ i ^ m, p = 1859775393) : 60 > e ? (f = h & i | m & (h | i), p = 2400959708) : (f = h ^ i ^ m, p = 3395469782), f = (c << 5 | c >>> 27) + f + n + p + d[e] & 4294967295, n = m, m = i, i = (h << 30 | h >>> 2) & 4294967295, h = c, c = f;
    a.B[0] = a.B[0] + c & 4294967295;
    a.B[1] = a.B[1] + h & 4294967295;
    a.B[2] = a.B[2] + i & 4294967295;
    a.B[3] = a.B[3] + m & 4294967295;
    a.B[4] = a.B[4] + n & 4294967295;
  }
  sb.prototype.update = function (a, b) {
    t(b) || (b = a.length);
    var c = this.rc, d = this.ob, e = 0;
    if (u(a))
      for (; e < b;)
        c[d++] = a.charCodeAt(e++), 64 == d && (tb(this, c), d = 0);
    else
      for (; e < b;)
        c[d++] = a[e++], 64 == d && (tb(this, c), d = 0);
    this.ob = d;
    this.Vc += b;
  };
  var ub = Array.prototype, vb = ub.forEach ? function (a, b, c) {
      ub.forEach.call(a, b, c);
    } : function (a, b, c) {
      for (var d = a.length, e = u(a) ? a.split('') : a, f = 0; f < d; f++)
        f in e && b.call(c, e[f], f, a);
    }, wb = ub.map ? function (a, b, c) {
      return ub.map.call(a, b, c);
    } : function (a, b, c) {
      for (var d = a.length, e = Array(d), f = u(a) ? a.split('') : a, h = 0; h < d; h++)
        h in f && (e[h] = b.call(c, f[h], h, a));
      return e;
    }, xb = ub.every ? function (a, b, c) {
      return ub.every.call(a, b, c);
    } : function (a, b, c) {
      for (var d = a.length, e = u(a) ? a.split('') : a, f = 0; f < d; f++)
        if (f in e && !b.call(c, e[f], f, a))
          return l;
      return j;
    };
  var yb, zb, Ab, Bb;
  function Cb() {
    return ca.navigator ? ca.navigator.userAgent : k;
  }
  Bb = Ab = zb = yb = l;
  var Db;
  if (Db = Cb()) {
    var Eb = ca.navigator;
    yb = 0 == Db.indexOf('Opera');
    zb = !yb && -1 != Db.indexOf('MSIE');
    Ab = !yb && -1 != Db.indexOf('WebKit');
    Bb = !yb && !Ab && 'Gecko' == Eb.product;
  }
  var Fb = zb, Gb = Bb, Hb = Ab;
  var Ib;
  if (yb && ca.opera) {
    var Jb = ca.opera.version;
    'function' == typeof Jb && Jb();
  } else
    Gb ? Ib = /rv\:([^\);]+)(\)|;)/ : Fb ? Ib = /MSIE\s+([^\);]+)(\)|;)/ : Hb && (Ib = /WebKit\/(\S+)/), Ib && Ib.exec(Cb());
  var Kb = k, Lb = k;
  function Mb(a, b) {
    ga(a) || g(Error('encodeByteArray takes an array as a parameter'));
    if (!Kb) {
      Kb = {};
      Lb = {};
      for (var c = 0; 65 > c; c++)
        Kb[c] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.charAt(c), Lb[c] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.'.charAt(c);
    }
    for (var c = b ? Lb : Kb, d = [], e = 0; e < a.length; e += 3) {
      var f = a[e], h = e + 1 < a.length, i = h ? a[e + 1] : 0, m = e + 2 < a.length, n = m ? a[e + 2] : 0, p = f >> 2, f = (f & 3) << 4 | i >> 4, i = (i & 15) << 2 | n >> 6, n = n & 63;
      m || (n = 64, h || (i = 64));
      d.push(c[p], c[f], c[i], c[n]);
    }
    return d.join('');
  }
  ;
  var Nb, Ob = 1;
  Nb = function () {
    return Ob++;
  };
  function y(a, b) {
    a || g(Error('Firebase INTERNAL ASSERT FAILED:' + b));
  }
  function Pb(a) {
    var b = ta(a), a = new sb();
    a.update(b);
    var b = [], c = 8 * a.Vc;
    56 > a.ob ? a.update(a.Zb, 56 - a.ob) : a.update(a.Zb, 64 - (a.ob - 56));
    for (var d = 63; 56 <= d; d--)
      a.rc[d] = c & 255, c /= 256;
    tb(a, a.rc);
    for (d = c = 0; 5 > d; d++)
      for (var e = 24; 0 <= e; e -= 8)
        b[c++] = a.B[d] >> e & 255;
    return Mb(b);
  }
  function Qb() {
    for (var a = '', b = 0; b < arguments.length; b++)
      a = ga(arguments[b]) ? a + Qb.apply(k, arguments[b]) : 'object' === typeof arguments[b] ? a + w(arguments[b]) : a + arguments[b], a += ' ';
    return a;
  }
  var Rb = k, Sb = j;
  function L() {
    Sb === j && (Sb = l, Rb === k && ob.get('logging_enabled') === j && Tb(j));
    if (Rb) {
      var a = Qb.apply(k, arguments);
      Rb(a);
    }
  }
  function Ub(a) {
    return function () {
      L(a, arguments);
    };
  }
  function Vb() {
    if ('undefined' !== typeof console) {
      var a = 'FIREBASE INTERNAL ERROR: ' + Qb.apply(k, arguments);
      'undefined' !== typeof console.error ? console.error(a) : console.log(a);
    }
  }
  function Wb() {
    var a = Qb.apply(k, arguments);
    g(Error('FIREBASE FATAL ERROR: ' + a));
  }
  function M() {
    if ('undefined' !== typeof console) {
      var a = 'FIREBASE WARNING: ' + Qb.apply(k, arguments);
      'undefined' !== typeof console.warn ? console.warn(a) : console.log(a);
    }
  }
  function Da(a) {
    return ha(a) && (a != a || a == Number.POSITIVE_INFINITY || a == Number.NEGATIVE_INFINITY);
  }
  function Xb(a, b) {
    return a !== b ? a === k ? -1 : b === k ? 1 : typeof a !== typeof b ? 'number' === typeof a ? -1 : 1 : a > b ? 1 : -1 : 0;
  }
  function Yb(a, b) {
    if (a === b)
      return 0;
    var c = Zb(a), d = Zb(b);
    return c !== k ? d !== k ? c - d : -1 : d !== k ? 1 : a < b ? -1 : 1;
  }
  function $b(a, b) {
    if (b && a in b)
      return b[a];
    g(Error('Missing required key (' + a + ') in object: ' + w(b)));
  }
  function La(a) {
    if ('object' !== typeof a || a === k)
      return w(a);
    var b = [], c;
    for (c in a)
      b.push(c);
    b.sort();
    c = '{';
    for (var d = 0; d < b.length; d++)
      0 !== d && (c += ','), c += w(b[d]), c += ':', c += La(a[b[d]]);
    return c + '}';
  }
  function ac(a, b) {
    if (a.length <= b)
      return [a];
    for (var c = [], d = 0; d < a.length; d += b)
      d + b > a ? c.push(a.substring(d, a.length)) : c.push(a.substring(d, d + b));
    return c;
  }
  function bc(a, b) {
    if ('array' == fa(a))
      for (var c = 0; c < a.length; ++c)
        b(c, a[c]);
    else
      cc(a, b);
  }
  function dc(a) {
    y(!Da(a));
    var b, c, d, e;
    0 === a ? (d = c = 0, b = -Infinity === 1 / a ? 1 : 0) : (b = 0 > a, a = Math.abs(a), a >= Math.pow(2, -1022) ? (d = Math.min(Math.floor(Math.log(a) / Math.LN2), 1023), c = d + 1023, d = Math.round(a * Math.pow(2, 52 - d) - Math.pow(2, 52))) : (c = 0, d = Math.round(a / Math.pow(2, -1074))));
    e = [];
    for (a = 52; a; a -= 1)
      e.push(d % 2 ? 1 : 0), d = Math.floor(d / 2);
    for (a = 11; a; a -= 1)
      e.push(c % 2 ? 1 : 0), c = Math.floor(c / 2);
    e.push(b ? 1 : 0);
    e.reverse();
    b = e.join('');
    c = '';
    for (a = 0; 64 > a; a += 8)
      d = parseInt(b.substr(a, 8), 2).toString(16), 1 === d.length && (d = '0' + d), c += d;
    return c.toLowerCase();
  }
  var ec = /^-?\d{1,10}$/;
  function Zb(a) {
    return ec.test(a) && (a = Number(a), -2147483648 <= a && 2147483647 >= a) ? a : k;
  }
  function fc(a) {
    try {
      a();
    } catch (b) {
      setTimeout(function () {
        g(b);
      });
    }
  }
  ;
  function gc(a, b) {
    this.D = a;
    y(this.D !== k, 'LeafNode shouldn\'t be created with null value.');
    this.Ya = 'undefined' !== typeof b ? b : k;
  }
  s = gc.prototype;
  s.M = o(j);
  s.j = ba('Ya');
  s.Ga = function (a) {
    return new gc(this.D, a);
  };
  s.L = function () {
    return N;
  };
  s.Q = function (a) {
    return E(a) === k ? this : N;
  };
  s.ea = o(k);
  s.H = function (a, b) {
    return new O().H(a, b).Ga(this.Ya);
  };
  s.ya = function (a, b) {
    var c = E(a);
    return c === k ? b : this.H(c, N.ya(Ma(a), b));
  };
  s.f = o(l);
  s.Ub = o(0);
  s.V = function (a) {
    return a && this.j() !== k ? {
      '.value': this.k(),
      '.priority': this.j()
    } : this.k();
  };
  s.hash = function () {
    var a = '';
    this.j() !== k && (a += 'priority:' + hc(this.j()) + ':');
    var b = typeof this.D, a = a + (b + ':'), a = 'number' === b ? a + dc(this.D) : a + this.D;
    return Pb(a);
  };
  s.k = ba('D');
  s.toString = function () {
    return 'string' === typeof this.D ? '"' + this.D + '"' : this.D;
  };
  function ic(a, b) {
    return Xb(a.ia, b.ia) || Yb(a.name, b.name);
  }
  function jc(a, b) {
    return Yb(a.name, b.name);
  }
  function kc(a, b) {
    return Yb(a, b);
  }
  ;
  function O(a, b) {
    this.o = a || new Ua(kc);
    this.Ya = 'undefined' !== typeof b ? b : k;
  }
  s = O.prototype;
  s.M = o(l);
  s.j = ba('Ya');
  s.Ga = function (a) {
    return new O(this.o, a);
  };
  s.H = function (a, b) {
    var c = this.o.remove(a);
    b && b.f() && (b = k);
    b !== k && (c = c.oa(a, b));
    return b && b.j() !== k ? new lc(c, k, this.Ya) : new O(c, this.Ya);
  };
  s.ya = function (a, b) {
    var c = E(a);
    if (c === k)
      return b;
    var d = this.L(c).ya(Ma(a), b);
    return this.H(c, d);
  };
  s.f = function () {
    return this.o.f();
  };
  s.Ub = function () {
    return this.o.count();
  };
  var mc = /^\d+$/;
  s = O.prototype;
  s.V = function (a) {
    if (this.f())
      return k;
    var b = {}, c = 0, d = 0, e = j;
    this.w(function (f, h) {
      b[f] = h.V(a);
      c++;
      e && mc.test(f) ? d = Math.max(d, Number(f)) : e = l;
    });
    if (!a && e && d < 2 * c) {
      var f = [], h;
      for (h in b)
        f[h] = b[h];
      return f;
    }
    a && this.j() !== k && (b['.priority'] = this.j());
    return b;
  };
  s.hash = function () {
    var a = '';
    this.j() !== k && (a += 'priority:' + hc(this.j()) + ':');
    this.w(function (b, c) {
      var d = c.hash();
      '' !== d && (a += ':' + b + ':' + d);
    });
    return '' === a ? '' : Pb(a);
  };
  s.L = function (a) {
    a = this.o.get(a);
    return a === k ? N : a;
  };
  s.Q = function (a) {
    var b = E(a);
    return b === k ? this : this.L(b).Q(Ma(a));
  };
  s.ea = function (a) {
    return Xa(this.o, a);
  };
  s.cd = function () {
    return this.o.tb();
  };
  s.dd = function () {
    return this.o.Va();
  };
  s.w = function (a) {
    return this.o.Ba(a);
  };
  s.yc = function (a) {
    return this.o.Ma(a);
  };
  s.Ua = function () {
    return this.o.Ua();
  };
  s.toString = function () {
    var a = '{', b = j;
    this.w(function (c, d) {
      b ? b = l : a += ', ';
      a += '"' + c + '" : ' + d.toString();
    });
    return a += '}';
  };
  var N = new O();
  function lc(a, b, c) {
    O.call(this, a, c);
    b === k && (b = new Ua(ic), a.Ba(function (a, c) {
      b = b.oa({
        name: a,
        ia: c.j()
      }, c);
    }));
    this.ua = b;
  }
  la(lc, O);
  s = lc.prototype;
  s.H = function (a, b) {
    var c = this.L(a), d = this.o, e = this.ua;
    c !== k && (d = d.remove(a), e = e.remove({
      name: a,
      ia: c.j()
    }));
    b && b.f() && (b = k);
    b !== k && (d = d.oa(a, b), e = e.oa({
      name: a,
      ia: b.j()
    }, b));
    return new lc(d, e, this.j());
  };
  s.ea = function (a, b) {
    var c = Xa(this.ua, {
        name: a,
        ia: b.j()
      });
    return c ? c.name : k;
  };
  s.w = function (a) {
    return this.ua.Ba(function (b, c) {
      return a(b.name, c);
    });
  };
  s.yc = function (a) {
    return this.ua.Ma(function (b, c) {
      return a(b.name, c);
    });
  };
  s.Ua = function () {
    return this.ua.Ua(function (a, b) {
      return {
        key: a.name,
        value: b
      };
    });
  };
  s.cd = function () {
    return this.ua.f() ? k : this.ua.tb().name;
  };
  s.dd = function () {
    return this.ua.f() ? k : this.ua.Va().name;
  };
  function Q(a, b) {
    if (a === k)
      return N;
    var c = k;
    'object' === typeof a && '.priority' in a ? c = a['.priority'] : 'undefined' !== typeof b && (c = b);
    y(c === k || 'string' === typeof c || 'number' === typeof c || 'object' === typeof c && '.sv' in c);
    'object' === typeof a && ('.value' in a && a['.value'] !== k) && (a = a['.value']);
    if ('object' !== typeof a || '.sv' in a)
      return new gc(a, c);
    if (a instanceof Array) {
      var d = N;
      cc(a, function (b, c) {
        if (C(a, c) && '.' !== c.substring(0, 1)) {
          var e = Q(b);
          if (e.M() || !e.f())
            d = d.H(c, e);
        }
      });
      return d.Ga(c);
    }
    var e = [], f = {}, h = l;
    bc(a, function (b, c) {
      if ('string' !== typeof c || '.' !== c.substring(0, 1)) {
        var d = Q(a[c]);
        d.f() || (h = h || d.j() !== k, e.push({
          name: c,
          ia: d.j()
        }), f[c] = d);
      }
    });
    var i = nc(e, f, l);
    if (h) {
      var m = nc(e, f, j);
      return new lc(i, m, c);
    }
    return new O(i, c);
  }
  var oc = Math.log(2);
  function qc(a) {
    this.count = parseInt(Math.log(a + 1) / oc);
    this.$c = this.count - 1;
    this.wd = a + 1 & parseInt(Array(this.count + 1).join('1'), 2);
  }
  function nc(a, b, c) {
    function d(d, f) {
      var h = n - d, p = n;
      n -= d;
      var q = a[h].name, h = new $a(c ? a[h] : q, b[q], f, k, e(h + 1, p));
      i ? i.left = h : m = h;
      i = h;
    }
    function e(d, f) {
      var h = f - d;
      if (0 == h)
        return k;
      if (1 == h) {
        var h = a[d].name, i = c ? a[d] : h;
        return new $a(i, b[h], l, k, k);
      }
      var i = parseInt(h / 2) + d, m = e(d, i), n = e(i + 1, f), h = a[i].name, i = c ? a[i] : h;
      return new $a(i, b[h], l, m, n);
    }
    var f = c ? ic : jc;
    a.sort(f);
    var h, f = new qc(a.length), i = k, m = k, n = a.length;
    for (h = 0; h < f.count; ++h) {
      var p = !(f.wd & 1 << f.$c);
      f.$c--;
      var q = Math.pow(2, f.count - (h + 1));
      p ? d(q, l) : (d(q, l), d(q, j));
    }
    h = m;
    f = c ? ic : kc;
    return h !== k ? new Ua(f, h) : new Ua(f);
  }
  function hc(a) {
    return 'number' === typeof a ? 'number:' + dc(a) : 'string:' + a;
  }
  ;
  function R(a, b) {
    this.z = a;
    this.ec = b;
  }
  R.prototype.V = function () {
    z('Firebase.DataSnapshot.val', 0, 0, arguments.length);
    return this.z.V();
  };
  R.prototype.val = R.prototype.V;
  R.prototype.Ad = function () {
    z('Firebase.DataSnapshot.exportVal', 0, 0, arguments.length);
    return this.z.V(j);
  };
  R.prototype.exportVal = R.prototype.Ad;
  R.prototype.F = function (a) {
    z('Firebase.DataSnapshot.child', 0, 1, arguments.length);
    ha(a) && (a = String(a));
    Ia('Firebase.DataSnapshot.child', a);
    var b = new J(a), c = this.ec.F(b);
    return new R(this.z.Q(b), c);
  };
  R.prototype.child = R.prototype.F;
  R.prototype.Cc = function (a) {
    z('Firebase.DataSnapshot.hasChild', 1, 1, arguments.length);
    Ia('Firebase.DataSnapshot.hasChild', a);
    var b = new J(a);
    return !this.z.Q(b).f();
  };
  R.prototype.hasChild = R.prototype.Cc;
  R.prototype.j = function () {
    z('Firebase.DataSnapshot.getPriority', 0, 0, arguments.length);
    return this.z.j();
  };
  R.prototype.getPriority = R.prototype.j;
  R.prototype.forEach = function (a) {
    z('Firebase.DataSnapshot.forEach', 1, 1, arguments.length);
    B('Firebase.DataSnapshot.forEach', 1, a, l);
    if (this.z.M())
      return l;
    var b = this;
    return this.z.w(function (c, d) {
      return a(new R(d, b.ec.F(c)));
    });
  };
  R.prototype.forEach = R.prototype.forEach;
  R.prototype.nb = function () {
    z('Firebase.DataSnapshot.hasChildren', 0, 0, arguments.length);
    return this.z.M() ? l : !this.z.f();
  };
  R.prototype.hasChildren = R.prototype.nb;
  R.prototype.name = function () {
    z('Firebase.DataSnapshot.name', 0, 0, arguments.length);
    return this.ec.name();
  };
  R.prototype.name = R.prototype.name;
  R.prototype.Ub = function () {
    z('Firebase.DataSnapshot.numChildren', 0, 0, arguments.length);
    return this.z.Ub();
  };
  R.prototype.numChildren = R.prototype.Ub;
  R.prototype.Nc = function () {
    z('Firebase.DataSnapshot.ref', 0, 0, arguments.length);
    return this.ec;
  };
  R.prototype.ref = R.prototype.Nc;
  function rc(a) {
    y('array' == fa(a) && 0 < a.length);
    this.vd = a;
    this.sb = {};
  }
  rc.prototype.Ac = function () {
  };
  rc.prototype.Xc = function (a) {
    for (var b = this.sb[a] || [], c = 0; c < b.length; c++)
      b[c].X.apply(b[c].T, Array.prototype.slice.call(arguments, 1));
  };
  rc.prototype.Xa = function (a, b, c) {
    sc(this, a);
    this.sb[a] = this.sb[a] || [];
    this.sb[a].push({
      X: b,
      T: c
    });
    (a = this.Ac(a)) && b.apply(c, a);
  };
  rc.prototype.ub = function (a, b, c) {
    sc(this, a);
    for (var a = this.sb[a] || [], d = 0; d < a.length; d++)
      if (a[d].X === b && (!c || c === a[d].T)) {
        a.splice(d, 1);
        break;
      }
  };
  function sc(a, b) {
    var c = a.vd, d;
    a: {
      d = function (a) {
        return a === b;
      };
      for (var e = c.length, f = u(c) ? c.split('') : c, h = 0; h < e; h++)
        if (h in f && d.call(aa, f[h])) {
          d = h;
          break a;
        }
      d = -1;
    }
    y(0 > d ? k : u(c) ? c.charAt(d) : c[d], 'Unknown event: ' + b);
  }
  ;
  function tc() {
    rc.call(this, ['visible']);
    var a, b;
    'undefined' !== typeof document && 'undefined' !== typeof document.addEventListener && ('undefined' !== typeof document.hidden ? (b = 'visibilitychange', a = 'hidden') : 'undefined' !== typeof document.mozHidden ? (b = 'mozvisibilitychange', a = 'mozHidden') : 'undefined' !== typeof document.msHidden ? (b = 'msvisibilitychange', a = 'msHidden') : 'undefined' !== typeof document.webkitHidden && (b = 'webkitvisibilitychange', a = 'webkitHidden'));
    this.gb = j;
    if (b) {
      var c = this;
      document.addEventListener(b, function () {
        var b = !document[a];
        if (b !== c.gb) {
          c.gb = b;
          c.Xc('visible', b);
        }
      }, l);
    }
  }
  la(tc, rc);
  ea(tc);
  tc.prototype.Ac = function (a) {
    y('visible' === a);
    return [this.gb];
  };
  function uc(a) {
    this.Jc = a;
    this.ac = [];
    this.Qa = 0;
    this.tc = -1;
    this.Ka = k;
  }
  ;
  function cc(a, b) {
    for (var c in a)
      b.call(aa, a[c], c, a);
  }
  function vc(a) {
    var b = {}, c;
    for (c in a)
      b[c] = a[c];
    return b;
  }
  ;
  function wc() {
    this.jb = {};
  }
  function xc(a, b, c) {
    t(c) || (c = 1);
    C(a.jb, b) || (a.jb[b] = 0);
    a.jb[b] += c;
  }
  wc.prototype.get = function () {
    return vc(this.jb);
  };
  function yc(a) {
    this.xd = a;
    this.Qb = k;
  }
  yc.prototype.get = function () {
    var a = this.xd.get(), b = vc(a);
    if (this.Qb)
      for (var c in this.Qb)
        b[c] -= this.Qb[c];
    this.Qb = a;
    return b;
  };
  function zc(a, b) {
    this.Sc = {};
    this.kc = new yc(a);
    this.u = b;
    setTimeout(v(this.kd, this), 10 + 60000 * Math.random());
  }
  zc.prototype.kd = function () {
    var a = this.kc.get(), b = {}, c = l, d;
    for (d in a)
      0 < a[d] && C(this.Sc, d) && (b[d] = a[d], c = j);
    c && (a = this.u, a.P && (b = { c: b }, a.e('reportStats', b), a.Fa('s', b)));
    setTimeout(v(this.kd, this), 600000 * Math.random());
  };
  var Ac = {}, Bc = {};
  function Cc(a) {
    a = a.toString();
    Ac[a] || (Ac[a] = new wc());
    return Ac[a];
  }
  ;
  function Dc() {
    this.set = {};
  }
  s = Dc.prototype;
  s.add = function (a, b) {
    this.set[a] = b !== k ? b : j;
  };
  s.contains = function (a) {
    return C(this.set, a);
  };
  s.get = function (a) {
    return this.contains(a) ? this.set[a] : aa;
  };
  s.remove = function (a) {
    delete this.set[a];
  };
  s.f = function () {
    var a;
    a: {
      for (a in this.set) {
        a = l;
        break a;
      }
      a = j;
    }
    return a;
  };
  s.count = function () {
    var a = 0, b;
    for (b in this.set)
      a++;
    return a;
  };
  function Ec(a, b) {
    for (var c in a.set)
      C(a.set, c) && b(c, a.set[c]);
  }
  s.keys = function () {
    var a = [], b;
    for (b in this.set)
      C(this.set, b) && a.push(b);
    return a;
  };
  var Fc = 'pLPCommand', Gc = 'pRTLPCB';
  function Hc(a, b, c) {
    this.uc = a;
    this.e = Ub(a);
    this.Xd = b;
    this.$ = Cc(b);
    this.jc = c;
    this.kb = l;
    this.Lb = function (a) {
      b.host !== b.fa && (a.ns = b.Sb);
      var c = [], f;
      for (f in a)
        a.hasOwnProperty(f) && c.push(f + '=' + a[f]);
      return (b.hc ? 'https://' : 'http://') + b.fa + '/.lp?' + c.join('&');
    };
  }
  var Ic, Jc;
  Hc.prototype.open = function (a, b) {
    function c() {
      if (!d.Ja) {
        d.ka = new Kc(function (a, b, c, e, f) {
          xc(d.$, 'bytes_received', w(arguments).length);
          if (d.ka)
            if (d.ba && (clearTimeout(d.ba), d.ba = k), d.kb = j, 'start' == a)
              d.id = b, d.jd = c;
            else if ('close' === a)
              if (b) {
                d.ka.ic = l;
                var h = d.fd;
                h.tc = b;
                h.Ka = function () {
                  d.Ea();
                };
                h.tc < h.Qa && (h.Ka(), h.Ka = k);
              } else
                d.Ea();
            else
              g(Error('Unrecognized command received: ' + a));
        }, function (a, b) {
          xc(d.$, 'bytes_received', w(arguments).length);
          var c = d.fd;
          for (c.ac[a] = b; c.ac[c.Qa];) {
            var e = c.ac[c.Qa];
            delete c.ac[c.Qa];
            for (var f = 0; f < e.length; ++f)
              if (e[f]) {
                var h = c;
                fc(function () {
                  h.Jc(e[f]);
                });
              }
            if (c.Qa === c.tc) {
              c.Ka && (clearTimeout(c.Ka), c.Ka(), c.Ka = k);
              break;
            }
            c.Qa++;
          }
        }, function () {
          d.Ea();
        }, d.Lb);
        var a = { start: 't' };
        a.ser = Math.floor(100000000 * Math.random());
        d.ka.mc && (a.cb = d.ka.mc);
        a.v = '5';
        d.jc && (a.s = d.jc);
        a = d.Lb(a);
        d.e('Connecting via long-poll to ' + a);
        Lc(d.ka, a, function () {
        });
      }
    }
    this.Zc = 0;
    this.R = b;
    this.fd = new uc(a);
    this.Ja = l;
    var d = this;
    this.ba = setTimeout(function () {
      d.e('Timed out trying to connect.');
      d.Ea();
      d.ba = k;
    }, 30000);
    if ('complete' === document.readyState)
      c();
    else {
      var e = l, f = function () {
          document.body ? e || (e = j, c()) : setTimeout(f, 10);
        };
      document.addEventListener ? (document.addEventListener('DOMContentLoaded', f, l), window.addEventListener('load', f, l)) : document.attachEvent && (document.attachEvent('onreadystatechange', function () {
        'complete' === document.readyState && f();
      }, l), window.attachEvent('onload', f, l));
    }
  };
  Hc.prototype.start = function () {
    var a = this.ka, b = this.jd;
    a.Gd = this.id;
    a.Hd = b;
    for (a.pc = j; Mc(a););
    a = this.id;
    b = this.jd;
    this.Wa = document.createElement('iframe');
    var c = { dframe: 't' };
    c.id = a;
    c.pw = b;
    a = this.Lb(c);
    this.Wa.src = a;
    this.Wa.style.display = 'none';
    document.body.appendChild(this.Wa);
  };
  Hc.isAvailable = function () {
    return !Jc && !('object' === typeof window && window.chrome && window.chrome.extension && !/^chrome/.test(window.location.href)) && !('object' === typeof Windows && 'object' === typeof Windows.Wd) && (Ic || j);
  };
  Hc.prototype.Ib = function () {
    this.Ja = j;
    this.ka && (this.ka.close(), this.ka = k);
    this.Wa && (document.body.removeChild(this.Wa), this.Wa = k);
    this.ba && (clearTimeout(this.ba), this.ba = k);
  };
  Hc.prototype.Ea = function () {
    this.Ja || (this.e('Longpoll is closing itself'), this.Ib(), this.R && (this.R(this.kb), this.R = k));
  };
  Hc.prototype.close = function () {
    this.Ja || (this.e('Longpoll is being closed.'), this.Ib());
  };
  Hc.prototype.send = function (a) {
    a = w(a);
    xc(this.$, 'bytes_sent', a.length);
    for (var a = ta(a), a = Mb(a, j), a = ac(a, 1840), b = 0; b < a.length; b++) {
      var c = this.ka;
      c.Cb.push({
        Qd: this.Zc,
        Vd: a.length,
        ad: a[b]
      });
      c.pc && Mc(c);
      this.Zc++;
    }
  };
  function Kc(a, b, c, d) {
    this.Lb = d;
    this.ha = c;
    this.Lc = new Dc();
    this.Cb = [];
    this.vc = Math.floor(100000000 * Math.random());
    this.ic = j;
    this.mc = Nb();
    window[Fc + this.mc] = a;
    window[Gc + this.mc] = b;
    a = document.createElement('iframe');
    a.style.display = 'none';
    if (document.body) {
      document.body.appendChild(a);
      try {
        a.contentWindow.document || L('No IE domain setting required');
      } catch (e) {
        a.src = 'javascript:void((function(){document.open();document.domain=\'' + document.domain + '\';document.close();})())';
      }
    } else
      g('Document body has not initialized. Wait to initialize Firebase until after the document is ready.');
    a.contentDocument ? a.za = a.contentDocument : a.contentWindow ? a.za = a.contentWindow.document : a.document && (a.za = a.document);
    this.Y = a;
    a = '';
    this.Y.src && 'javascript:' === this.Y.src.substr(0, 11) && (a = '<script>document.domain="' + document.domain + '";</script>');
    a = '<html><body>' + a + '</body></html>';
    try {
      this.Y.za.open(), this.Y.za.write(a), this.Y.za.close();
    } catch (f) {
      L('frame writing exception'), f.stack && L(f.stack), L(f);
    }
  }
  Kc.prototype.close = function () {
    this.pc = l;
    if (this.Y) {
      this.Y.za.body.innerHTML = '';
      var a = this;
      setTimeout(function () {
        a.Y !== k && (document.body.removeChild(a.Y), a.Y = k);
      }, 0);
    }
    var b = this.ha;
    b && (this.ha = k, b());
  };
  function Mc(a) {
    if (a.pc && a.ic && a.Lc.count() < (0 < a.Cb.length ? 2 : 1)) {
      a.vc++;
      var b = {};
      b.id = a.Gd;
      b.pw = a.Hd;
      b.ser = a.vc;
      for (var b = a.Lb(b), c = '', d = 0; 0 < a.Cb.length;)
        if (1870 >= a.Cb[0].ad.length + 30 + c.length) {
          var e = a.Cb.shift(), c = c + '&seg' + d + '=' + e.Qd + '&ts' + d + '=' + e.Vd + '&d' + d + '=' + e.ad;
          d++;
        } else
          break;
      var b = b + c, f = a.vc;
      a.Lc.add(f);
      var h = function () {
          a.Lc.remove(f);
          Mc(a);
        }, i = setTimeout(h, 25000);
      Lc(a, b, function () {
        clearTimeout(i);
        h();
      });
      return j;
    }
    return l;
  }
  function Lc(a, b, c) {
    setTimeout(function () {
      try {
        if (a.ic) {
          var d = a.Y.za.createElement('script');
          d.type = 'text/javascript';
          d.async = j;
          d.src = b;
          d.onload = d.onreadystatechange = function () {
            var a = d.readyState;
            if (!a || 'loaded' === a || 'complete' === a)
              d.onload = d.onreadystatechange = k, d.parentNode && d.parentNode.removeChild(d), c();
          };
          d.onerror = function () {
            L('Long-poll script failed to load: ' + b);
            a.ic = l;
            a.close();
          };
          a.Y.za.body.appendChild(d);
        }
      } catch (e) {
      }
    }, 1);
  }
  ;
  var Nc = k;
  'undefined' !== typeof MozWebSocket ? Nc = MozWebSocket : 'undefined' !== typeof WebSocket && (Nc = WebSocket);
  function S(a, b, c) {
    this.uc = a;
    this.e = Ub(this.uc);
    this.frames = this.qb = k;
    this.Uc = 0;
    this.$ = Cc(b);
    this.Pa = (b.hc ? 'wss://' : 'ws://') + b.fa + '/.ws?v=5';
    b.host !== b.fa && (this.Pa = this.Pa + '&ns=' + b.Sb);
    c && (this.Pa = this.Pa + '&s=' + c);
  }
  var Oc;
  S.prototype.open = function (a, b) {
    this.ha = b;
    this.Id = a;
    this.e('Websocket connecting to ' + this.Pa);
    this.W = new Nc(this.Pa);
    this.kb = l;
    nb.set('previous_websocket_failure', j);
    var c = this;
    this.ba = setTimeout(function () {
      c.e('Websocket timed out trying to connect.');
      Pc(c);
      c.Ea();
    }, 30000);
    this.W.onopen = function () {
      c.e('Websocket connected.');
      c.kb = j;
      Pc(c);
      nb.remove('previous_websocket_failure');
    };
    this.W.onclose = function () {
      c.e('Websocket connection was disconnected.');
      c.W = k;
      c.Ea();
    };
    this.W.onmessage = function (a) {
      if (c.W !== k)
        if (a = a.data, xc(c.$, 'bytes_received', a.length), Qc(c), c.frames !== k)
          Rc(c, a);
        else {
          a: {
            y(c.frames === k, 'We already have a frame buffer');
            if (6 >= a.length) {
              var b = Number(a);
              if (!isNaN(b)) {
                c.Uc = b;
                c.frames = [];
                a = k;
                break a;
              }
            }
            c.Uc = 1;
            c.frames = [];
          }
          a !== k && Rc(c, a);
        }
    };
    this.W.onerror = function (a) {
      c.e('WebSocket error.  Closing connection.');
      a.data && c.e(a.data);
      c.Ea();
    };
  };
  S.prototype.start = function () {
  };
  S.isAvailable = function () {
    var a = l;
    if ('undefined' !== typeof navigator && navigator.userAgent) {
      var b = navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);
      b && 1 < b.length && 4.4 > parseFloat(b[1]) && (a = j);
    }
    return !a && Nc !== k && !Oc;
  };
  function Rc(a, b) {
    a.frames.push(b);
    if (a.frames.length == a.Uc) {
      var c = a.frames.join('');
      a.frames = k;
      c = sa(c);
      a.Id(c);
    }
  }
  S.prototype.send = function (a) {
    Qc(this);
    a = w(a);
    xc(this.$, 'bytes_sent', a.length);
    a = ac(a, 16384);
    1 < a.length && this.W.send(String(a.length));
    for (var b = 0; b < a.length; b++)
      this.W.send(a[b]);
  };
  S.prototype.Ib = function () {
    this.Ja = j;
    Pc(this);
    this.qb && (clearInterval(this.qb), this.qb = k);
    this.W && (this.W.close(), this.W = k);
  };
  S.prototype.Ea = function () {
    this.Ja || (this.e('WebSocket is closing itself'), this.Ib(), this.ha && (this.ha(this.kb), this.ha = k));
  };
  S.prototype.close = function () {
    this.Ja || (this.e('WebSocket is being closed'), this.Ib());
  };
  function Qc(a) {
    clearInterval(a.qb);
    a.qb = setInterval(function () {
      a.W && a.W.send('0');
      Qc(a);
    }, 45000);
  }
  function Pc(a) {
    a.ba && (clearTimeout(a.ba), a.ba = k);
  }
  ;
  function Sc() {
    var a = [];
    S && S.isAvailable() && !nb.get('previous_websocket_failure') ? a.push(S) : bc(Tc, function (b, c) {
      c && c.isAvailable() && a.push(c);
    });
    this.lc = a;
  }
  var Tc = [
      Hc,
      { isAvailable: o(l) },
      S
    ];
  function Uc(a, b, c, d, e, f) {
    this.id = a;
    this.e = Ub('c:' + this.id + ':');
    this.Jc = c;
    this.xb = d;
    this.R = e;
    this.Ic = f;
    this.J = b;
    this.$b = [];
    this.Yc = 0;
    this.Wc = new Sc();
    this.wa = 0;
    this.e('Connection created');
    Vc(this);
  }
  function Vc(a) {
    var b;
    var c = a.Wc;
    0 < c.lc.length ? b = c.lc[0] : g(Error('No transports available'));
    a.K = new b('c:' + a.id + ':' + a.Yc++, a.J);
    var d = Wc(a, a.K), e = Xc(a, a.K);
    a.Jb = a.K;
    a.Hb = a.K;
    a.A = k;
    setTimeout(function () {
      a.K && a.K.open(d, e);
    }, 0);
  }
  function Xc(a, b) {
    return function (c) {
      b === a.K ? (a.K = k, !c && 0 === a.wa ? (a.e('Realtime connection failed.'), 's-' === a.J.fa.substr(0, 2) && (nb.remove('host:' + a.J.host), a.J.fa = a.J.host)) : 1 === a.wa && a.e('Realtime connection lost.'), a.close()) : b === a.A ? (c = a.A, a.A = k, (a.Jb === c || a.Hb === c) && a.close()) : a.e('closing an old connection');
    };
  }
  function Wc(a, b) {
    return function (c) {
      if (2 != a.wa)
        if (b === a.Hb) {
          var d = $b('t', c), c = $b('d', c);
          if ('c' == d) {
            if (d = $b('t', c), 'd' in c)
              if (c = c.d, 'h' === d) {
                var d = c.ts, e = c.v, f = c.h;
                a.jc = c.s;
                qb(a.J, f);
                if (0 == a.wa && (a.K.start(), c = a.K, a.e('Realtime connection established.'), a.K = c, a.wa = 1, a.xb && (a.xb(d), a.xb = k), '5' !== e && M('Protocol version mismatch detected'), c = 1 < a.Wc.lc.length ? a.Wc.lc[1] : k))
                  a.A = new c('c:' + a.id + ':' + a.Yc++, a.J, a.jc), a.A.open(Wc(a, a.A), Xc(a, a.A));
              } else if ('n' === d) {
                a.e('recvd end transmission on primary');
                a.Hb = a.A;
                for (c = 0; c < a.$b.length; ++c)
                  a.Xb(a.$b[c]);
                a.$b = [];
                Yc(a);
              } else
                's' === d ? (a.e('Connection shutdown command received. Shutting down...'), a.Ic && (a.Ic(c), a.Ic = k), a.R = k, a.close()) : 'r' === d ? (a.e('Reset packet received.  New host: ' + c), qb(a.J, c), 1 === a.wa ? a.close() : ($c(a), Vc(a))) : 'e' === d ? Vb('Server Error: ' + c) : Vb('Unknown control packet command: ' + d);
          } else
            'd' == d && a.Xb(c);
        } else
          b === a.A ? (d = $b('t', c), c = $b('d', c), 'c' == d ? 't' in c && (c = c.t, 'a' === c ? (a.A.start(), a.e('sending client ack on secondary'), a.A.send({
            t: 'c',
            d: {
              t: 'a',
              d: {}
            }
          }), a.e('Ending transmission on primary'), a.K.send({
            t: 'c',
            d: {
              t: 'n',
              d: {}
            }
          }), a.Jb = a.A, Yc(a)) : 'r' === c && (a.e('Got a reset on secondary, closing it'), a.A.close(), (a.Jb === a.A || a.Hb === a.A) && a.close())) : 'd' == d ? a.$b.push(c) : g(Error('Unknown protocol layer: ' + d))) : a.e('message on old connection');
    };
  }
  Uc.prototype.od = function (a) {
    a = {
      t: 'd',
      d: a
    };
    1 !== this.wa && g('Connection is not connected');
    this.Jb.send(a);
  };
  function Yc(a) {
    a.Jb === a.A && a.Hb === a.A && (a.e('cleaning up and promoting a connection: ' + a.A.uc), a.K = a.A, a.A = k);
  }
  Uc.prototype.Xb = function (a) {
    this.Jc(a);
  };
  Uc.prototype.close = function () {
    2 !== this.wa && (this.e('Closing realtime connection.'), this.wa = 2, $c(this), this.R && (this.R(), this.R = k));
  };
  function $c(a) {
    a.e('Shutting down all connections');
    a.K && (a.K.close(), a.K = k);
    a.A && (a.A.close(), a.A = k);
  }
  ;
  function ad() {
    rc.call(this, ['online']);
    this.yb = j;
    if ('undefined' !== typeof window && 'undefined' !== typeof window.addEventListener) {
      var a = this;
      window.addEventListener('online', function () {
        a.yb || a.Xc('online', j);
        a.yb = j;
      }, l);
      window.addEventListener('offline', function () {
        a.yb && a.Xc('online', l);
        a.yb = l;
      }, l);
    }
  }
  la(ad, rc);
  ea(ad);
  ad.prototype.Ac = function (a) {
    y('online' === a);
    return [this.yb];
  };
  function bd(a, b, c, d, e, f) {
    this.id = cd++;
    this.e = Ub('p:' + this.id + ':');
    this.Na = j;
    this.ga = {};
    this.U = [];
    this.zb = 0;
    this.wb = [];
    this.P = l;
    this.qa = 1000;
    this.Rb = 300000;
    this.Yb = b || da;
    this.Wb = c || da;
    this.vb = d || da;
    this.Kc = e || da;
    this.Bc = f || da;
    this.J = a;
    this.Oc = k;
    this.Gb = {};
    this.Pd = 0;
    this.rb = this.Fc = k;
    dd(this, 0);
    tc.mb().Xa('visible', this.Kd, this);
    -1 === a.host.indexOf('fblocal') && ad.mb().Xa('online', this.Jd, this);
  }
  var cd = 0, ed = 0;
  s = bd.prototype;
  s.Fa = function (a, b, c) {
    var d = ++this.Pd, a = {
        r: d,
        a: a,
        b: b
      };
    this.e(w(a));
    y(this.P, 'sendRequest_ call when we\'re not connected not allowed.');
    this.ja.od(a);
    c && (this.Gb[d] = c);
  };
  function fd(a, b, c, d, e) {
    a.e('Listen on ' + b + ' for ' + c);
    var f = { p: b }, d = wb(d, function (a) {
        return Ka(a);
      });
    '{}' !== c && (f.q = d);
    f.h = a.Bc(b);
    a.Fa('l', f, function (d) {
      a.e('listen response', d);
      d = d.s;
      'ok' !== d && gd(a, b, c);
      e && e(d);
    });
  }
  s.hb = function (a, b, c) {
    this.Ha = {
      yd: a,
      bd: l,
      X: b,
      Nb: c
    };
    this.e('Authenticating using credential: ' + this.Ha);
    hd(this);
    if (!(b = 40 == a.length))
      a: {
        var d;
        try {
          var e = a.split('.');
          if (3 !== e.length) {
            b = l;
            break a;
          }
          var f;
          b: {
            try {
              if ('undefined' !== typeof atob) {
                f = atob(e[1]);
                break b;
              }
            } catch (h) {
              L('base64DecodeIfNativeSupport failed: ', h);
            }
            f = k;
          }
          f !== k && (d = sa(f));
        } catch (i) {
          L('isAdminAuthToken_ failed', i);
        }
        b = 'object' === typeof d && wa(d, 'admin') === j;
      }
    b && (this.e('Admin auth credential detected.  Reducing max reconnect time.'), this.Rb = 30000);
  };
  s.Kb = function (a) {
    delete this.Ha;
    this.vb(l);
    this.P && this.Fa('unauth', {}, function (b) {
      a(b.s, b.d);
    });
  };
  function hd(a) {
    var b = a.Ha;
    a.P && b && a.Fa('auth', { cred: b.yd }, function (c) {
      var d = c.s, c = c.d || 'error';
      'ok' !== d && a.Ha === b && delete a.Ha;
      a.vb('ok' === d);
      b.bd ? 'ok' !== d && b.Nb && b.Nb(d, c) : (b.bd = j, b.X && b.X(d, c));
    });
  }
  function id(a, b, c, d) {
    b = b.toString();
    gd(a, b, c) && a.P && (a.e('Unlisten on ' + b + ' for ' + c), b = { p: b }, d = wb(d, function (a) {
      return Ka(a);
    }), '{}' !== c && (b.q = d), a.Fa('u', b));
  }
  function jd(a, b, c, d) {
    a.P ? kd(a, 'o', b, c, d) : a.wb.push({
      Mc: b,
      action: 'o',
      data: c,
      C: d
    });
  }
  s.Hc = function (a, b) {
    this.P ? kd(this, 'oc', a, k, b) : this.wb.push({
      Mc: a,
      action: 'oc',
      data: k,
      C: b
    });
  };
  function kd(a, b, c, d, e) {
    c = {
      p: c,
      d: d
    };
    a.e('onDisconnect ' + b, c);
    a.Fa(b, c, function (a) {
      e && setTimeout(function () {
        e(a.s, a.d);
      }, 0);
    });
  }
  s.put = function (a, b, c, d) {
    ld(this, 'p', a, b, c, d);
  };
  function ld(a, b, c, d, e, f) {
    c = {
      p: c,
      d: d
    };
    t(f) && (c.h = f);
    a.U.push({
      action: b,
      ld: c,
      C: e
    });
    a.zb++;
    b = a.U.length - 1;
    a.P && md(a, b);
  }
  function md(a, b) {
    var c = a.U[b].action, d = a.U[b].ld, e = a.U[b].C;
    a.U[b].Md = a.P;
    a.Fa(c, d, function (d) {
      a.e(c + ' response', d);
      delete a.U[b];
      a.zb--;
      0 === a.zb && (a.U = []);
      e && e(d.s, d.d);
    });
  }
  s.Xb = function (a) {
    if ('r' in a) {
      this.e('from server: ' + w(a));
      var b = a.r, c = this.Gb[b];
      c && (delete this.Gb[b], c(a.b));
    } else
      'error' in a && g('A server-side error has occurred: ' + a.error), 'a' in a && (b = a.a, a = a.b, this.e('handleServerMessage', b, a), 'd' === b ? this.Yb(a.p, a.d) : 'm' === b ? this.Yb(a.p, a.d, j) : 'c' === b ? (b = a.p, a = (a = a.q) ? wb(a, function (a) {
        return La(a);
      }).join('$') : '{}', (a = gd(this, b, a)) && a.C && a.C('permission_denied')) : 'ac' === b ? (b = a.s, a = a.d, c = this.Ha, delete this.Ha, c && c.Nb && c.Nb(b, a), this.vb(l)) : 'sd' === b ? this.Oc ? this.Oc(a) : 'msg' in a && 'undefined' !== typeof console && console.log('FIREBASE: ' + a.msg.replace('\n', '\nFIREBASE: ')) : Vb('Unrecognized action received from server: ' + w(b) + '\nAre you using the latest client?'));
  };
  s.xb = function (a) {
    this.e('connection ready');
    this.P = j;
    this.rb = new Date().getTime();
    this.Kc({ serverTimeOffset: a - new Date().getTime() });
    hd(this);
    for (var b in this.ga)
      for (var c in this.ga[b])
        a = this.ga[b][c], fd(this, b, c, a.Za, a.C);
    for (b = 0; b < this.U.length; b++)
      this.U[b] && md(this, b);
    for (; this.wb.length;)
      b = this.wb.shift(), kd(this, b.action, b.Mc, b.data, b.C);
    this.Wb(j);
  };
  function dd(a, b) {
    y(!a.ja, 'Scheduling a connect when we\'re already connected/ing?');
    a.Sa && clearTimeout(a.Sa);
    a.Sa = setTimeout(function () {
      a.Sa = k;
      if (a.Na) {
        a.e('Making a connection attempt');
        a.Fc = new Date().getTime();
        a.rb = k;
        var b = v(a.Xb, a), d = v(a.xb, a), e = v(a.gd, a), f = a.id + ':' + ed++;
        a.ja = new Uc(f, a.J, b, d, e, function (b) {
          M(b + ' (' + a.J.toString() + ')');
          a.Na = l;
        });
      }
    }, b);
  }
  s.Kd = function (a) {
    a && (!this.gb && this.qa === this.Rb) && (this.e('Window became visible.  Reducing delay.'), this.qa = 1000, this.ja || dd(this, 0));
    this.gb = a;
  };
  s.Jd = function (a) {
    a ? (this.e('Browser went online.  Reconnecting.'), this.qa = 1000, this.Na = j, this.ja || dd(this, 0)) : (this.e('Browser went offline.  Killing connection; don\'t reconnect.'), this.Na = l, this.ja && this.ja.close());
  };
  s.gd = function () {
    this.e('data client disconnected');
    this.P = l;
    this.ja = k;
    for (var a = 0; a < this.U.length; a++) {
      var b = this.U[a];
      b && ('h' in b.ld && b.Md) && (b.C && b.C('disconnect'), delete this.U[a], this.zb--);
    }
    0 === this.zb && (this.U = []);
    if (this.Na)
      this.gb ? this.rb && (30000 < new Date().getTime() - this.rb && (this.qa = 1000), this.rb = k) : (this.e('Window isn\'t visible.  Delaying reconnect.'), this.qa = this.Rb, this.Fc = new Date().getTime()), a = Math.max(0, this.qa - (new Date().getTime() - this.Fc)), a *= Math.random(), this.e('Trying to reconnect in ' + a + 'ms'), dd(this, a), this.qa = Math.min(this.Rb, 1.3 * this.qa);
    else
      for (var c in this.Gb)
        delete this.Gb[c];
    this.Wb(l);
  };
  s.Ia = function () {
    this.Na = l;
    this.ja ? this.ja.close() : (this.Sa && (clearTimeout(this.Sa), this.Sa = k), this.P && this.gd());
  };
  s.ab = function () {
    this.Na = j;
    this.qa = 1000;
    this.P || dd(this, 0);
  };
  function gd(a, b, c) {
    b = new J(b).toString();
    c || (c = '{}');
    var d = a.ga[b][c];
    delete a.ga[b][c];
    return d;
  }
  ;
  function nd() {
    this.o = this.D = k;
  }
  function od(a, b, c) {
    if (b.f())
      a.D = c, a.o = k;
    else if (a.D !== k)
      a.D = a.D.ya(b, c);
    else {
      a.o == k && (a.o = new Dc());
      var d = E(b);
      a.o.contains(d) || a.o.add(d, new nd());
      a = a.o.get(d);
      b = Ma(b);
      od(a, b, c);
    }
  }
  function pd(a, b) {
    if (b.f())
      return a.D = k, a.o = k, j;
    if (a.D !== k) {
      if (a.D.M())
        return l;
      var c = a.D;
      a.D = k;
      c.w(function (b, c) {
        od(a, new J(b), c);
      });
      return pd(a, b);
    }
    return a.o !== k ? (c = E(b), b = Ma(b), a.o.contains(c) && pd(a.o.get(c), b) && a.o.remove(c), a.o.f() ? (a.o = k, j) : l) : j;
  }
  function qd(a, b, c) {
    a.D !== k ? c(b, a.D) : a.w(function (a, e) {
      var f = new J(b.toString() + '/' + a);
      qd(e, f, c);
    });
  }
  nd.prototype.w = function (a) {
    this.o !== k && Ec(this.o, function (b, c) {
      a(b, c);
    });
  };
  function rd() {
    this.ra = N;
  }
  function T(a, b) {
    return a.ra.Q(b);
  }
  function U(a, b, c) {
    a.ra = a.ra.ya(b, c);
  }
  rd.prototype.toString = function () {
    return this.ra.toString();
  };
  function sd() {
    this.sa = new rd();
    this.O = new rd();
    this.ma = new rd();
    this.Bb = new Pa();
  }
  function td(a, b) {
    for (var c = T(a.sa, b), d = T(a.O, b), e = K(a.Bb, b), f = l, h = e; h !== k;) {
      if (h.k() !== k) {
        f = j;
        break;
      }
      h = h.parent();
    }
    if (f)
      return l;
    c = ud(c, d, e);
    return c !== d ? (U(a.O, b, c), j) : l;
  }
  function ud(a, b, c) {
    if (c.f())
      return a;
    if (c.k() !== k)
      return b;
    a = a || N;
    c.w(function (d) {
      var d = d.name(), e = a.L(d), f = b.L(d), h = K(c, d), e = ud(e, f, h);
      a = a.H(d, e);
    });
    return a;
  }
  sd.prototype.set = function (a, b) {
    var c = this, d = [];
    vb(b, function (a) {
      var b = a.path, a = a.pa, h = Nb();
      Qa(K(c.Bb, b), h);
      U(c.O, b, a);
      d.push({
        path: b,
        Rd: h
      });
    });
    return d;
  };
  function vd(a, b) {
    vb(b, function (b) {
      var d = b.Rd, b = K(a.Bb, b.path), e = b.k();
      y(e !== k, 'pendingPut should not be null.');
      e === d && Qa(b, k);
    });
  }
  ;
  function wd() {
    this.Ta = [];
  }
  function xd(a, b) {
    if (0 !== b.length)
      for (var c = 0; c < b.length; c++)
        a.Ta.push(b[c]);
  }
  wd.prototype.Eb = function () {
    for (var a = 0; a < this.Ta.length; a++)
      if (this.Ta[a]) {
        var b = this.Ta[a];
        this.Ta[a] = k;
        yd(b);
      }
    this.Ta = [];
  };
  function yd(a) {
    var b = a.X, c = a.pd, d = a.Db;
    fc(function () {
      b(c, d);
    });
  }
  ;
  function V(a, b, c, d) {
    this.type = a;
    this.ta = b;
    this.aa = c;
    this.Db = d;
  }
  ;
  function zd(a) {
    this.I = a;
    this.na = [];
    this.xc = new wd();
  }
  function Ad(a, b, c, d, e) {
    a.na.push({
      type: b,
      X: c,
      cancel: d,
      T: e
    });
    var d = [], f = Bd(a.i);
    a.pb && f.push(new V('value', a.i));
    for (var h = 0; h < f.length; h++)
      if (f[h].type === b) {
        var i = new H(a.I.n, a.I.path);
        f[h].aa && (i = i.F(f[h].aa));
        d.push({
          X: e ? v(c, e) : c,
          pd: new R(f[h].ta, i),
          Db: f[h].Db
        });
      }
    xd(a.xc, d);
  }
  zd.prototype.cc = function (a, b) {
    b = this.dc(a, b);
    b != k && Cd(this, b);
  };
  function Cd(a, b) {
    for (var c = [], d = 0; d < b.length; d++) {
      var e = b[d], f = e.type, h = new H(a.I.n, a.I.path);
      b[d].aa && (h = h.F(b[d].aa));
      h = new R(b[d].ta, h);
      'value' === e.type && !h.nb() ? f += '(' + h.V() + ')' : 'value' !== e.type && (f += ' ' + h.name());
      L(a.I.n.u.id + ': event:' + a.I.path + ':' + a.I.La() + ':' + f);
      for (f = 0; f < a.na.length; f++) {
        var i = a.na[f];
        b[d].type === i.type && c.push({
          X: i.T ? v(i.X, i.T) : i.X,
          pd: h,
          Db: e.Db
        });
      }
    }
    xd(a.xc, c);
  }
  zd.prototype.Eb = function () {
    this.xc.Eb();
  };
  function Bd(a) {
    var b = [];
    if (!a.M()) {
      var c = k;
      a.w(function (a, e) {
        b.push(new V('child_added', e, a, c));
        c = a;
      });
    }
    return b;
  }
  function Ed(a) {
    a.pb || (a.pb = j, Cd(a, [new V('value', a.i)]));
  }
  ;
  function Fd(a, b) {
    zd.call(this, a);
    this.i = b;
  }
  la(Fd, zd);
  Fd.prototype.dc = function (a, b) {
    this.i = a;
    this.pb && b != k && b.push(new V('value', this.i));
    return b;
  };
  Fd.prototype.lb = function () {
    return {};
  };
  function Gd(a, b) {
    this.Ob = a;
    this.Gc = b;
  }
  function Hd(a, b, c, d, e) {
    var f = a.Q(c), h = b.Q(c), d = new Gd(d, e), e = Id(d, c, f, h), h = !f.f() && !h.f() && f.j() !== h.j();
    if (e || h) {
      f = c;
      for (c = e; f.parent() !== k;) {
        var i = a.Q(f), e = b.Q(f), m = f.parent();
        if (!d.Ob || K(d.Ob, m).k()) {
          var n = b.Q(m), p = [], f = f.Z < f.m.length ? f.m[f.m.length - 1] : k;
          i.f() ? (i = n.ea(f, e), p.push(new V('child_added', e, f, i))) : e.f() ? p.push(new V('child_removed', i, f)) : (i = n.ea(f, e), h && p.push(new V('child_moved', e, f, i)), c && p.push(new V('child_changed', e, f, i)));
          d.Gc(m, n, p);
        }
        h && (h = l, c = j);
        f = m;
      }
    }
  }
  function Id(a, b, c, d) {
    var e, f = [];
    c === d ? e = l : c.M() && d.M() ? e = c.k() !== d.k() : c.M() ? (Jd(a, b, N, d, f), e = j) : d.M() ? (Jd(a, b, c, N, f), e = j) : e = Jd(a, b, c, d, f);
    e ? a.Gc(b, d, f) : c.j() !== d.j() && a.Gc(b, d, k);
    return e;
  }
  function Jd(a, b, c, d, e) {
    var f = l, h = !a.Ob || !K(a.Ob, b).f(), i = [], m = [], n = [], p = [], q = {}, r = {}, x, P, I, G;
    x = c.Ua();
    I = Za(x);
    P = d.Ua();
    for (G = Za(P); I !== k || G !== k;) {
      c = I === k ? 1 : G === k ? -1 : I.key === G.key ? 0 : ic({
        name: I.key,
        ia: I.value.j()
      }, {
        name: G.key,
        ia: G.value.j()
      });
      if (0 > c)
        f = wa(q, I.key), t(f) ? (n.push({
          zc: I,
          Tc: i[f]
        }), i[f] = k) : (r[I.key] = m.length, m.push(I)), f = j, I = Za(x);
      else {
        if (0 < c)
          f = wa(r, G.key), t(f) ? (n.push({
            zc: m[f],
            Tc: G
          }), m[f] = k) : (q[G.key] = i.length, i.push(G)), f = j;
        else {
          c = b.F(G.key);
          if (c = Id(a, c, I.value, G.value))
            p.push(G), f = j;
          I.value.j() !== G.value.j() && (n.push({
            zc: I,
            Tc: G
          }), f = j);
          I = Za(x);
        }
        G = Za(P);
      }
      if (!h && f)
        return j;
    }
    for (h = 0; h < m.length; h++)
      if (q = m[h])
        c = b.F(q.key), Id(a, c, q.value, N), e.push(new V('child_removed', q.value, q.key));
    for (h = 0; h < i.length; h++)
      if (q = i[h])
        c = b.F(q.key), m = d.ea(q.key, q.value), Id(a, c, N, q.value), e.push(new V('child_added', q.value, q.key, m));
    for (h = 0; h < n.length; h++)
      q = n[h].zc, i = n[h].Tc, c = b.F(i.key), m = d.ea(i.key, i.value), e.push(new V('child_moved', i.value, i.key, m)), (c = Id(a, c, q.value, i.value)) && p.push(i);
    for (h = 0; h < p.length; h++)
      a = p[h], m = d.ea(a.key, a.value), e.push(new V('child_changed', a.value, a.key, m));
    return f;
  }
  ;
  function Kd() {
    this.S = this.xa = k;
    this.set = {};
  }
  la(Kd, Dc);
  s = Kd.prototype;
  s.setActive = function (a) {
    this.xa = a;
  };
  function Ld(a) {
    return a.contains('default');
  }
  function Md(a) {
    return a.xa != k && Ld(a);
  }
  s.defaultView = function () {
    return Ld(this) ? this.get('default') : k;
  };
  s.path = ba('S');
  s.toString = function () {
    return wb(this.keys(), function (a) {
      return 'default' === a ? '{}' : a;
    }).join('$');
  };
  s.Za = function () {
    var a = [];
    Ec(this, function (b, c) {
      a.push(c.I);
    });
    return a;
  };
  function Nd(a, b) {
    zd.call(this, a);
    this.i = N;
    this.dc(b, Bd(b));
  }
  la(Nd, zd);
  Nd.prototype.dc = function (a, b) {
    if (b === k)
      return b;
    var c = [], d = this.I;
    t(d.da) && (t(d.va) && d.va != k ? c.push(function (a, b) {
      var c = Xb(b, d.da);
      return 0 < c || 0 === c && 0 <= Yb(a, d.va);
    }) : c.push(function (a, b) {
      return 0 <= Xb(b, d.da);
    }));
    t(d.Aa) && (t(d.Ra) ? c.push(function (a, b) {
      var c = Xb(b, d.Aa);
      return 0 > c || 0 === c && 0 >= Yb(a, d.Ra);
    }) : c.push(function (a, b) {
      return 0 >= Xb(b, d.Aa);
    }));
    var e = k, f = k;
    if (t(this.I.Ca))
      if (t(this.I.da)) {
        if (e = Od(a, c, this.I.Ca, l)) {
          var h = a.L(e).j();
          c.push(function (a, b) {
            var c = Xb(b, h);
            return 0 > c || 0 === c && 0 >= Yb(a, e);
          });
        }
      } else if (f = Od(a, c, this.I.Ca, j)) {
        var i = a.L(f).j();
        c.push(function (a, b) {
          var c = Xb(b, i);
          return 0 < c || 0 === c && 0 <= Yb(a, f);
        });
      }
    for (var m = [], n = [], p = [], q = [], r = 0; r < b.length; r++) {
      var x = b[r].aa, P = b[r].ta;
      switch (b[r].type) {
      case 'child_added':
        Pd(c, x, P) && (this.i = this.i.H(x, P), n.push(b[r]));
        break;
      case 'child_removed':
        this.i.L(x).f() || (this.i = this.i.H(x, k), m.push(b[r]));
        break;
      case 'child_changed':
        !this.i.L(x).f() && Pd(c, x, P) && (this.i = this.i.H(x, P), q.push(b[r]));
        break;
      case 'child_moved':
        var I = !this.i.L(x).f(), G = Pd(c, x, P);
        I ? G ? (this.i = this.i.H(x, P), p.push(b[r])) : (m.push(new V('child_removed', this.i.L(x), x)), this.i = this.i.H(x, k)) : G && (this.i = this.i.H(x, P), n.push(b[r]));
      }
    }
    var Zc = e || f;
    if (Zc) {
      var Dd = (r = f !== k) ? this.i.cd() : this.i.dd(), pc = l, bb = l, cb = this;
      (r ? a.yc : a.w).call(a, function (a, b) {
        !bb && Dd === k && (bb = j);
        if (bb && pc)
          return j;
        pc ? (m.push(new V('child_removed', cb.i.L(a), a)), cb.i = cb.i.H(a, k)) : bb && (n.push(new V('child_added', b, a)), cb.i = cb.i.H(a, b));
        Dd === a && (bb = j);
        a === Zc && (pc = j);
      });
    }
    for (r = 0; r < n.length; r++)
      c = n[r], x = this.i.ea(c.aa, c.ta), m.push(new V('child_added', c.ta, c.aa, x));
    for (r = 0; r < p.length; r++)
      c = p[r], x = this.i.ea(c.aa, c.ta), m.push(new V('child_moved', c.ta, c.aa, x));
    for (r = 0; r < q.length; r++)
      c = q[r], x = this.i.ea(c.aa, c.ta), m.push(new V('child_changed', c.ta, c.aa, x));
    this.pb && 0 < m.length && m.push(new V('value', this.i));
    return m;
  };
  function Od(a, b, c, d) {
    if (a.M())
      return k;
    var e = k;
    (d ? a.yc : a.w).call(a, function (a, d) {
      if (Pd(b, a, d) && (e = a, c--, 0 === c))
        return j;
    });
    return e;
  }
  function Pd(a, b, c) {
    for (var d = 0; d < a.length; d++)
      if (!a[d](b, c.j()))
        return l;
    return j;
  }
  Nd.prototype.Cc = function (a) {
    return this.i.L(a) !== N;
  };
  Nd.prototype.lb = function (a, b, c) {
    var d = {};
    this.i.M() || this.i.w(function (a) {
      d[a] = 3;
    });
    var e = this.i, c = T(c, new J('')), f = new Pa();
    Qa(K(f, this.I.path), j);
    var b = N.ya(a, b), h = this;
    Hd(c, b, a, f, function (a, b, c) {
      c !== k && a.toString() === h.I.path.toString() && h.dc(b, c);
    });
    this.i.M() ? cc(d, function (a, b) {
      d[b] = 2;
    }) : (this.i.w(function (a) {
      C(d, a) || (d[a] = 1);
    }), cc(d, function (a, b) {
      h.i.L(b).f() && (d[b] = 2);
    }));
    this.i = e;
    return d;
  };
  function Qd(a, b) {
    this.u = a;
    this.g = b;
    this.Vb = b.ra;
    this.la = new Pa();
  }
  Qd.prototype.Mb = function (a, b, c, d, e) {
    var f = a.path, h = K(this.la, f), i = h.k();
    i === k ? (i = new Kd(), Qa(h, i)) : y(!i.f(), 'We shouldn\'t be storing empty QueryMaps');
    var m = a.La();
    if (i.contains(m))
      a = i.get(m), Ad(a, b, c, d, e);
    else {
      var n = this.g.ra.Q(f), n = a = 'default' === a.La() ? new Fd(a, n) : new Nd(a, n);
      if (Md(i) || Rd(h))
        i.add(m, n), i.S || (i.S = n.I.path);
      else {
        var p, q;
        i.f() || (p = i.toString(), q = i.Za());
        i.add(m, n);
        i.S || (i.S = n.I.path);
        i.setActive(Sd(this, i));
        p && q && id(this.u, i.path(), p, q);
      }
      Md(i) && Sa(h, function (a) {
        if (a = a.k()) {
          a.xa && a.xa();
          a.xa = k;
        }
      });
      Ad(a, b, c, d, e);
      (b = (b = Ta(K(this.la, f), function (a) {
        var b;
        if (b = a.k())
          if (b = a.k().defaultView())
            b = a.k().defaultView().pb;
        if (b)
          return j;
      }, j)) || this.u === k && !T(this.g, f).f()) && Ed(a);
    }
    a.Eb();
  };
  function Td(a, b, c, d, e) {
    var f = a.get(b), h;
    if (h = f) {
      h = l;
      for (var i = f.na.length - 1; 0 <= i; i--) {
        var m = f.na[i];
        if ((!c || m.type === c) && (!d || m.X === d) && (!e || m.T === e))
          if (f.na.splice(i, 1), h = j, c && d)
            break;
      }
      h = h && !(0 < f.na.length);
    }
    (c = h) && a.remove(b);
    return c;
  }
  Qd.prototype.fc = function (a, b, c, d) {
    var e = K(this.la, a.path).k();
    return e === k ? k : Ud(this, e, a, b, c, d);
  };
  function Ud(a, b, c, d, e, f) {
    var h = b.path(), h = K(a.la, h), c = c ? c.La() : k, i = [];
    c && 'default' !== c ? Td(b, c, d, e, f) && i.push(c) : vb(b.keys(), function (a) {
      Td(b, a, d, e, f) && i.push(a);
    });
    b.f() && Qa(h, k);
    c = Rd(h);
    if (0 < i.length && !c) {
      for (var m = h, n = h.parent(), c = l; !c && n;) {
        var p = n.k();
        if (p) {
          y(!Md(p));
          var q = m.name(), r = l;
          Ec(p, function (a, b) {
            r = b.Cc(q) || r;
          });
          r && (c = j);
        }
        m = n;
        n = n.parent();
      }
      m = k;
      if (!Md(b)) {
        n = b.xa;
        b.xa = k;
        var x = [], P = function (b) {
            var c = b.k();
            if (c && Ld(c))
              x.push(c.path()), c.xa == k && c.setActive(Sd(a, c));
            else {
              if (c) {
                c.xa != k || c.setActive(Sd(a, c));
                var d = {};
                Ec(c, function (a, b) {
                  b.i.w(function (a) {
                    C(d, a) || (d[a] = j, a = c.path().F(a), x.push(a));
                  });
                });
              }
              b.w(P);
            }
          };
        P(h);
        m = x;
        n && n();
      }
      return c ? k : m;
    }
    return k;
  }
  function Vd(a, b, c) {
    Sa(K(a.la, b), function (a) {
      (a = a.k()) && Ec(a, function (a, b) {
        Ed(b);
      });
    }, c, j);
  }
  function W(a, b, c) {
    function d(a) {
      do {
        if (h[a.toString()])
          return j;
        a = a.parent();
      } while (a !== k);
      return l;
    }
    var e = a.Vb, f = a.g.ra;
    a.Vb = f;
    for (var h = {}, i = 0; i < c.length; i++)
      h[c[i].toString()] = j;
    Hd(e, f, b, a.la, function (c, e, f) {
      if (b.contains(c)) {
        var h = d(c);
        h && Vd(a, c, l);
        a.cc(c, e, f);
        h && Vd(a, c, j);
      } else
        a.cc(c, e, f);
    });
    d(b) && Vd(a, b, j);
    Wd(a, b);
  }
  function Wd(a, b) {
    var c = K(a.la, b);
    Sa(c, function (a) {
      (a = a.k()) && Ec(a, function (a, b) {
        b.Eb();
      });
    }, j, j);
    Ta(c, function (a) {
      (a = a.k()) && Ec(a, function (a, b) {
        b.Eb();
      });
    }, l);
  }
  Qd.prototype.cc = function (a, b, c) {
    a = K(this.la, a).k();
    a !== k && Ec(a, function (a, e) {
      e.cc(b, c);
    });
  };
  function Rd(a) {
    return Ta(a, function (a) {
      return a.k() && Md(a.k());
    });
  }
  function Sd(a, b) {
    if (a.u) {
      var c = a.u, d = b.path(), e = b.toString(), f = b.Za(), h, i = b.keys(), m = Ld(b), n = a.u, p = function (c) {
          if ('ok' !== c) {
            var d = 'Unknown Error';
            'too_big' === c ? d = 'The data requested exceeds the maximum size that can be accessed with a single request.' : 'permission_denied' == c ? d = 'Client doesn\'t have permission to access the desired data.' : 'unavailable' == c && (d = 'The service is unavailable');
            var e = Error(c + ': ' + d);
            e.code = c.toUpperCase();
            M('on() or once() for ' + b.path().toString() + ' failed: ' + e.toString());
            b && (Ec(b, function (a, b) {
              for (var c = 0; c < b.na.length; c++) {
                var d = b.na[c];
                d.cancel && (d.T ? v(d.cancel, d.T) : d.cancel)(e);
              }
            }), Ud(a, b));
          } else
            h || (m ? Vd(a, b.path(), j) : vb(i, function (a) {
              (a = b.get(a)) && Ed(a);
            }), Wd(a, b.path()));
        }, q = b.toString(), r = b.path().toString();
      n.ga[r] = n.ga[r] || {};
      y(!n.ga[r][q], 'listen() called twice for same path/queryId.');
      n.ga[r][q] = {
        Za: b.Za(),
        C: p
      };
      n.P && fd(n, r, q, b.Za(), p);
      return function () {
        h = j;
        id(c, d, e, f);
      };
    }
    return da;
  }
  Qd.prototype.lb = function (a, b, c, d) {
    var e = {};
    Ec(b, function (b, h) {
      var i = h.lb(a, c, d);
      cc(i, function (a, b) {
        e[b] = 3 === a ? 3 : (wa(e, b) || a) === a ? a : 3;
      });
    });
    c.M() || c.w(function (a) {
      C(e, a) || (e[a] = 4);
    });
    return e;
  };
  function Xd(a, b, c, d, e) {
    var f = b.path(), b = a.lb(f, b, d, e), h = N, i = [];
    cc(b, function (b, n) {
      var p = new J(n);
      3 === b || 1 === b ? h = h.H(n, d.Q(p)) : (2 === b && i.push({
        path: f.F(n),
        pa: N
      }), i = i.concat(Yd(a, d.Q(p), K(c, p), e)));
    });
    return [{
        path: f,
        pa: h
      }].concat(i);
  }
  function Zd(a, b, c, d) {
    var e;
    a: {
      var f = K(a.la, b);
      e = f.parent();
      for (var h = []; e !== k;) {
        var i = e.k();
        if (i !== k) {
          if (Ld(i)) {
            e = [{
                path: b,
                pa: c
              }];
            break a;
          }
          i = a.lb(b, i, c, d);
          f = wa(i, f.name());
          if (3 === f || 1 === f) {
            e = [{
                path: b,
                pa: c
              }];
            break a;
          }
          2 === f && h.push({
            path: b,
            pa: N
          });
        }
        f = e;
        e = e.parent();
      }
      e = h;
    }
    if (1 == e.length && (!e[0].pa.f() || c.f()))
      return e;
    h = K(a.la, b);
    f = h.k();
    f !== k ? Ld(f) ? e.push({
      path: b,
      pa: c
    }) : e = e.concat(Xd(a, f, h, c, d)) : e = e.concat(Yd(a, c, h, d));
    return e;
  }
  function Yd(a, b, c, d) {
    var e = c.k();
    if (e !== k)
      return Ld(e) ? [{
          path: c.path(),
          pa: b
        }] : Xd(a, e, c, b, d);
    var f = [];
    c.w(function (c) {
      var e = b.M() ? N : b.L(c.name()), c = Yd(a, e, c, d);
      f = f.concat(c);
    });
    return f;
  }
  ;
  function $d(a, b) {
    if (!a || 'object' !== typeof a)
      return a;
    y('.sv' in a, 'Unexpected leaf node or priority contents');
    return b[a['.sv']];
  }
  function ae(a, b) {
    var c = $d(a.j(), b), d;
    if (a.M()) {
      var e = $d(a.k(), b);
      return e !== a.k() || c !== a.j() ? new gc(e, c) : a;
    }
    d = a;
    c !== a.j() && (d = d.Ga(c));
    a.w(function (a, c) {
      var e = ae(c, b);
      e !== c && (d = d.H(a, e));
    });
    return d;
  }
  ;
  function be(a) {
    this.J = a;
    this.$ = Cc(a);
    this.u = new bd(this.J, v(this.Yb, this), v(this.Wb, this), v(this.vb, this), v(this.Kc, this), v(this.Bc, this));
    var b = v(function () {
        return new zc(this.$, this.u);
      }, this), a = a.toString();
    Bc[a] || (Bc[a] = b());
    this.qd = Bc[a];
    this.eb = new Pa();
    this.fb = new rd();
    this.g = new sd();
    this.G = new Qd(this.u, this.g.ma);
    this.Dc = new rd();
    this.Ec = new Qd(k, this.Dc);
    ce(this, 'connected', l);
    ce(this, 'authenticated', l);
    this.R = new nd();
    this.wc = 0;
  }
  s = be.prototype;
  s.toString = function () {
    return (this.J.hc ? 'https://' : 'http://') + this.J.host;
  };
  s.name = function () {
    return this.J.Sb;
  };
  function de(a) {
    a = T(a.Dc, new J('.info/serverTimeOffset')).V() || 0;
    return new Date().getTime() + a;
  }
  function ee(a) {
    a = a = { timestamp: de(a) };
    a.timestamp = a.timestamp || new Date().getTime();
    return a;
  }
  s.Yb = function (a, b, c) {
    this.wc++;
    var d, e, f = [];
    9 <= a.length && a.lastIndexOf('.priority') === a.length - 9 ? (d = new J(a.substring(0, a.length - 9)), e = T(this.g.sa, d).Ga(b), f.push(d)) : c ? (d = new J(a), e = T(this.g.sa, d), cc(b, function (a, b) {
      var c = new J(b);
      '.priority' === b ? e = e.Ga(a) : (e = e.ya(c, Q(a)), f.push(d.F(b)));
    })) : (d = new J(a), e = Q(b), f.push(d));
    a = Zd(this.G, d, e, this.g.O);
    b = l;
    for (c = 0; c < a.length; ++c) {
      var h = a[c], i = this.g, m = h.path;
      U(i.sa, m, h.pa);
      b = td(i, m) || b;
    }
    b && (d = fe(this, d));
    W(this.G, d, f);
  };
  s.Wb = function (a) {
    ce(this, 'connected', a);
    if (a === l) {
      this.e('onDisconnectEvents');
      var b = this, c = [], d = ee(this), a = qd, e = new nd();
      qd(this.R, new J(''), function (a, b) {
        od(e, a, ae(b, d));
      });
      a(e, new J(''), function (a, d) {
        var e = Zd(b.G, a, d, b.g.O);
        c.push.apply(c, b.g.set(a, e));
        e = ge(b, a);
        fe(b, e);
        W(b.G, e, [a]);
      });
      vd(this.g, c);
      this.R = new nd();
    }
  };
  s.Kc = function (a) {
    var b = this;
    bc(a, function (a, d) {
      ce(b, d, a);
    });
  };
  s.Bc = function (a) {
    a = new J(a);
    return T(this.g.sa, a).hash();
  };
  s.vb = function (a) {
    ce(this, 'authenticated', a);
  };
  function ce(a, b, c) {
    b = new J('/.info/' + b);
    U(a.Dc, b, Q(c));
    W(a.Ec, b, [b]);
  }
  s.hb = function (a, b, c) {
    'firebaseio-demo.com' === this.J.domain && M('FirebaseRef.auth() not supported on demo (*.firebaseio-demo.com) Firebases. Please use on production (*.firebaseio.com) Firebases only.');
    this.u.hb(a, function (a, c) {
      X(b, a, c);
    }, function (a, b) {
      M('auth() was canceled: ' + b);
      if (c) {
        var f = Error(b);
        f.code = a.toUpperCase();
        c(f);
      }
    });
  };
  s.Kb = function (a) {
    this.u.Kb(function (b, c) {
      X(a, b, c);
    });
  };
  s.bb = function (a, b, c, d) {
    this.e('set', {
      path: a.toString(),
      value: b,
      ia: c
    });
    var e = ee(this), b = Q(b, c), e = ae(b, e), e = Zd(this.G, a, e, this.g.O), f = this.g.set(a, e), h = this;
    this.u.put(a.toString(), b.V(j), function (b, c) {
      'ok' !== b && M('set at ' + a + ' failed: ' + b);
      vd(h.g, f);
      td(h.g, a);
      var e = fe(h, a);
      W(h.G, e, []);
      X(d, b, c);
    });
    e = ge(this, a);
    fe(this, e);
    W(this.G, e, [a]);
  };
  s.update = function (a, b, c) {
    this.e('update', {
      path: a.toString(),
      value: b
    });
    var d = T(this.g.ma, a), e = j, f = [], h = ee(this), i = [], m;
    for (m in b) {
      var e = l, n = Q(b[m]), n = ae(n, h), d = d.H(m, n), p = a.F(m);
      f.push(p);
      n = Zd(this.G, p, n, this.g.O);
      i = i.concat(this.g.set(a, n));
    }
    if (e)
      L('update() called with empty data.  Don\'t do anything.'), X(c, 'ok');
    else {
      var q = this;
      ld(this.u, 'm', a.toString(), b, function (b, d) {
        y('ok' === b || 'permission_denied' === b, 'merge at ' + a + ' failed.');
        'ok' !== b && M('update at ' + a + ' failed: ' + b);
        vd(q.g, i);
        td(q.g, a);
        var e = fe(q, a);
        W(q.G, e, []);
        X(c, b, d);
      }, aa);
      b = ge(this, a);
      fe(this, b);
      W(q.G, b, f);
    }
  };
  s.Pc = function (a, b, c) {
    this.e('setPriority', {
      path: a.toString(),
      ia: b
    });
    var d = ee(this), d = $d(b, d), d = T(this.g.O, a).Ga(d), d = Zd(this.G, a, d, this.g.O), e = this.g.set(a, d), f = this;
    this.u.put(a.toString() + '/.priority', b, function (b, d) {
      'permission_denied' === b && M('setPriority at ' + a + ' failed: ' + b);
      vd(f.g, e);
      td(f.g, a);
      var m = fe(f, a);
      W(f.G, m, []);
      X(c, b, d);
    });
    b = fe(this, a);
    W(f.G, b, []);
  };
  s.Hc = function (a, b) {
    var c = this;
    this.u.Hc(a.toString(), function (d, e) {
      'ok' === d && pd(c.R, a);
      X(b, d, e);
    });
  };
  function he(a, b, c, d) {
    var e = Q(c);
    jd(a.u, b.toString(), e.V(j), function (c, h) {
      'ok' === c && od(a.R, b, e);
      X(d, c, h);
    });
  }
  function ie(a) {
    xc(a.$, 'deprecated_on_disconnect');
    a.qd.Sc.deprecated_on_disconnect = j;
  }
  s.Mb = function (a, b, c, d, e) {
    '.info' === E(a.path) ? this.Ec.Mb(a, b, c, d, e) : this.G.Mb(a, b, c, d, e);
  };
  s.fc = function (a, b, c, d) {
    if ('.info' === E(a.path))
      this.Ec.fc(a, b, c, d);
    else {
      b = this.G.fc(a, b, c, d);
      if (c = b !== k) {
        for (var c = this.g, d = a.path, e = [], f = 0; f < b.length; ++f)
          e[f] = T(c.sa, b[f]);
        U(c.sa, d, N);
        for (f = 0; f < b.length; ++f)
          U(c.sa, b[f], e[f]);
        c = td(c, d);
      }
      c && (y(this.g.ma.ra === this.G.Vb, 'We should have raised any outstanding events by now.  Else, we\'ll blow them away.'), U(this.g.ma, a.path, T(this.g.O, a.path)), this.G.Vb = this.g.ma.ra);
    }
  };
  s.Ia = function () {
    this.u.Ia();
  };
  s.ab = function () {
    this.u.ab();
  };
  s.Qc = function (a) {
    if ('undefined' !== typeof console) {
      a ? (this.kc || (this.kc = new yc(this.$)), a = this.kc.get()) : a = this.$.get();
      var b = a, c = [], d = 0, e;
      for (e in b)
        c[d++] = e;
      var f = function (a, b) {
        return Math.max(b.length, a);
      };
      if (c.reduce)
        e = c.reduce(f, 0);
      else {
        var h = 0;
        vb(c, function (a) {
          h = f.call(aa, h, a);
        });
        e = h;
      }
      for (var i in a) {
        b = a[i];
        for (c = i.length; c < e + 2; c++)
          i += ' ';
        console.log(i + b);
      }
    }
  };
  s.Rc = function (a) {
    xc(this.$, a);
    this.qd.Sc[a] = j;
  };
  s.e = function () {
    L('r:' + this.u.id + ':', arguments);
  };
  function X(a, b, c) {
    a && fc(function () {
      if ('ok' == b)
        a(k, c);
      else {
        var d = (b || 'error').toUpperCase(), e = d;
        c && (e += ': ' + c);
        e = Error(e);
        e.code = d;
        a(e);
      }
    });
  }
  ;
  function je(a, b) {
    var c = b || a.eb;
    b || ke(a, c);
    if (c.k() !== k) {
      var d = le(a, c);
      y(0 < d.length);
      if (xb(d, function (a) {
          return 1 === a.status;
        })) {
        for (var e = c.path(), f = 0; f < d.length; f++)
          y(1 === d[f].status, 'tryToSendTransactionQueue_: items in queue should all be run.'), d[f].status = 2, d[f].nd++;
        c = T(a.g.O, e).hash();
        U(a.g.O, e, T(a.g.ma, e));
        for (var h = T(a.fb, e).V(j), i = Nb(), m = {}, n = 0; n < d.length; n++)
          d[n].qc && (m[d[n].path.toString()] = d[n].path);
        var p = [], q;
        for (q in m)
          p.push(m[q]);
        for (f = 0; f < p.length; f++)
          Qa(K(a.g.Bb, p[f]), i);
        a.u.put(e.toString(), h, function (b) {
          a.e('transaction put response', {
            path: e.toString(),
            status: b
          });
          for (f = 0; f < p.length; f++) {
            var c = K(a.g.Bb, p[f]), h = c.k();
            y(h !== k, 'sendTransactionQueue_: pendingPut should not be null.');
            h === i && (Qa(c, k), U(a.g.O, p[f], T(a.g.sa, p[f])));
          }
          if ('ok' === b) {
            b = [];
            for (f = 0; f < d.length; f++)
              d[f].status = 3, d[f].C && (c = me(a, d[f].path), b.push(v(d[f].C, k, k, j, c))), d[f].nc();
            ke(a, K(a.eb, e));
            je(a);
            for (f = 0; f < b.length; f++)
              fc(b[f]);
          } else {
            if ('datastale' === b)
              for (f = 0; f < d.length; f++)
                d[f].status = 4 === d[f].status ? 5 : 1;
            else {
              M('transaction at ' + e + ' failed: ' + b);
              for (f = 0; f < d.length; f++)
                d[f].status = 5, d[f].oc = b;
            }
            b = fe(a, e);
            W(a.G, b, [e]);
          }
        }, c);
      }
    } else
      c.nb() && c.w(function (b) {
        je(a, b);
      });
  }
  function fe(a, b) {
    var c = ne(a, b), d = c.path(), c = le(a, c);
    U(a.g.ma, d, T(a.g.O, d));
    U(a.fb, d, T(a.g.O, d));
    if (0 !== c.length) {
      for (var e = T(a.g.ma, d), f = e, h = [], i = 0; i < c.length; i++) {
        var m = Na(d, c[i].path), n = l, p;
        y(m !== k, 'rerunTransactionsUnderNode_: relativePath should not be null.');
        if (5 === c[i].status)
          n = j, p = c[i].oc;
        else if (1 === c[i].status)
          if (25 <= c[i].nd)
            n = j, p = 'maxretry';
          else {
            var q = e.Q(m), r = c[i].update(q.V());
            if (t(r)) {
              Ba('transaction failed: Data returned ', r);
              var x = Q(r);
              'object' === typeof r && r != k && C(r, '.priority') || (x = x.Ga(q.j()));
              e = e.ya(m, x);
              c[i].qc && (f = f.ya(m, x));
            } else
              n = j, p = 'nodata';
          }
        n && (c[i].status = 3, setTimeout(c[i].nc, 0), c[i].C && (n = new H(a, c[i].path), m = new R(e.Q(m), n), 'nodata' === p ? h.push(v(c[i].C, k, k, l, m)) : h.push(v(c[i].C, k, Error(p), l, m))));
      }
      U(a.fb, d, e);
      U(a.g.ma, d, f);
      ke(a, a.eb);
      for (i = 0; i < h.length; i++)
        fc(h[i]);
      je(a);
    }
    return d;
  }
  function ne(a, b) {
    for (var c, d = a.eb; (c = E(b)) !== k && d.k() === k;)
      d = K(d, c), b = Ma(b);
    return d;
  }
  function le(a, b) {
    var c = [];
    oe(a, b, c);
    c.sort(function (a, b) {
      return a.hd - b.hd;
    });
    return c;
  }
  function oe(a, b, c) {
    var d = b.k();
    if (d !== k)
      for (var e = 0; e < d.length; e++)
        c.push(d[e]);
    b.w(function (b) {
      oe(a, b, c);
    });
  }
  function ke(a, b) {
    var c = b.k();
    if (c) {
      for (var d = 0, e = 0; e < c.length; e++)
        3 !== c[e].status && (c[d] = c[e], d++);
      c.length = d;
      Qa(b, 0 < c.length ? c : k);
    }
    b.w(function (b) {
      ke(a, b);
    });
  }
  function ge(a, b) {
    var c = ne(a, b).path(), d = K(a.eb, b);
    Ta(d, function (a) {
      pe(a);
    });
    pe(d);
    Sa(d, function (a) {
      pe(a);
    });
    return c;
  }
  function pe(a) {
    var b = a.k();
    if (b !== k) {
      for (var c = [], d = -1, e = 0; e < b.length; e++)
        4 !== b[e].status && (2 === b[e].status ? (y(d === e - 1, 'All SENT items should be at beginning of queue.'), d = e, b[e].status = 4, b[e].oc = 'set') : (y(1 === b[e].status), b[e].nc(), b[e].C && c.push(v(b[e].C, k, Error('set'), l, k))));
      -1 === d ? Qa(a, k) : b.length = d + 1;
      for (e = 0; e < c.length; e++)
        fc(c[e]);
    }
  }
  function me(a, b) {
    var c = new H(a, b);
    return new R(T(a.fb, b), c);
  }
  ;
  function Y() {
    this.$a = {};
  }
  ea(Y);
  Y.prototype.Ia = function () {
    for (var a in this.$a)
      this.$a[a].Ia();
  };
  Y.prototype.interrupt = Y.prototype.Ia;
  Y.prototype.ab = function () {
    for (var a in this.$a)
      this.$a[a].ab();
  };
  Y.prototype.resume = Y.prototype.ab;
  var Z = {
      Dd: function (a) {
        var b = O.prototype.hash;
        O.prototype.hash = a;
        var c = gc.prototype.hash;
        gc.prototype.hash = a;
        return function () {
          O.prototype.hash = b;
          gc.prototype.hash = c;
        };
      }
    };
  Z.hijackHash = Z.Dd;
  Z.La = function (a) {
    return a.La();
  };
  Z.queryIdentifier = Z.La;
  Z.Fd = function (a) {
    return a.n.u.ga;
  };
  Z.listens = Z.Fd;
  Z.Nd = function (a) {
    return a.n.u.ja;
  };
  Z.refConnection = Z.Nd;
  Z.sd = bd;
  Z.DataConnection = Z.sd;
  bd.prototype.sendRequest = bd.prototype.Fa;
  bd.prototype.interrupt = bd.prototype.Ia;
  Z.td = Uc;
  Z.RealTimeConnection = Z.td;
  Uc.prototype.sendRequest = Uc.prototype.od;
  Uc.prototype.close = Uc.prototype.close;
  Z.rd = pb;
  Z.ConnectionTarget = Z.rd;
  Z.Bd = function () {
    Ic = Oc = j;
  };
  Z.forceLongPolling = Z.Bd;
  Z.Cd = function () {
    Jc = j;
  };
  Z.forceWebSockets = Z.Cd;
  Z.Td = function (a, b) {
    a.n.u.Oc = b;
  };
  Z.setSecurityDebugCallback = Z.Td;
  Z.Qc = function (a, b) {
    a.n.Qc(b);
  };
  Z.stats = Z.Qc;
  Z.Rc = function (a, b) {
    a.n.Rc(b);
  };
  Z.statsIncrementCounter = Z.Rc;
  Z.wc = function (a) {
    return a.n.wc;
  };
  function $(a, b, c) {
    this.Fb = a;
    this.S = b;
    this.Da = c;
  }
  $.prototype.cancel = function (a) {
    z('Firebase.onDisconnect().cancel', 0, 1, arguments.length);
    B('Firebase.onDisconnect().cancel', 1, a, j);
    this.Fb.Hc(this.S, a);
  };
  $.prototype.cancel = $.prototype.cancel;
  $.prototype.remove = function (a) {
    z('Firebase.onDisconnect().remove', 0, 1, arguments.length);
    D('Firebase.onDisconnect().remove', this.S);
    B('Firebase.onDisconnect().remove', 1, a, j);
    he(this.Fb, this.S, k, a);
  };
  $.prototype.remove = $.prototype.remove;
  $.prototype.set = function (a, b) {
    z('Firebase.onDisconnect().set', 1, 2, arguments.length);
    D('Firebase.onDisconnect().set', this.S);
    Aa('Firebase.onDisconnect().set', a, l);
    B('Firebase.onDisconnect().set', 2, b, j);
    he(this.Fb, this.S, a, b);
  };
  $.prototype.set = $.prototype.set;
  $.prototype.bb = function (a, b, c) {
    z('Firebase.onDisconnect().setWithPriority', 2, 3, arguments.length);
    D('Firebase.onDisconnect().setWithPriority', this.S);
    Aa('Firebase.onDisconnect().setWithPriority', a, l);
    Fa('Firebase.onDisconnect().setWithPriority', 2, b, l);
    B('Firebase.onDisconnect().setWithPriority', 3, c, j);
    ('.length' === this.Da || '.keys' === this.Da) && g('Firebase.onDisconnect().setWithPriority failed: ' + this.Da + ' is a read-only object.');
    var d = this.Fb, e = this.S, f = Q(a, b);
    jd(d.u, e.toString(), f.V(j), function (a, b) {
      'ok' === a && od(d.R, e, f);
      X(c, a, b);
    });
  };
  $.prototype.setWithPriority = $.prototype.bb;
  $.prototype.update = function (a, b) {
    z('Firebase.onDisconnect().update', 1, 2, arguments.length);
    D('Firebase.onDisconnect().update', this.S);
    Ea('Firebase.onDisconnect().update', a);
    B('Firebase.onDisconnect().update', 2, b, j);
    var c = this.Fb, d = this.S, e = j, f;
    for (f in a)
      e = l;
    if (e)
      L('onDisconnect().update() called with empty data.  Don\'t do anything.'), X(b, 'ok');
    else {
      e = c.u;
      f = d.toString();
      var h = function (e, f) {
        if ('ok' === e)
          for (var h in a) {
            var p = Q(a[h]);
            od(c.R, d.F(h), p);
          }
        X(b, e, f);
      };
      e.P ? kd(e, 'om', f, a, h) : e.wb.push({
        Mc: f,
        action: 'om',
        data: a,
        C: h
      });
    }
  };
  $.prototype.update = $.prototype.update;
  var qe, re = 0, se = [];
  qe = function (a) {
    var b = a === re;
    re = a;
    for (var c = Array(8), d = 7; 0 <= d; d--)
      c[d] = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'.charAt(a % 64), a = Math.floor(a / 64);
    y(0 === a);
    a = c.join('');
    if (b) {
      for (d = 11; 0 <= d && 63 === se[d]; d--)
        se[d] = 0;
      se[d]++;
    } else
      for (d = 0; 12 > d; d++)
        se[d] = Math.floor(64 * Math.random());
    for (d = 0; 12 > d; d++)
      a += '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'.charAt(se[d]);
    y(20 === a.length, 'NextPushId: Length should be 20.');
    return a;
  };
  function H() {
    var a, b, c;
    if (arguments[0] instanceof be)
      c = arguments[0], a = arguments[1];
    else {
      z('new Firebase', 1, 2, arguments.length);
      var d = arguments[0];
      b = a = '';
      var e = j, f = '';
      if (u(d)) {
        var h = d.indexOf('//');
        if (0 <= h)
          var i = d.substring(0, h - 1), d = d.substring(h + 2);
        h = d.indexOf('/');
        -1 === h && (h = d.length);
        a = d.substring(0, h);
        var d = d.substring(h + 1), m = a.split('.');
        if (3 == m.length) {
          h = m[2].indexOf(':');
          e = 0 <= h ? 'https' === i : j;
          if ('firebase' === m[1])
            Wb(a + ' is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead');
          else {
            b = m[0];
            f = '';
            d = ('/' + d).split('/');
            for (i = 0; i < d.length; i++)
              if (0 < d[i].length) {
                h = d[i];
                try {
                  h = decodeURIComponent(h.replace(/\+/g, ' '));
                } catch (n) {
                }
                f += '/' + h;
              }
          }
          b = b.toLowerCase();
        } else
          b = k;
      }
      e || 'undefined' !== typeof window && (window.location && window.location.protocol && -1 !== window.location.protocol.indexOf('https:')) && M('Insecure Firebase access from a secure page. Please use https in calls to new Firebase().');
      a = new pb(a, e, b);
      b = new J(f);
      e = b.toString();
      if (!(d = !u(a.host)))
        if (!(d = 0 === a.host.length))
          if (!(d = !za(a.Sb)))
            if (d = 0 !== e.length)
              e && (e = e.replace(/^\/*\.info(\/|$)/, '/')), d = !(u(e) && 0 !== e.length && !ya.test(e));
      d && g(Error(A('new Firebase', 1, l) + 'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".'));
      arguments[1] ? arguments[1] instanceof Y ? c = arguments[1] : g(Error('Expected a valid Firebase.Context for second argument to new Firebase()')) : c = Y.mb();
      e = a.toString();
      d = wa(c.$a, e);
      d || (d = new be(a), c.$a[e] = d);
      c = d;
      a = b;
    }
    F.call(this, c, a);
  }
  la(H, F);
  var te = H, ue = ['Firebase'], ve = ca;
  !(ue[0] in ve) && ve.execScript && ve.execScript('var ' + ue[0]);
  for (var we; ue.length && (we = ue.shift());)
    !ue.length && t(te) ? ve[we] = te : ve = ve[we] ? ve[we] : ve[we] = {};
  H.prototype.name = function () {
    z('Firebase.name', 0, 0, arguments.length);
    return this.path.f() ? k : this.path.Z < this.path.m.length ? this.path.m[this.path.m.length - 1] : k;
  };
  H.prototype.name = H.prototype.name;
  H.prototype.F = function (a) {
    z('Firebase.child', 1, 1, arguments.length);
    if (ha(a))
      a = String(a);
    else if (!(a instanceof J))
      if (E(this.path) === k) {
        var b = a;
        b && (b = b.replace(/^\/*\.info(\/|$)/, '/'));
        Ia('Firebase.child', b);
      } else
        Ia('Firebase.child', a);
    return new H(this.n, this.path.F(a));
  };
  H.prototype.child = H.prototype.F;
  H.prototype.parent = function () {
    z('Firebase.parent', 0, 0, arguments.length);
    var a = this.path.parent();
    return a === k ? k : new H(this.n, a);
  };
  H.prototype.parent = H.prototype.parent;
  H.prototype.root = function () {
    z('Firebase.ref', 0, 0, arguments.length);
    for (var a = this; a.parent() !== k;)
      a = a.parent();
    return a;
  };
  H.prototype.root = H.prototype.root;
  H.prototype.toString = function () {
    z('Firebase.toString', 0, 0, arguments.length);
    var a;
    if (this.parent() === k)
      a = this.n.toString();
    else {
      a = this.parent().toString() + '/';
      var b = this.name();
      a += encodeURIComponent(String(b));
    }
    return a;
  };
  H.prototype.toString = H.prototype.toString;
  H.prototype.set = function (a, b) {
    z('Firebase.set', 1, 2, arguments.length);
    D('Firebase.set', this.path);
    Aa('Firebase.set', a, l);
    B('Firebase.set', 2, b, j);
    return this.n.bb(this.path, a, k, b);
  };
  H.prototype.set = H.prototype.set;
  H.prototype.update = function (a, b) {
    z('Firebase.update', 1, 2, arguments.length);
    D('Firebase.update', this.path);
    Ea('Firebase.update', a);
    B('Firebase.update', 2, b, j);
    C(a, '.priority') && g(Error('update() does not currently support updating .priority.'));
    return this.n.update(this.path, a, b);
  };
  H.prototype.update = H.prototype.update;
  H.prototype.bb = function (a, b, c) {
    z('Firebase.setWithPriority', 2, 3, arguments.length);
    D('Firebase.setWithPriority', this.path);
    Aa('Firebase.setWithPriority', a, l);
    Fa('Firebase.setWithPriority', 2, b, l);
    B('Firebase.setWithPriority', 3, c, j);
    ('.length' === this.name() || '.keys' === this.name()) && g('Firebase.setWithPriority failed: ' + this.name() + ' is a read-only object.');
    return this.n.bb(this.path, a, b, c);
  };
  H.prototype.setWithPriority = H.prototype.bb;
  H.prototype.remove = function (a) {
    z('Firebase.remove', 0, 1, arguments.length);
    D('Firebase.remove', this.path);
    B('Firebase.remove', 1, a, j);
    this.set(k, a);
  };
  H.prototype.remove = H.prototype.remove;
  H.prototype.transaction = function (a, b, c) {
    function d() {
    }
    z('Firebase.transaction', 1, 3, arguments.length);
    D('Firebase.transaction', this.path);
    B('Firebase.transaction', 1, a, l);
    B('Firebase.transaction', 2, b, j);
    t(c) && 'boolean' != typeof c && g(Error(A('Firebase.transaction', 3, j) + 'must be a boolean.'));
    ('.length' === this.name() || '.keys' === this.name()) && g('Firebase.transaction failed: ' + this.name() + ' is a read-only object.');
    'undefined' === typeof c && (c = j);
    var e = this.n, f = this.path, h = c;
    e.e('transaction on ' + f);
    var i = new H(e, f);
    i.Xa('value', d);
    var h = {
        path: f,
        update: a,
        C: b,
        status: k,
        hd: Nb(),
        qc: h,
        nd: 0,
        nc: function () {
          i.ub('value', d);
        },
        oc: k
      }, m = h.update(T(e.fb, f).V());
    if (t(m)) {
      Ba('transaction failed: Data returned ', m);
      h.status = 1;
      var n = K(e.eb, f), p = n.k() || [];
      p.push(h);
      Qa(n, p);
      p = 'object' === typeof m && m !== k && C(m, '.priority') ? m['.priority'] : T(e.g.O, f).j();
      n = ee(e);
      m = Q(m, p);
      m = ae(m, n);
      U(e.fb, f, m);
      h.qc && (U(e.g.ma, f, m), W(e.G, f, [f]));
      je(e);
    } else
      h.nc(), h.C && (e = me(e, f), h.C(k, l, e));
  };
  H.prototype.transaction = H.prototype.transaction;
  H.prototype.Pc = function (a, b) {
    z('Firebase.setPriority', 1, 2, arguments.length);
    D('Firebase.setPriority', this.path);
    Fa('Firebase.setPriority', 1, a, l);
    B('Firebase.setPriority', 2, b, j);
    this.n.Pc(this.path, a, b);
  };
  H.prototype.setPriority = H.prototype.Pc;
  H.prototype.push = function (a, b) {
    z('Firebase.push', 0, 2, arguments.length);
    D('Firebase.push', this.path);
    Aa('Firebase.push', a, j);
    B('Firebase.push', 2, b, j);
    var c = de(this.n), c = qe(c), c = this.F(c);
    'undefined' !== typeof a && a !== k && c.set(a, b);
    return c;
  };
  H.prototype.push = H.prototype.push;
  H.prototype.ha = function () {
    return new $(this.n, this.path, this.name());
  };
  H.prototype.onDisconnect = H.prototype.ha;
  H.prototype.Od = function () {
    M('FirebaseRef.removeOnDisconnect() being deprecated. Please use FirebaseRef.onDisconnect().remove() instead.');
    this.ha().remove();
    ie(this.n);
  };
  H.prototype.removeOnDisconnect = H.prototype.Od;
  H.prototype.Sd = function (a) {
    M('FirebaseRef.setOnDisconnect(value) being deprecated. Please use FirebaseRef.onDisconnect().set(value) instead.');
    this.ha().set(a);
    ie(this.n);
  };
  H.prototype.setOnDisconnect = H.prototype.Sd;
  H.prototype.hb = function (a, b, c) {
    z('Firebase.auth', 1, 3, arguments.length);
    u(a) || g(Error(A('Firebase.auth', 1, l) + 'must be a valid credential (a string).'));
    B('Firebase.auth', 2, b, j);
    B('Firebase.auth', 3, b, j);
    this.n.hb(a, b, c);
  };
  H.prototype.auth = H.prototype.hb;
  H.prototype.Kb = function (a) {
    z('Firebase.unauth', 0, 1, arguments.length);
    B('Firebase.unauth', 1, a, j);
    this.n.Kb(a);
  };
  H.prototype.unauth = H.prototype.Kb;
  H.goOffline = function () {
    z('Firebase.goOffline', 0, 0, arguments.length);
    Y.mb().Ia();
  };
  H.goOnline = function () {
    z('Firebase.goOnline', 0, 0, arguments.length);
    Y.mb().ab();
  };
  function Tb(a, b) {
    y(!b || a === j || a === l, 'Can\'t turn on custom loggers persistently.');
    a === j ? ('undefined' !== typeof console && ('function' === typeof console.log ? Rb = v(console.log, console) : 'object' === typeof console.log && (Rb = function (a) {
      console.log(a);
    })), b && ob.set('logging_enabled', j)) : a ? Rb = a : (Rb = k, ob.remove('logging_enabled'));
  }
  H.enableLogging = Tb;
  H.ServerValue = { TIMESTAMP: { '.sv': 'timestamp' } };
  H.INTERNAL = Z;
  H.Context = Y;
}());
(function () {
  var COMPILED = !0, goog = goog || {};
  goog.global = this;
  goog.exportPath_ = function (a, b, c) {
    a = a.split('.');
    c = c || goog.global;
    a[0] in c || !c.execScript || c.execScript('var ' + a[0]);
    for (var d; a.length && (d = a.shift());)
      a.length || void 0 === b ? c = c[d] ? c[d] : c[d] = {} : c[d] = b;
  };
  goog.define = function (a, b) {
    var c = b;
    COMPILED || goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, a) && (c = goog.global.CLOSURE_DEFINES[a]);
    goog.exportPath_(a, c);
  };
  goog.DEBUG = !0;
  goog.LOCALE = 'en';
  goog.TRUSTED_SITE = !0;
  goog.provide = function (a) {
    if (!COMPILED) {
      if (goog.isProvided_(a))
        throw Error('Namespace "' + a + '" already declared.');
      delete goog.implicitNamespaces_[a];
      for (var b = a; (b = b.substring(0, b.lastIndexOf('.'))) && !goog.getObjectByName(b);)
        goog.implicitNamespaces_[b] = !0;
    }
    goog.exportPath_(a);
  };
  goog.setTestOnly = function (a) {
    if (COMPILED && !goog.DEBUG)
      throw a = a || '', Error('Importing test-only code into non-debug environment' + a ? ': ' + a : '.');
  };
  goog.forwardDeclare = function (a) {
  };
  COMPILED || (goog.isProvided_ = function (a) {
    return !goog.implicitNamespaces_[a] && goog.isDefAndNotNull(goog.getObjectByName(a));
  }, goog.implicitNamespaces_ = {});
  goog.getObjectByName = function (a, b) {
    for (var c = a.split('.'), d = b || goog.global, e; e = c.shift();)
      if (goog.isDefAndNotNull(d[e]))
        d = d[e];
      else
        return null;
    return d;
  };
  goog.globalize = function (a, b) {
    var c = b || goog.global, d;
    for (d in a)
      c[d] = a[d];
  };
  goog.addDependency = function (a, b, c) {
    if (goog.DEPENDENCIES_ENABLED) {
      var d;
      a = a.replace(/\\/g, '/');
      for (var e = goog.dependencies_, f = 0; d = b[f]; f++)
        e.nameToPath[d] = a, a in e.pathToNames || (e.pathToNames[a] = {}), e.pathToNames[a][d] = !0;
      for (d = 0; b = c[d]; d++)
        a in e.requires || (e.requires[a] = {}), e.requires[a][b] = !0;
    }
  };
  goog.ENABLE_DEBUG_LOADER = !0;
  goog.require = function (a) {
    if (!COMPILED && !goog.isProvided_(a)) {
      if (goog.ENABLE_DEBUG_LOADER) {
        var b = goog.getPathFromDeps_(a);
        if (b) {
          goog.included_[b] = !0;
          goog.writeScripts_();
          return;
        }
      }
      a = 'goog.require could not find: ' + a;
      goog.global.console && goog.global.console.error(a);
      throw Error(a);
    }
  };
  goog.basePath = '';
  goog.nullFunction = function () {
  };
  goog.identityFunction = function (a, b) {
    return a;
  };
  goog.abstractMethod = function () {
    throw Error('unimplemented abstract method');
  };
  goog.addSingletonGetter = function (a) {
    a.getInstance = function () {
      if (a.instance_)
        return a.instance_;
      goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = a);
      return a.instance_ = new a();
    };
  };
  goog.instantiatedSingletons_ = [];
  goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
  goog.DEPENDENCIES_ENABLED && (goog.included_ = {}, goog.dependencies_ = {
    pathToNames: {},
    nameToPath: {},
    requires: {},
    visited: {},
    written: {}
  }, goog.inHtmlDocument_ = function () {
    var a = goog.global.document;
    return 'undefined' != typeof a && 'write' in a;
  }, goog.findBasePath_ = function () {
    if (goog.global.CLOSURE_BASE_PATH)
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
    else if (goog.inHtmlDocument_())
      for (var a = goog.global.document.getElementsByTagName('script'), b = a.length - 1; 0 <= b; --b) {
        var c = a[b].src, d = c.lastIndexOf('?'), d = -1 == d ? c.length : d;
        if ('base.js' == c.substr(d - 7, 7)) {
          goog.basePath = c.substr(0, d - 7);
          break;
        }
      }
  }, goog.importScript_ = function (a) {
    var b = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    !goog.dependencies_.written[a] && b(a) && (goog.dependencies_.written[a] = !0);
  }, goog.writeScriptTag_ = function (a) {
    if (goog.inHtmlDocument_()) {
      var b = goog.global.document;
      if ('complete' == b.readyState) {
        if (/\bdeps.js$/.test(a))
          return !1;
        throw Error('Cannot write "' + a + '" after document load');
      }
      b.write('<script type="text/javascript" src="' + a + '"></script>');
      return !0;
    }
    return !1;
  }, goog.writeScripts_ = function () {
    function a(e) {
      if (!(e in d.written)) {
        if (!(e in d.visited) && (d.visited[e] = !0, e in d.requires))
          for (var g in d.requires[e])
            if (!goog.isProvided_(g))
              if (g in d.nameToPath)
                a(d.nameToPath[g]);
              else
                throw Error('Undefined nameToPath for ' + g);
        e in c || (c[e] = !0, b.push(e));
      }
    }
    var b = [], c = {}, d = goog.dependencies_, e;
    for (e in goog.included_)
      d.written[e] || a(e);
    for (e = 0; e < b.length; e++)
      if (b[e])
        goog.importScript_(goog.basePath + b[e]);
      else
        throw Error('Undefined script input');
  }, goog.getPathFromDeps_ = function (a) {
    return a in goog.dependencies_.nameToPath ? goog.dependencies_.nameToPath[a] : null;
  }, goog.findBasePath_(), goog.global.CLOSURE_NO_DEPS || goog.importScript_(goog.basePath + 'deps.js'));
  goog.typeOf = function (a) {
    var b = typeof a;
    if ('object' == b)
      if (a) {
        if (a instanceof Array)
          return 'array';
        if (a instanceof Object)
          return b;
        var c = Object.prototype.toString.call(a);
        if ('[object Window]' == c)
          return 'object';
        if ('[object Array]' == c || 'number' == typeof a.length && 'undefined' != typeof a.splice && 'undefined' != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable('splice'))
          return 'array';
        if ('[object Function]' == c || 'undefined' != typeof a.call && 'undefined' != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable('call'))
          return 'function';
      } else
        return 'null';
    else if ('function' == b && 'undefined' == typeof a.call)
      return 'object';
    return b;
  };
  goog.isDef = function (a) {
    return void 0 !== a;
  };
  goog.isNull = function (a) {
    return null === a;
  };
  goog.isDefAndNotNull = function (a) {
    return null != a;
  };
  goog.isArray = function (a) {
    return 'array' == goog.typeOf(a);
  };
  goog.isArrayLike = function (a) {
    var b = goog.typeOf(a);
    return 'array' == b || 'object' == b && 'number' == typeof a.length;
  };
  goog.isDateLike = function (a) {
    return goog.isObject(a) && 'function' == typeof a.getFullYear;
  };
  goog.isString = function (a) {
    return 'string' == typeof a;
  };
  goog.isBoolean = function (a) {
    return 'boolean' == typeof a;
  };
  goog.isNumber = function (a) {
    return 'number' == typeof a;
  };
  goog.isFunction = function (a) {
    return 'function' == goog.typeOf(a);
  };
  goog.isObject = function (a) {
    var b = typeof a;
    return 'object' == b && null != a || 'function' == b;
  };
  goog.getUid = function (a) {
    return a[goog.UID_PROPERTY_] || (a[goog.UID_PROPERTY_] = ++goog.uidCounter_);
  };
  goog.hasUid = function (a) {
    return !!a[goog.UID_PROPERTY_];
  };
  goog.removeUid = function (a) {
    'removeAttribute' in a && a.removeAttribute(goog.UID_PROPERTY_);
    try {
      delete a[goog.UID_PROPERTY_];
    } catch (b) {
    }
  };
  goog.UID_PROPERTY_ = 'closure_uid_' + (1000000000 * Math.random() >>> 0);
  goog.uidCounter_ = 0;
  goog.getHashCode = goog.getUid;
  goog.removeHashCode = goog.removeUid;
  goog.cloneObject = function (a) {
    var b = goog.typeOf(a);
    if ('object' == b || 'array' == b) {
      if (a.clone)
        return a.clone();
      var b = 'array' == b ? [] : {}, c;
      for (c in a)
        b[c] = goog.cloneObject(a[c]);
      return b;
    }
    return a;
  };
  goog.bindNative_ = function (a, b, c) {
    return a.call.apply(a.bind, arguments);
  };
  goog.bindJs_ = function (a, b, c) {
    if (!a)
      throw Error();
    if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);
      return function () {
        var c = Array.prototype.slice.call(arguments);
        Array.prototype.unshift.apply(c, d);
        return a.apply(b, c);
      };
    }
    return function () {
      return a.apply(b, arguments);
    };
  };
  goog.bind = function (a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf('native code') ? goog.bind = goog.bindNative_ : goog.bind = goog.bindJs_;
    return goog.bind.apply(null, arguments);
  };
  goog.partial = function (a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function () {
      var b = c.slice();
      b.push.apply(b, arguments);
      return a.apply(this, b);
    };
  };
  goog.mixin = function (a, b) {
    for (var c in b)
      a[c] = b[c];
  };
  goog.now = goog.TRUSTED_SITE && Date.now || function () {
    return +new Date();
  };
  goog.globalEval = function (a) {
    if (goog.global.execScript)
      goog.global.execScript(a, 'JavaScript');
    else if (goog.global.eval)
      if (null == goog.evalWorksForGlobals_ && (goog.global.eval('var _et_ = 1;'), 'undefined' != typeof goog.global._et_ ? (delete goog.global._et_, goog.evalWorksForGlobals_ = !0) : goog.evalWorksForGlobals_ = !1), goog.evalWorksForGlobals_)
        goog.global.eval(a);
      else {
        var b = goog.global.document, c = b.createElement('script');
        c.type = 'text/javascript';
        c.defer = !1;
        c.appendChild(b.createTextNode(a));
        b.body.appendChild(c);
        b.body.removeChild(c);
      }
    else
      throw Error('goog.globalEval not available');
  };
  goog.evalWorksForGlobals_ = null;
  goog.getCssName = function (a, b) {
    var c = function (a) {
        return goog.cssNameMapping_[a] || a;
      }, d = function (a) {
        a = a.split('-');
        for (var b = [], d = 0; d < a.length; d++)
          b.push(c(a[d]));
        return b.join('-');
      }, d = goog.cssNameMapping_ ? 'BY_WHOLE' == goog.cssNameMappingStyle_ ? c : d : function (a) {
        return a;
      };
    return b ? a + '-' + d(b) : d(a);
  };
  goog.setCssNameMapping = function (a, b) {
    goog.cssNameMapping_ = a;
    goog.cssNameMappingStyle_ = b;
  };
  !COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING && (goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING);
  goog.getMsg = function (a, b) {
    var c = b || {}, d;
    for (d in c) {
      var e = ('' + c[d]).replace(/\$/g, '$$$$');
      a = a.replace(RegExp('\\{\\$' + d + '\\}', 'gi'), e);
    }
    return a;
  };
  goog.getMsgWithFallback = function (a, b) {
    return a;
  };
  goog.exportSymbol = function (a, b, c) {
    goog.exportPath_(a, b, c);
  };
  goog.exportProperty = function (a, b, c) {
    a[b] = c;
  };
  goog.inherits = function (a, b) {
    function c() {
    }
    c.prototype = b.prototype;
    a.superClass_ = b.prototype;
    a.prototype = new c();
    a.prototype.constructor = a;
    a.base = function (a, c, f) {
      var g = Array.prototype.slice.call(arguments, 2);
      return b.prototype[c].apply(a, g);
    };
  };
  goog.base = function (a, b, c) {
    var d = arguments.callee.caller;
    if (goog.DEBUG && !d)
      throw Error('arguments.caller not defined.  goog.base() expects not to be running in strict mode. See http://www.ecma-international.org/ecma-262/5.1/#sec-C');
    if (d.superClass_)
      return d.superClass_.constructor.apply(a, Array.prototype.slice.call(arguments, 1));
    for (var e = Array.prototype.slice.call(arguments, 2), f = !1, g = a.constructor; g; g = g.superClass_ && g.superClass_.constructor)
      if (g.prototype[b] === d)
        f = !0;
      else if (f)
        return g.prototype[b].apply(a, e);
    if (a[b] === d)
      return a.constructor.prototype[b].apply(a, e);
    throw Error('goog.base called from a method of one name to a method of a different name');
  };
  goog.scope = function (a) {
    a.call(goog.global);
  };
  var fb = { simplelogin: {} };
  fb.simplelogin.Vars_ = function () {
    this.apiHost = 'https://auth.firebase.com';
  };
  fb.simplelogin.Vars_.prototype.setApiHost = function (a) {
    this.apiHost = a;
  };
  fb.simplelogin.Vars_.prototype.getApiHost = function () {
    return this.apiHost;
  };
  fb.simplelogin.Vars = new fb.simplelogin.Vars_();
  goog.json = {};
  goog.json.USE_NATIVE_JSON = !1;
  goog.json.isValid_ = function (a) {
    return /^\s*$/.test(a) ? !1 : /^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g, '@').replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g, ''));
  };
  goog.json.parse = goog.json.USE_NATIVE_JSON ? goog.global.JSON.parse : function (a) {
    a = String(a);
    if (goog.json.isValid_(a))
      try {
        return eval('(' + a + ')');
      } catch (b) {
      }
    throw Error('Invalid JSON string: ' + a);
  };
  goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? goog.global.JSON.parse : function (a) {
    return eval('(' + a + ')');
  };
  goog.json.serialize = goog.json.USE_NATIVE_JSON ? goog.global.JSON.stringify : function (a, b) {
    return new goog.json.Serializer(b).serialize(a);
  };
  goog.json.Serializer = function (a) {
    this.replacer_ = a;
  };
  goog.json.Serializer.prototype.serialize = function (a) {
    var b = [];
    this.serialize_(a, b);
    return b.join('');
  };
  goog.json.Serializer.prototype.serialize_ = function (a, b) {
    switch (typeof a) {
    case 'string':
      this.serializeString_(a, b);
      break;
    case 'number':
      this.serializeNumber_(a, b);
      break;
    case 'boolean':
      b.push(a);
      break;
    case 'undefined':
      b.push('null');
      break;
    case 'object':
      if (null == a) {
        b.push('null');
        break;
      }
      if (goog.isArray(a)) {
        this.serializeArray(a, b);
        break;
      }
      this.serializeObject_(a, b);
      break;
    case 'function':
      break;
    default:
      throw Error('Unknown type: ' + typeof a);
    }
  };
  goog.json.Serializer.charToJsonCharCache_ = {
    '"': '\\"',
    '\\': '\\\\',
    '/': '\\/',
    '\b': '\\b',
    '\f': '\\f',
    '\n': '\\n',
    '\r': '\\r',
    '\t': '\\t',
    '\x0B': '\\u000b'
  };
  goog.json.Serializer.charsToReplace_ = /\uffff/.test('\uffff') ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
  goog.json.Serializer.prototype.serializeString_ = function (a, b) {
    b.push('"', a.replace(goog.json.Serializer.charsToReplace_, function (a) {
      if (a in goog.json.Serializer.charToJsonCharCache_)
        return goog.json.Serializer.charToJsonCharCache_[a];
      var b = a.charCodeAt(0), e = '\\u';
      16 > b ? e += '000' : 256 > b ? e += '00' : 4096 > b && (e += '0');
      return goog.json.Serializer.charToJsonCharCache_[a] = e + b.toString(16);
    }), '"');
  };
  goog.json.Serializer.prototype.serializeNumber_ = function (a, b) {
    b.push(isFinite(a) && !isNaN(a) ? a : 'null');
  };
  goog.json.Serializer.prototype.serializeArray = function (a, b) {
    var c = a.length;
    b.push('[');
    for (var d = '', e = 0; e < c; e++)
      b.push(d), d = a[e], this.serialize_(this.replacer_ ? this.replacer_.call(a, String(e), d) : d, b), d = ',';
    b.push(']');
  };
  goog.json.Serializer.prototype.serializeObject_ = function (a, b) {
    b.push('{');
    var c = '', d;
    for (d in a)
      if (Object.prototype.hasOwnProperty.call(a, d)) {
        var e = a[d];
        'function' != typeof e && (b.push(c), this.serializeString_(d, b), b.push(':'), this.serialize_(this.replacer_ ? this.replacer_.call(a, d, e) : e, b), c = ',');
      }
    b.push('}');
  };
  fb.simplelogin.util = {};
  fb.simplelogin.util.json = {};
  fb.simplelogin.util.json.parse = function (a) {
    return 'undefined' !== typeof JSON && goog.isDef(JSON.parse) ? JSON.parse(a) : goog.json.parse(a);
  };
  fb.simplelogin.util.json.stringify = function (a) {
    return 'undefined' !== typeof JSON && goog.isDef(JSON.stringify) ? JSON.stringify(a) : goog.json.serialize(a);
  };
  fb.simplelogin.transports = {};
  fb.simplelogin.transports.Transport = {};
  fb.simplelogin.Transport = function () {
  };
  fb.simplelogin.Transport.prototype.open = function (a, b, c) {
  };
  fb.simplelogin.transports.Popup = {};
  fb.simplelogin.Popup = function () {
  };
  fb.simplelogin.Popup.prototype.open = function (a, b, c) {
  };
  fb.simplelogin.util.misc = {};
  fb.simplelogin.util.misc.parseUrl = function (a) {
    var b = document.createElement('a');
    b.href = a;
    return {
      protocol: b.protocol.replace(':', ''),
      host: b.hostname,
      port: b.port,
      query: b.search,
      params: fb.simplelogin.util.misc.parseQuerystring(b.search),
      hash: b.hash.replace('#', ''),
      path: b.pathname.replace(/^([^\/])/, '/$1')
    };
  };
  fb.simplelogin.util.misc.parseQuerystring = function (a) {
    var b = {};
    a = a.replace(/^\?/, '').split('&');
    for (var c = 0; c < a.length; c++)
      if (a[c]) {
        var d = a[c].split('=');
        b[d[0]] = d[1];
      }
    return b;
  };
  fb.simplelogin.util.misc.parseSubdomain = function (a) {
    var b = '';
    try {
      var c = fb.simplelogin.util.misc.parseUrl(a).host.split('.');
      2 < c.length && (b = c.slice(0, -2).join('.'));
    } catch (d) {
    }
    return b;
  };
  var popupTimeout = 40000;
  fb.simplelogin.transports.CordovaInAppBrowser_ = function () {
  };
  fb.simplelogin.transports.CordovaInAppBrowser_.prototype.open = function (a, b, c) {
    callbackInvoked = !1;
    var d = function () {
        var a = Array.prototype.slice.apply(arguments);
        callbackInvoked || (callbackInvoked = !0, c.apply(null, a));
      }, e = window.open(a + '&transport=internal-redirect-hash', 'blank', 'location=no');
    e.addEventListener('loadstop', function (a) {
      var b;
      if (a && a.url && (a = fb.simplelogin.util.misc.parseUrl(a.url), '/blank/page.html' === a.path)) {
        e.close();
        try {
          var c = fb.simplelogin.util.misc.parseQuerystring(decodeURIComponent(a.hash));
          a = {};
          for (var k in c)
            a[k] = fb.simplelogin.util.json.parse(c[k]);
          b = a;
        } catch (l) {
        }
        b && b.token && b.user ? d(null, b) : b && b.error ? d(b.error) : d({
          code: 'UNKNOWN_ERROR',
          message: 'An unknown error occurred.'
        });
      }
    });
    e.addEventListener('exit', function (a) {
      d({
        code: 'USER_DENIED',
        message: 'User cancelled the authentication request.'
      });
    });
    setTimeout(function () {
      e && e.close && e.close();
    }, popupTimeout);
  };
  fb.simplelogin.transports.CordovaInAppBrowser = new fb.simplelogin.transports.CordovaInAppBrowser_();
  fb.simplelogin.Errors = {};
  var messagePrefix = 'FirebaseSimpleLogin: ', errors = {
      UNKNOWN_ERROR: 'An unknown error occurred.',
      INVALID_EMAIL: 'Invalid email specified.',
      INVALID_PASSWORD: 'Invalid password specified.',
      USER_DENIED: 'User cancelled the authentication request.',
      TRIGGER_IO_TABS: 'The "forge.tabs" module required when using Firebase Simple Login and                         Trigger.io. Without this module included and enabled, login attempts to                         OAuth authentication providers will not be able to complete.'
    };
  fb.simplelogin.Errors.format = function (a, b) {
    var c = a || 'UNKNOWN_ERROR', d = b || errors[c], e = {}, f = arguments;
    2 === f.length ? (c = f[0], d = f[1]) : 1 === f.length && ('object' === typeof f[0] && f[0].code && f[0].message ? (c = f[0].code, d = f[0].message, e = f[0].data) : 'string' === typeof f[0] && (c = f[0], d = ''));
    d = Error(messagePrefix + d);
    d.code = c;
    e && (d.data = e);
    return d;
  };
  fb.simplelogin.Errors.get = function (a) {
    errors[a] || (a = 'UNKNOWN_ERROR');
    return fb.simplelogin.Errors.format(a, errors[a]);
  };
  var RELAY_FRAME_NAME = '__winchan_relay_frame', CLOSE_CMD = 'die';
  function addListener(a, b, c) {
    a.attachEvent ? a.attachEvent('on' + b, c) : a.addEventListener && a.addEventListener(b, c, !1);
  }
  function removeListener(a, b, c) {
    a.detachEvent ? a.detachEvent('on' + b, c) : a.removeEventListener && a.removeEventListener(b, c, !1);
  }
  function extractOrigin(a) {
    /^https?:\/\//.test(a) || (a = window.location.href);
    var b = /^(https?:\/\/[\-_a-zA-Z\.0-9:]+)/.exec(a);
    return b ? b[1] : a;
  }
  function findRelay() {
    for (var a = window.location, b = window.opener.frames, a = a.protocol + '//' + a.host, c = b.length - 1; 0 <= c; c--)
      try {
        if (0 === b[c].location.href.indexOf(a) && b[c].name === RELAY_FRAME_NAME)
          return b[c];
      } catch (d) {
      }
  }
  var isInternetExplorer = function () {
      var a, b = -1, c = navigator.userAgent;
      'Microsoft Internet Explorer' === navigator.appName ? (a = /MSIE ([0-9]{1,}[\.0-9]{0,})/, (a = c.match(a)) && 1 < a.length && (b = parseFloat(a[1]))) : -1 < c.indexOf('Trident') && (a = /rv:([0-9]{2,2}[\.0-9]{0,})/, (a = c.match(a)) && 1 < a.length && (b = parseFloat(a[1])));
      return 8 <= b;
    }();
  fb.simplelogin.transports.WinChan_ = function () {
  };
  fb.simplelogin.transports.WinChan_.prototype.open = function (a, b, c) {
    function d() {
      g && document.body.removeChild(g);
      g = void 0;
      m && (m = clearInterval(m));
      removeListener(window, 'message', e);
      removeListener(window, 'unload', d);
      if (l)
        try {
          l.close();
        } catch (a) {
          k.postMessage(CLOSE_CMD, h);
        }
      l = k = void 0;
    }
    function e(a) {
      if (a.origin === h)
        try {
          var b = fb.simplelogin.util.json.parse(a.data);
          'ready' === b.a ? k.postMessage(n, h) : 'error' === b.a ? (d(), c && (c(b.d), c = null)) : 'response' === b.a && (d(), c && (c(null, b.d), c = null));
        } catch (e) {
        }
    }
    if (!c)
      throw 'missing required callback argument';
    b.url = a;
    var f;
    b.url || (f = 'missing required \'url\' parameter');
    b.relay_url || (f = 'missing required \'relay_url\' parameter');
    f && setTimeout(function () {
      c(f);
    }, 0);
    b.window_name || (b.window_name = null);
    if (!b.window_features || fb.simplelogin.util.env.isFennec())
      b.window_features = void 0;
    var g, h = extractOrigin(b.url);
    if (h !== extractOrigin(b.relay_url))
      return setTimeout(function () {
        c('invalid arguments: origin of url and relay_url must match');
      }, 0);
    var k;
    isInternetExplorer && (g = document.createElement('iframe'), g.setAttribute('src', b.relay_url), g.style.display = 'none', g.setAttribute('name', RELAY_FRAME_NAME), document.body.appendChild(g), k = g.contentWindow);
    var l = window.open(b.url, b.window_name, b.window_features);
    k || (k = l);
    var m = setInterval(function () {
        l && l.closed && (d(), c && (c('unknown closed window'), c = null));
      }, 500), n = fb.simplelogin.util.json.stringify({
        a: 'request',
        d: b.params
      });
    addListener(window, 'unload', d);
    addListener(window, 'message', e);
    return {
      close: d,
      focus: function () {
        if (l)
          try {
            l.focus();
          } catch (a) {
          }
      }
    };
  };
  goog.exportSymbol('fb.simplelogin.transports.WinChan_.prototype.open', fb.simplelogin.transports.WinChan_.prototype.open);
  fb.simplelogin.transports.WinChan_.prototype.onOpen = function (a) {
    function b(a) {
      a = fb.simplelogin.util.json.stringify(a);
      isInternetExplorer ? f.doPost(a, e) : f.postMessage(a, e);
    }
    function c(d) {
      var f;
      try {
        f = fb.simplelogin.util.json.parse(d.data);
      } catch (g) {
      }
      f && 'request' === f.a && (removeListener(window, 'message', c), e = d.origin, a && setTimeout(function () {
        a(e, f.d, function (c) {
          a = void 0;
          b({
            a: 'response',
            d: c
          });
        });
      }, 0));
    }
    function d(a) {
      if (a.data === CLOSE_CMD)
        try {
          window.close();
        } catch (b) {
        }
    }
    var e = '*', f = isInternetExplorer ? findRelay() : window.opener;
    if (!f)
      throw 'can\'t find relay frame';
    addListener(isInternetExplorer ? f : window, 'message', c);
    addListener(isInternetExplorer ? f : window, 'message', d);
    try {
      b({ a: 'ready' });
    } catch (g) {
      addListener(f, 'load', function (a) {
        b({ a: 'ready' });
      });
    }
    var h = function () {
      try {
        removeListener(isInternetExplorer ? f : window, 'message', d);
      } catch (c) {
      }
      a && b({
        a: 'error',
        d: 'client closed window'
      });
      a = void 0;
      try {
        window.close();
      } catch (e) {
      }
    };
    addListener(window, 'unload', h);
    return {
      detach: function () {
        removeListener(window, 'unload', h);
      }
    };
  };
  goog.exportSymbol('fb.simplelogin.transports.WinChan_.prototype.onOpen', fb.simplelogin.transports.WinChan_.prototype.onOpen);
  fb.simplelogin.transports.WinChan_.prototype.isAvailable = function () {
    return fb.simplelogin.util.json && fb.simplelogin.util.json.parse && fb.simplelogin.util.json.stringify && window.postMessage;
  };
  fb.simplelogin.transports.WinChan = new fb.simplelogin.transports.WinChan_();
  fb.simplelogin.transports.TriggerIoTab_ = function () {
  };
  fb.simplelogin.transports.TriggerIoTab_.prototype.open = function (a, b, c) {
    callbackInvoked = !1;
    var d = function () {
      var a = Array.prototype.slice.apply(arguments);
      callbackInvoked || (callbackInvoked = !0, c.apply(null, a));
    };
    forge.tabs.openWithOptions({
      url: a + '&transport=internal-redirect-hash',
      pattern: fb.simplelogin.Vars.getApiHost() + '/blank/page*'
    }, function (a) {
      var b;
      if (a && a.url)
        try {
          var c = fb.simplelogin.util.misc.parseUrl(a.url), h = fb.simplelogin.util.misc.parseQuerystring(decodeURIComponent(c.hash));
          a = {};
          for (var k in h)
            a[k] = fb.simplelogin.util.json.parse(h[k]);
          b = a;
        } catch (l) {
        }
      b && b.token && b.user ? d(null, b) : b && b.error ? d(b.error) : d({
        code: 'UNKNOWN_ERROR',
        message: 'An unknown error occurred.'
      });
    }, function (a) {
      d({
        code: 'UNKNOWN_ERROR',
        message: 'An unknown error occurred.'
      });
    });
  };
  fb.simplelogin.transports.TriggerIoTab = new fb.simplelogin.transports.TriggerIoTab_();
  fb.simplelogin.util.sjcl = {};
  var sjcl = {
      cipher: {},
      hash: {},
      keyexchange: {},
      mode: {},
      misc: {},
      codec: {},
      exception: {
        corrupt: function (a) {
          this.toString = function () {
            return 'CORRUPT: ' + this.message;
          };
          this.message = a;
        },
        invalid: function (a) {
          this.toString = function () {
            return 'INVALID: ' + this.message;
          };
          this.message = a;
        },
        bug: function (a) {
          this.toString = function () {
            return 'BUG: ' + this.message;
          };
          this.message = a;
        },
        notReady: function (a) {
          this.toString = function () {
            return 'NOT READY: ' + this.message;
          };
          this.message = a;
        }
      }
    };
  'undefined' != typeof module && module.exports && (module.exports = sjcl);
  sjcl.cipher.aes = function (a) {
    this.h[0][0][0] || this.w();
    var b, c, d, e, f = this.h[0][4], g = this.h[1];
    b = a.length;
    var h = 1;
    if (4 !== b && 6 !== b && 8 !== b)
      throw new sjcl.exception.invalid('invalid aes key size');
    this.a = [
      d = a.slice(0),
      e = []
    ];
    for (a = b; a < 4 * b + 28; a++) {
      c = d[a - 1];
      if (0 === a % b || 8 === b && 4 === a % b)
        c = f[c >>> 24] << 24 ^ f[c >> 16 & 255] << 16 ^ f[c >> 8 & 255] << 8 ^ f[c & 255], 0 === a % b && (c = c << 8 ^ c >>> 24 ^ h << 24, h = h << 1 ^ 283 * (h >> 7));
      d[a] = d[a - b] ^ c;
    }
    for (b = 0; a; b++, a--)
      c = d[b & 3 ? a : a - 4], e[b] = 4 >= a || 4 > b ? c : g[0][f[c >>> 24]] ^ g[1][f[c >> 16 & 255]] ^ g[2][f[c >> 8 & 255]] ^ g[3][f[c & 255]];
  };
  sjcl.cipher.aes.prototype = {
    encrypt: function (a) {
      return this.G(a, 0);
    },
    decrypt: function (a) {
      return this.G(a, 1);
    },
    h: [
      [
        [],
        [],
        [],
        [],
        []
      ],
      [
        [],
        [],
        [],
        [],
        []
      ]
    ],
    w: function () {
      var a = this.h[0], b = this.h[1], c = a[4], d = b[4], e, f, g, h = [], k = [], l, m, n, p;
      for (e = 0; 256 > e; e++)
        k[(h[e] = e << 1 ^ 283 * (e >> 7)) ^ e] = e;
      for (f = g = 0; !c[f]; f ^= l || 1, g = k[g] || 1)
        for (n = g ^ g << 1 ^ g << 2 ^ g << 3 ^ g << 4, n = n >> 8 ^ n & 255 ^ 99, c[f] = n, d[n] = f, m = h[e = h[l = h[f]]], p = 16843009 * m ^ 65537 * e ^ 257 * l ^ 16843008 * f, m = 257 * h[n] ^ 16843008 * n, e = 0; 4 > e; e++)
          a[e][f] = m = m << 24 ^ m >>> 8, b[e][n] = p = p << 24 ^ p >>> 8;
      for (e = 0; 5 > e; e++)
        a[e] = a[e].slice(0), b[e] = b[e].slice(0);
    },
    G: function (a, b) {
      if (4 !== a.length)
        throw new sjcl.exception.invalid('invalid aes block size');
      var c = this.a[b], d = a[0] ^ c[0], e = a[b ? 3 : 1] ^ c[1], f = a[2] ^ c[2];
      a = a[b ? 1 : 3] ^ c[3];
      var g, h, k, l = c.length / 4 - 2, m, n = 4, p = [
          0,
          0,
          0,
          0
        ];
      g = this.h[b];
      var q = g[0], r = g[1], u = g[2], v = g[3], w = g[4];
      for (m = 0; m < l; m++)
        g = q[d >>> 24] ^ r[e >> 16 & 255] ^ u[f >> 8 & 255] ^ v[a & 255] ^ c[n], h = q[e >>> 24] ^ r[f >> 16 & 255] ^ u[a >> 8 & 255] ^ v[d & 255] ^ c[n + 1], k = q[f >>> 24] ^ r[a >> 16 & 255] ^ u[d >> 8 & 255] ^ v[e & 255] ^ c[n + 2], a = q[a >>> 24] ^ r[d >> 16 & 255] ^ u[e >> 8 & 255] ^ v[f & 255] ^ c[n + 3], n += 4, d = g, e = h, f = k;
      for (m = 0; 4 > m; m++)
        p[b ? 3 & -m : m] = w[d >>> 24] << 24 ^ w[e >> 16 & 255] << 16 ^ w[f >> 8 & 255] << 8 ^ w[a & 255] ^ c[n++], g = d, d = e, e = f, f = a, a = g;
      return p;
    }
  };
  sjcl.bitArray = {
    bitSlice: function (a, b, c) {
      a = sjcl.bitArray.N(a.slice(b / 32), 32 - (b & 31)).slice(1);
      return void 0 === c ? a : sjcl.bitArray.clamp(a, c - b);
    },
    extract: function (a, b, c) {
      var d = Math.floor(-b - c & 31);
      return ((b + c - 1 ^ b) & -32 ? a[b / 32 | 0] << 32 - d ^ a[b / 32 + 1 | 0] >>> d : a[b / 32 | 0] >>> d) & (1 << c) - 1;
    },
    concat: function (a, b) {
      if (0 === a.length || 0 === b.length)
        return a.concat(b);
      var c = a[a.length - 1], d = sjcl.bitArray.getPartial(c);
      return 32 === d ? a.concat(b) : sjcl.bitArray.N(b, d, c | 0, a.slice(0, a.length - 1));
    },
    bitLength: function (a) {
      var b = a.length;
      return 0 === b ? 0 : 32 * (b - 1) + sjcl.bitArray.getPartial(a[b - 1]);
    },
    clamp: function (a, b) {
      if (32 * a.length < b)
        return a;
      a = a.slice(0, Math.ceil(b / 32));
      var c = a.length;
      b &= 31;
      0 < c && b && (a[c - 1] = sjcl.bitArray.partial(b, a[c - 1] & 2147483648 >> b - 1, 1));
      return a;
    },
    partial: function (a, b, c) {
      return 32 === a ? b : (c ? b | 0 : b << 32 - a) + 1099511627776 * a;
    },
    getPartial: function (a) {
      return Math.round(a / 1099511627776) || 32;
    },
    equal: function (a, b) {
      if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b))
        return !1;
      var c = 0, d;
      for (d = 0; d < a.length; d++)
        c |= a[d] ^ b[d];
      return 0 === c;
    },
    N: function (a, b, c, d) {
      var e;
      for (void 0 === d && (d = []); 32 <= b; b -= 32)
        d.push(c), c = 0;
      if (0 === b)
        return d.concat(a);
      for (e = 0; e < a.length; e++)
        d.push(c | a[e] >>> b), c = a[e] << 32 - b;
      e = a.length ? a[a.length - 1] : 0;
      a = sjcl.bitArray.getPartial(e);
      d.push(sjcl.bitArray.partial(b + a & 31, 32 < b + a ? c : d.pop(), 1));
      return d;
    },
    O: function (a, b) {
      return [
        a[0] ^ b[0],
        a[1] ^ b[1],
        a[2] ^ b[2],
        a[3] ^ b[3]
      ];
    }
  };
  sjcl.codec.utf8String = {
    fromBits: function (a) {
      var b = '', c = sjcl.bitArray.bitLength(a), d, e;
      for (d = 0; d < c / 8; d++)
        0 === (d & 3) && (e = a[d / 4]), b += String.fromCharCode(e >>> 24), e <<= 8;
      return decodeURIComponent(escape(b));
    },
    toBits: function (a) {
      a = unescape(encodeURIComponent(a));
      var b = [], c, d = 0;
      for (c = 0; c < a.length; c++)
        d = d << 8 | a.charCodeAt(c), 3 === (c & 3) && (b.push(d), d = 0);
      c & 3 && b.push(sjcl.bitArray.partial(8 * (c & 3), d));
      return b;
    }
  };
  sjcl.codec.base64 = {
    C: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
    fromBits: function (a, b, c) {
      var d = '', e = 0, f = sjcl.codec.base64.C, g = 0, h = sjcl.bitArray.bitLength(a);
      c && (f = f.substr(0, 62) + '-_');
      for (c = 0; 6 * d.length < h;)
        d += f.charAt((g ^ a[c] >>> e) >>> 26), 6 > e ? (g = a[c] << 6 - e, e += 26, c++) : (g <<= 6, e -= 6);
      for (; d.length & 3 && !b;)
        d += '=';
      return d;
    },
    toBits: function (a, b) {
      a = a.replace(/\s|=/g, '');
      var c = [], d = 0, e = sjcl.codec.base64.C, f = 0, g;
      b && (e = e.substr(0, 62) + '-_');
      for (b = 0; b < a.length; b++) {
        g = e.indexOf(a.charAt(b));
        if (0 > g)
          throw new sjcl.exception.invalid('this isn\'t base64!');
        26 < d ? (d -= 26, c.push(f ^ g >>> d), f = g << 32 - d) : (d += 6, f ^= g << 32 - d);
      }
      d & 56 && c.push(sjcl.bitArray.partial(d & 56, f, 1));
      return c;
    }
  };
  sjcl.codec.base64url = {
    fromBits: function (a) {
      return sjcl.codec.base64.fromBits(a, 1, 1);
    },
    toBits: function (a) {
      return sjcl.codec.base64.toBits(a, 1);
    }
  };
  sjcl.hash.sha256 = function (a) {
    this.a[0] || this.w();
    a ? (this.m = a.m.slice(0), this.i = a.i.slice(0), this.e = a.e) : this.reset();
  };
  sjcl.hash.sha256.hash = function (a) {
    return new sjcl.hash.sha256().update(a).finalize();
  };
  sjcl.hash.sha256.prototype = {
    blockSize: 512,
    reset: function () {
      this.m = this.L.slice(0);
      this.i = [];
      this.e = 0;
      return this;
    },
    update: function (a) {
      'string' === typeof a && (a = sjcl.codec.utf8String.toBits(a));
      var b, c = this.i = sjcl.bitArray.concat(this.i, a);
      b = this.e;
      a = this.e = b + sjcl.bitArray.bitLength(a);
      for (b = 512 + b & -512; b <= a; b += 512)
        this.B(c.splice(0, 16));
      return this;
    },
    finalize: function () {
      var a, b = this.i, c = this.m, b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1, 1)]);
      for (a = b.length + 2; a & 15; a++)
        b.push(0);
      b.push(Math.floor(this.e / 4294967296));
      for (b.push(this.e | 0); b.length;)
        this.B(b.splice(0, 16));
      this.reset();
      return c;
    },
    L: [],
    a: [],
    w: function () {
      function a(a) {
        return 4294967296 * (a - Math.floor(a)) | 0;
      }
      var b = 0, c = 2, d;
      a:
        for (; 64 > b; c++) {
          for (d = 2; d * d <= c; d++)
            if (0 === c % d)
              continue a;
          8 > b && (this.L[b] = a(Math.pow(c, 0.5)));
          this.a[b] = a(Math.pow(c, 1 / 3));
          b++;
        }
    },
    B: function (a) {
      var b, c, d = a.slice(0), e = this.m, f = this.a, g = e[0], h = e[1], k = e[2], l = e[3], m = e[4], n = e[5], p = e[6], q = e[7];
      for (a = 0; 64 > a; a++)
        16 > a ? b = d[a] : (b = d[a + 1 & 15], c = d[a + 14 & 15], b = d[a & 15] = (b >>> 7 ^ b >>> 18 ^ b >>> 3 ^ b << 25 ^ b << 14) + (c >>> 17 ^ c >>> 19 ^ c >>> 10 ^ c << 15 ^ c << 13) + d[a & 15] + d[a + 9 & 15] | 0), b = b + q + (m >>> 6 ^ m >>> 11 ^ m >>> 25 ^ m << 26 ^ m << 21 ^ m << 7) + (p ^ m & (n ^ p)) + f[a], q = p, p = n, n = m, m = l + b | 0, l = k, k = h, h = g, g = b + (h & k ^ l & (h ^ k)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0;
      e[0] = e[0] + g | 0;
      e[1] = e[1] + h | 0;
      e[2] = e[2] + k | 0;
      e[3] = e[3] + l | 0;
      e[4] = e[4] + m | 0;
      e[5] = e[5] + n | 0;
      e[6] = e[6] + p | 0;
      e[7] = e[7] + q | 0;
    }
  };
  sjcl.mode.ccm = {
    name: 'ccm',
    encrypt: function (a, b, c, d, e) {
      var f, g = b.slice(0), h = sjcl.bitArray, k = h.bitLength(c) / 8, l = h.bitLength(g) / 8;
      e = e || 64;
      d = d || [];
      if (7 > k)
        throw new sjcl.exception.invalid('ccm: iv must be at least 7 bytes');
      for (f = 2; 4 > f && l >>> 8 * f; f++);
      f < 15 - k && (f = 15 - k);
      c = h.clamp(c, 8 * (15 - f));
      b = sjcl.mode.ccm.F(a, b, c, d, e, f);
      g = sjcl.mode.ccm.H(a, g, c, b, e, f);
      return h.concat(g.data, g.tag);
    },
    decrypt: function (a, b, c, d, e) {
      e = e || 64;
      d = d || [];
      var f = sjcl.bitArray, g = f.bitLength(c) / 8, h = f.bitLength(b), k = f.clamp(b, h - e), l = f.bitSlice(b, h - e), h = (h - e) / 8;
      if (7 > g)
        throw new sjcl.exception.invalid('ccm: iv must be at least 7 bytes');
      for (b = 2; 4 > b && h >>> 8 * b; b++);
      b < 15 - g && (b = 15 - g);
      c = f.clamp(c, 8 * (15 - b));
      k = sjcl.mode.ccm.H(a, k, c, l, e, b);
      a = sjcl.mode.ccm.F(a, k.data, c, d, e, b);
      if (!f.equal(k.tag, a))
        throw new sjcl.exception.corrupt('ccm: tag doesn\'t match');
      return k.data;
    },
    F: function (a, b, c, d, e, f) {
      var g = [], h = sjcl.bitArray, k = h.O;
      e /= 8;
      if (e % 2 || 4 > e || 16 < e)
        throw new sjcl.exception.invalid('ccm: invalid tag length');
      if (4294967295 < d.length || 4294967295 < b.length)
        throw new sjcl.exception.bug('ccm: can\'t deal with 4GiB or more data');
      f = [h.partial(8, (d.length ? 64 : 0) | e - 2 << 2 | f - 1)];
      f = h.concat(f, c);
      f[3] |= h.bitLength(b) / 8;
      f = a.encrypt(f);
      if (d.length)
        for (c = h.bitLength(d) / 8, 65279 >= c ? g = [h.partial(16, c)] : 4294967295 >= c && (g = h.concat([h.partial(16, 65534)], [c])), g = h.concat(g, d), d = 0; d < g.length; d += 4)
          f = a.encrypt(k(f, g.slice(d, d + 4).concat([
            0,
            0,
            0
          ])));
      for (d = 0; d < b.length; d += 4)
        f = a.encrypt(k(f, b.slice(d, d + 4).concat([
          0,
          0,
          0
        ])));
      return h.clamp(f, 8 * e);
    },
    H: function (a, b, c, d, e, f) {
      var g, h = sjcl.bitArray;
      g = h.O;
      var k = b.length, l = h.bitLength(b);
      c = h.concat([h.partial(8, f - 1)], c).concat([
        0,
        0,
        0
      ]).slice(0, 4);
      d = h.bitSlice(g(d, a.encrypt(c)), 0, e);
      if (!k)
        return {
          tag: d,
          data: []
        };
      for (g = 0; g < k; g += 4)
        c[3]++, e = a.encrypt(c), b[g] ^= e[0], b[g + 1] ^= e[1], b[g + 2] ^= e[2], b[g + 3] ^= e[3];
      return {
        tag: d,
        data: h.clamp(b, l)
      };
    }
  };
  sjcl.misc.hmac = function (a, b) {
    this.K = b = b || sjcl.hash.sha256;
    var c = [
        [],
        []
      ], d = b.prototype.blockSize / 32;
    this.k = [
      new b(),
      new b()
    ];
    a.length > d && (a = b.hash(a));
    for (b = 0; b < d; b++)
      c[0][b] = a[b] ^ 909522486, c[1][b] = a[b] ^ 1549556828;
    this.k[0].update(c[0]);
    this.k[1].update(c[1]);
  };
  sjcl.misc.hmac.prototype.encrypt = sjcl.misc.hmac.prototype.mac = function (a) {
    a = new this.K(this.k[0]).update(a).finalize();
    return new this.K(this.k[1]).update(a).finalize();
  };
  sjcl.misc.pbkdf2 = function (a, b, c, d, e) {
    c = c || 1000;
    if (0 > d || 0 > c)
      throw sjcl.exception.invalid('invalid params to pbkdf2');
    'string' === typeof a && (a = sjcl.codec.utf8String.toBits(a));
    e = e || sjcl.misc.hmac;
    a = new e(a);
    var f, g, h, k, l = [], m = sjcl.bitArray;
    for (k = 1; 32 * l.length < (d || 1); k++) {
      e = f = a.encrypt(m.concat(b, [k]));
      for (g = 1; g < c; g++)
        for (f = a.encrypt(f), h = 0; h < f.length; h++)
          e[h] ^= f[h];
      l = l.concat(e);
    }
    d && (l = m.clamp(l, d));
    return l;
  };
  sjcl.random = {
    randomWords: function (a, b) {
      var c = [];
      b = this.isReady(b);
      var d;
      if (0 === b)
        throw new sjcl.exception.notReady('generator isn\'t seeded');
      b & 2 && this.T(!(b & 1));
      for (b = 0; b < a; b += 4)
        0 === (b + 1) % 65536 && this.J(), d = this.u(), c.push(d[0], d[1], d[2], d[3]);
      this.J();
      return c.slice(0, a);
    },
    setDefaultParanoia: function (a) {
      this.s = a;
    },
    addEntropy: function (a, b, c) {
      c = c || 'user';
      var d, e, f = new Date().valueOf(), g = this.p[c], h = this.isReady(), k = 0;
      d = this.D[c];
      void 0 === d && (d = this.D[c] = this.Q++);
      void 0 === g && (g = this.p[c] = 0);
      this.p[c] = (this.p[c] + 1) % this.b.length;
      switch (typeof a) {
      case 'number':
        void 0 === b && (b = 1);
        this.b[g].update([
          d,
          this.t++,
          1,
          b,
          f,
          1,
          a | 0
        ]);
        break;
      case 'object':
        c = Object.prototype.toString.call(a);
        if ('[object Uint32Array]' === c) {
          e = [];
          for (c = 0; c < a.length; c++)
            e.push(a[c]);
          a = e;
        } else
          for ('[object Array]' !== c && (k = 1), c = 0; c < a.length && !k; c++)
            'number' != typeof a[c] && (k = 1);
        if (!k) {
          if (void 0 === b)
            for (c = b = 0; c < a.length; c++)
              for (e = a[c]; 0 < e;)
                b++, e >>>= 1;
          this.b[g].update([
            d,
            this.t++,
            2,
            b,
            f,
            a.length
          ].concat(a));
        }
        break;
      case 'string':
        void 0 === b && (b = a.length);
        this.b[g].update([
          d,
          this.t++,
          3,
          b,
          f,
          a.length
        ]);
        this.b[g].update(a);
        break;
      default:
        k = 1;
      }
      if (k)
        throw new sjcl.exception.bug('random: addEntropy only supports number, array of numbers or string');
      this.j[g] += b;
      this.f += b;
      0 === h && (0 !== this.isReady() && this.I('seeded', Math.max(this.g, this.f)), this.I('progress', this.getProgress()));
    },
    isReady: function (a) {
      a = this.A[void 0 !== a ? a : this.s];
      return this.g && this.g >= a ? 80 < this.j[0] && new Date().valueOf() > this.M ? 3 : 1 : this.f >= a ? 2 : 0;
    },
    getProgress: function (a) {
      a = this.A[a ? a : this.s];
      return this.g >= a ? 1 : this.f > a ? 1 : this.f / a;
    },
    startCollectors: function () {
      if (!this.l) {
        if (window.addEventListener)
          window.addEventListener('load', this.n, !1), window.addEventListener('mousemove', this.o, !1);
        else if (document.attachEvent)
          document.attachEvent('onload', this.n), document.attachEvent('onmousemove', this.o);
        else
          throw new sjcl.exception.bug('can\'t attach event');
        this.l = !0;
      }
    },
    stopCollectors: function () {
      this.l && (window.removeEventListener ? (window.removeEventListener('load', this.n, !1), window.removeEventListener('mousemove', this.o, !1)) : window.detachEvent && (window.detachEvent('onload', this.n), window.detachEvent('onmousemove', this.o)), this.l = !1);
    },
    addEventListener: function (a, b) {
      this.q[a][this.P++] = b;
    },
    removeEventListener: function (a, b) {
      var c;
      a = this.q[a];
      var d = [];
      for (c in a)
        a.hasOwnProperty(c) && a[c] === b && d.push(c);
      for (b = 0; b < d.length; b++)
        c = d[b], delete a[c];
    },
    b: [new sjcl.hash.sha256()],
    j: [0],
    z: 0,
    p: {},
    t: 0,
    D: {},
    Q: 0,
    g: 0,
    f: 0,
    M: 0,
    a: [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    d: [
      0,
      0,
      0,
      0
    ],
    r: void 0,
    s: 6,
    l: !1,
    q: {
      progress: {},
      seeded: {}
    },
    P: 0,
    A: [
      0,
      48,
      64,
      96,
      128,
      192,
      256,
      384,
      512,
      768,
      1024
    ],
    u: function () {
      for (var a = 0; 4 > a && (this.d[a] = this.d[a] + 1 | 0, !this.d[a]); a++);
      return this.r.encrypt(this.d);
    },
    J: function () {
      this.a = this.u().concat(this.u());
      this.r = new sjcl.cipher.aes(this.a);
    },
    S: function (a) {
      this.a = sjcl.hash.sha256.hash(this.a.concat(a));
      this.r = new sjcl.cipher.aes(this.a);
      for (a = 0; 4 > a && (this.d[a] = this.d[a] + 1 | 0, !this.d[a]); a++);
    },
    T: function (a) {
      var b = [], c = 0, d;
      this.M = b[0] = new Date().valueOf() + 30000;
      for (d = 0; 16 > d; d++)
        b.push(4294967296 * Math.random() | 0);
      for (d = 0; d < this.b.length && (b = b.concat(this.b[d].finalize()), c += this.j[d], this.j[d] = 0, a || !(this.z & 1 << d)); d++);
      this.z >= 1 << this.b.length && (this.b.push(new sjcl.hash.sha256()), this.j.push(0));
      this.f -= c;
      c > this.g && (this.g = c);
      this.z++;
      this.S(b);
    },
    o: function (a) {
      sjcl.random.addEntropy([
        a.x || a.clientX || a.offsetX || 0,
        a.y || a.clientY || a.offsetY || 0
      ], 2, 'mouse');
    },
    n: function () {
      sjcl.random.addEntropy(new Date().valueOf(), 2, 'loadtime');
    },
    I: function (a, b) {
      var c;
      a = sjcl.random.q[a];
      var d = [];
      for (c in a)
        a.hasOwnProperty(c) && d.push(a[c]);
      for (c = 0; c < d.length; c++)
        d[c](b);
    }
  };
  try {
    var s = new Uint32Array(32);
    crypto.getRandomValues(s);
    sjcl.random.addEntropy(s, 1024, 'crypto[\'getRandomValues\']');
  } catch (t) {
  }
  sjcl.json = {
    defaults: {
      v: 1,
      iter: 1000,
      ks: 128,
      ts: 64,
      mode: 'ccm',
      adata: '',
      cipher: 'aes'
    },
    encrypt: function (a, b, c, d) {
      c = c || {};
      d = d || {};
      var e = sjcl.json, f = e.c({ iv: sjcl.random.randomWords(4, 0) }, e.defaults), g;
      e.c(f, c);
      c = f.adata;
      'string' === typeof f.salt && (f.salt = sjcl.codec.base64.toBits(f.salt));
      'string' === typeof f.iv && (f.iv = sjcl.codec.base64.toBits(f.iv));
      if (!sjcl.mode[f.mode] || !sjcl.cipher[f.cipher] || 'string' === typeof a && 100 >= f.iter || 64 !== f.ts && 96 !== f.ts && 128 !== f.ts || 128 !== f.ks && 192 !== f.ks && 256 !== f.ks || 2 > f.iv.length || 4 < f.iv.length)
        throw new sjcl.exception.invalid('json encrypt: invalid parameters');
      'string' === typeof a && (g = sjcl.misc.cachedPbkdf2(a, f), a = g.key.slice(0, f.ks / 32), f.salt = g.salt);
      'string' === typeof b && (b = sjcl.codec.utf8String.toBits(b));
      'string' === typeof c && (c = sjcl.codec.utf8String.toBits(c));
      g = new sjcl.cipher[f.cipher](a);
      e.c(d, f);
      d.key = a;
      f.ct = sjcl.mode[f.mode].encrypt(g, b, f.iv, c, f.ts);
      return e.encode(f);
    },
    decrypt: function (a, b, c, d) {
      c = c || {};
      d = d || {};
      var e = sjcl.json;
      b = e.c(e.c(e.c({}, e.defaults), e.decode(b)), c, !0);
      var f;
      c = b.adata;
      'string' === typeof b.salt && (b.salt = sjcl.codec.base64.toBits(b.salt));
      'string' === typeof b.iv && (b.iv = sjcl.codec.base64.toBits(b.iv));
      if (!sjcl.mode[b.mode] || !sjcl.cipher[b.cipher] || 'string' === typeof a && 100 >= b.iter || 64 !== b.ts && 96 !== b.ts && 128 !== b.ts || 128 !== b.ks && 192 !== b.ks && 256 !== b.ks || !b.iv || 2 > b.iv.length || 4 < b.iv.length)
        throw new sjcl.exception.invalid('json decrypt: invalid parameters');
      'string' === typeof a && (f = sjcl.misc.cachedPbkdf2(a, b), a = f.key.slice(0, b.ks / 32), b.salt = f.salt);
      'string' === typeof c && (c = sjcl.codec.utf8String.toBits(c));
      f = new sjcl.cipher[b.cipher](a);
      c = sjcl.mode[b.mode].decrypt(f, b.ct, b.iv, c, b.ts);
      e.c(d, b);
      d.key = a;
      return sjcl.codec.utf8String.fromBits(c);
    },
    encode: function (a) {
      var b, c = '{', d = '';
      for (b in a)
        if (a.hasOwnProperty(b)) {
          if (!b.match(/^[a-z0-9]+$/i))
            throw new sjcl.exception.invalid('json encode: invalid property name');
          c += d + '"' + b + '":';
          d = ',';
          switch (typeof a[b]) {
          case 'number':
          case 'boolean':
            c += a[b];
            break;
          case 'string':
            c += '"' + escape(a[b]) + '"';
            break;
          case 'object':
            c += '"' + sjcl.codec.base64.fromBits(a[b], 0) + '"';
            break;
          default:
            throw new sjcl.exception.bug('json encode: unsupported type');
          }
        }
      return c + '}';
    },
    decode: function (a) {
      a = a.replace(/\s/g, '');
      if (!a.match(/^\{.*\}$/))
        throw new sjcl.exception.invalid('json decode: this isn\'t json!');
      a = a.replace(/^\{|\}$/g, '').split(/,/);
      var b = {}, c, d;
      for (c = 0; c < a.length; c++) {
        if (!(d = a[c].match(/^(?:(["']?)([a-z][a-z0-9]*)\1):(?:(\d+)|"([a-z0-9+\/%*_.@=\-]*)")$/i)))
          throw new sjcl.exception.invalid('json decode: this isn\'t json!');
        b[d[2]] = d[3] ? parseInt(d[3], 10) : d[2].match(/^(ct|salt|iv)$/) ? sjcl.codec.base64.toBits(d[4]) : unescape(d[4]);
      }
      return b;
    },
    c: function (a, b, c) {
      void 0 === a && (a = {});
      if (void 0 === b)
        return a;
      for (var d in b)
        if (b.hasOwnProperty(d)) {
          if (c && void 0 !== a[d] && a[d] !== b[d])
            throw new sjcl.exception.invalid('required parameter overridden');
          a[d] = b[d];
        }
      return a;
    },
    V: function (a, b) {
      var c = {}, d;
      for (d in a)
        a.hasOwnProperty(d) && a[d] !== b[d] && (c[d] = a[d]);
      return c;
    },
    U: function (a, b) {
      var c = {}, d;
      for (d = 0; d < b.length; d++)
        void 0 !== a[b[d]] && (c[b[d]] = a[b[d]]);
      return c;
    }
  };
  sjcl.encrypt = sjcl.json.encrypt;
  sjcl.decrypt = sjcl.json.decrypt;
  sjcl.misc.R = {};
  sjcl.misc.cachedPbkdf2 = function (a, b) {
    var c = sjcl.misc.R, d;
    b = b || {};
    d = b.iter || 1000;
    c = c[a] = c[a] || {};
    d = c[d] = c[d] || { firstSalt: b.salt && b.salt.length ? b.salt.slice(0) : sjcl.random.randomWords(2, 0) };
    c = void 0 === b.salt ? d.firstSalt : b.salt;
    d[c] = d[c] || sjcl.misc.pbkdf2(a, c, b.iter);
    return {
      key: d[c].slice(0),
      salt: c.slice(0)
    };
  };
  goog.net = {};
  goog.net.Cookies = function (a) {
    this.document_ = a;
  };
  goog.net.Cookies.MAX_COOKIE_LENGTH = 3950;
  goog.net.Cookies.SPLIT_RE_ = /\s*;\s*/;
  goog.net.Cookies.prototype.isEnabled = function () {
    return navigator.cookieEnabled;
  };
  goog.net.Cookies.prototype.isValidName = function (a) {
    return !/[;=\s]/.test(a);
  };
  goog.net.Cookies.prototype.isValidValue = function (a) {
    return !/[;\r\n]/.test(a);
  };
  goog.net.Cookies.prototype.set = function (a, b, c, d, e, f) {
    if (!this.isValidName(a))
      throw Error('Invalid cookie name "' + a + '"');
    if (!this.isValidValue(b))
      throw Error('Invalid cookie value "' + b + '"');
    goog.isDef(c) || (c = -1);
    e = e ? ';domain=' + e : '';
    d = d ? ';path=' + d : '';
    f = f ? ';secure' : '';
    c = 0 > c ? '' : 0 == c ? ';expires=' + new Date(1970, 1, 1).toUTCString() : ';expires=' + new Date(goog.now() + 1000 * c).toUTCString();
    this.setCookie_(a + '=' + b + e + d + c + f);
  };
  goog.net.Cookies.prototype.get = function (a, b) {
    for (var c = a + '=', d = this.getParts_(), e = 0, f; f = d[e]; e++) {
      if (0 == f.lastIndexOf(c, 0))
        return f.substr(c.length);
      if (f == a)
        return '';
    }
    return b;
  };
  goog.net.Cookies.prototype.remove = function (a, b, c) {
    var d = this.containsKey(a);
    this.set(a, '', 0, b, c);
    return d;
  };
  goog.net.Cookies.prototype.getKeys = function () {
    return this.getKeyValues_().keys;
  };
  goog.net.Cookies.prototype.getValues = function () {
    return this.getKeyValues_().values;
  };
  goog.net.Cookies.prototype.isEmpty = function () {
    return !this.getCookie_();
  };
  goog.net.Cookies.prototype.getCount = function () {
    return this.getCookie_() ? this.getParts_().length : 0;
  };
  goog.net.Cookies.prototype.containsKey = function (a) {
    return goog.isDef(this.get(a));
  };
  goog.net.Cookies.prototype.containsValue = function (a) {
    for (var b = this.getKeyValues_().values, c = 0; c < b.length; c++)
      if (b[c] == a)
        return !0;
    return !1;
  };
  goog.net.Cookies.prototype.clear = function () {
    for (var a = this.getKeyValues_().keys, b = a.length - 1; 0 <= b; b--)
      this.remove(a[b]);
  };
  goog.net.Cookies.prototype.setCookie_ = function (a) {
    this.document_.cookie = a;
  };
  goog.net.Cookies.prototype.getCookie_ = function () {
    return this.document_.cookie;
  };
  goog.net.Cookies.prototype.getParts_ = function () {
    return (this.getCookie_() || '').split(goog.net.Cookies.SPLIT_RE_);
  };
  goog.net.Cookies.prototype.getKeyValues_ = function () {
    for (var a = this.getParts_(), b = [], c = [], d, e, f = 0; e = a[f]; f++)
      d = e.indexOf('='), -1 == d ? (b.push(''), c.push(e)) : (b.push(e.substring(0, d)), c.push(e.substring(d + 1)));
    return {
      keys: b,
      values: c
    };
  };
  goog.net.cookies = new goog.net.Cookies(document);
  goog.net.cookies.MAX_COOKIE_LENGTH = goog.net.Cookies.MAX_COOKIE_LENGTH;
  fb.simplelogin.util.env = {};
  fb.simplelogin.util.env.hasLocalStorage = function (a) {
    try {
      if (localStorage) {
        localStorage.setItem('firebase-sentinel', 'test');
        var b = localStorage.getItem('firebase-sentinel');
        localStorage.removeItem('firebase-sentinel');
        return 'test' === b;
      }
    } catch (c) {
    }
    return !1;
  };
  fb.simplelogin.util.env.hasSessionStorage = function (a) {
    try {
      if (sessionStorage) {
        sessionStorage.setItem('firebase-sentinel', 'test');
        var b = sessionStorage.getItem('firebase-sentinel');
        sessionStorage.removeItem('firebase-sentinel');
        return 'test' === b;
      }
    } catch (c) {
    }
    return !1;
  };
  fb.simplelogin.util.env.isMobileCordovaInAppBrowser = function () {
    return (window.cordova || window.CordovaInAppBrowser || window.phonegap) && /ios|iphone|ipod|ipad|android/i.test(navigator.userAgent);
  };
  fb.simplelogin.util.env.isMobileTriggerIoTab = function () {
    return window.forge && /ios|iphone|ipod|ipad|android/i.test(navigator.userAgent);
  };
  fb.simplelogin.util.env.isWindowsMetro = function () {
    return !!window.Windows && /^ms-appx:/.test(location.href);
  };
  fb.simplelogin.util.env.isChromeiOS = function () {
    return !!navigator.userAgent.match(/CriOS/);
  };
  fb.simplelogin.util.env.isTwitteriOS = function () {
    return !!navigator.userAgent.match(/Twitter for iPhone/);
  };
  fb.simplelogin.util.env.isFacebookiOS = function () {
    return !!navigator.userAgent.match(/FBAN\/FBIOS/);
  };
  fb.simplelogin.util.env.isWindowsPhone = function () {
    return !!navigator.userAgent.match(/Windows Phone/);
  };
  fb.simplelogin.util.env.isStandaloneiOS = function () {
    return !!window.navigator.standalone;
  };
  fb.simplelogin.util.env.isPhantomJS = function () {
    return !!navigator.userAgent.match(/PhantomJS/);
  };
  fb.simplelogin.util.env.isFennec = function () {
    try {
      var a = navigator.userAgent;
      return -1 != a.indexOf('Fennec/') || -1 != a.indexOf('Firefox/') && -1 != a.indexOf('Android');
    } catch (b) {
    }
    return !1;
  };
  var cookieStoragePath = '/', encryptionStorageKey = 'firebaseSessionKey', sessionPersistentStorageKey = 'firebaseSession', hasLocalStorage = fb.simplelogin.util.env.hasLocalStorage();
  fb.simplelogin.SessionStore_ = function () {
  };
  fb.simplelogin.SessionStore_.prototype.set = function (a, b) {
    if (hasLocalStorage)
      try {
        var c = a.sessionKey, d = sjcl.encrypt(c, fb.simplelogin.util.json.stringify(a));
        localStorage.setItem(sessionPersistentStorageKey, fb.simplelogin.util.json.stringify(d));
        goog.net.cookies.set(encryptionStorageKey, c, b ? 86400 * b : -1, cookieStoragePath, null, !1);
      } catch (e) {
      }
  };
  fb.simplelogin.SessionStore_.prototype.get = function () {
    if (hasLocalStorage) {
      try {
        var a = goog.net.cookies.get(encryptionStorageKey), b = localStorage.getItem(sessionPersistentStorageKey);
        if (a && b)
          return fb.simplelogin.util.json.parse(sjcl.decrypt(a, fb.simplelogin.util.json.parse(b)));
      } catch (c) {
      }
      return null;
    }
  };
  fb.simplelogin.SessionStore_.prototype.clear = function () {
    hasLocalStorage && (localStorage.removeItem(sessionPersistentStorageKey), goog.net.cookies.remove(encryptionStorageKey, cookieStoragePath, null));
  };
  fb.simplelogin.SessionStore = new fb.simplelogin.SessionStore_();
  fb.simplelogin.transports.XHR_ = function () {
  };
  fb.simplelogin.transports.XHR_.prototype.open = function (a, b, c) {
    var d = this, e = { contentType: 'application/json' }, f = new XMLHttpRequest(), g = (e.method || 'GET').toUpperCase(), h = e.contentType || 'application/x-www-form-urlencoded', k = !1, l;
    f.onreadystatechange = function () {
      if (!k && 4 === f.readyState) {
        k = !0;
        var a, b;
        try {
          a = fb.simplelogin.util.json.parse(f.responseText), b = a.error || null, delete a.error;
        } catch (e) {
        }
        return !a || b ? c && c(d.formatError_(b)) : c && c(b, a);
      }
    };
    b && ('GET' === g ? (-1 === a.indexOf('?') && (a += '?'), a += this.formatQueryString(b), b = null) : ('application/json' === h && (b = fb.simplelogin.util.json.stringify(b)), 'application/x-www-form-urlencoded' === h && (b = this.formatQueryString(b))));
    f.open(g, a, !0);
    a = {
      'X-Requested-With': 'XMLHttpRequest',
      Accept: 'application/json;text/plain',
      'Content-Type': h
    };
    e.headers = e.headers || {};
    for (l in e.headers)
      a[l] = e.headers[l];
    for (l in a)
      f.setRequestHeader(l, a[l]);
    f.send(b);
  };
  fb.simplelogin.transports.XHR_.prototype.isAvailable = function () {
    return window.XMLHttpRequest && 'function' === typeof window.XMLHttpRequest;
  };
  fb.simplelogin.transports.XHR_.prototype.formatQueryString = function (a) {
    if (!a)
      return '';
    var b = [], c;
    for (c in a)
      b.push(encodeURIComponent(c) + '=' + encodeURIComponent(a[c]));
    return b.join('&');
  };
  fb.simplelogin.transports.XHR_.prototype.formatError_ = function (a) {
    return a ? fb.simplelogin.Errors.format(a) : fb.simplelogin.Errors.get('UNKNOWN_ERROR');
  };
  fb.simplelogin.transports.XHR = new fb.simplelogin.transports.XHR_();
  fb.simplelogin.util.validation = {};
  var VALID_EMAIL_REGEX_ = /^([a-zA-Z0-9_\.\-\+])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,6})+$/;
  fb.simplelogin.util.validation.validateArgCount = function (a, b, c, d) {
    var e;
    d < b ? e = 'at least ' + b : d > c && (e = 0 === c ? 'none' : 'no more than ' + c);
    if (e)
      throw Error(a + ' failed: Was called with ' + d + (1 === d ? ' argument.' : ' arguments.') + ' Expects ' + e + '.');
  };
  fb.simplelogin.util.validation.isValidEmail = function (a) {
    return goog.isString(a) && VALID_EMAIL_REGEX_.test(a);
  };
  fb.simplelogin.util.validation.isValidPassword = function (a) {
    return goog.isString(a);
  };
  fb.simplelogin.util.validation.isValidNamespace = function (a) {
    return goog.isString(a);
  };
  fb.simplelogin.util.validation.errorPrefix_ = function (a, b, c) {
    var d = '';
    switch (b) {
    case 1:
      d = c ? 'first' : 'First';
      break;
    case 2:
      d = c ? 'second' : 'Second';
      break;
    case 3:
      d = c ? 'third' : 'Third';
      break;
    case 4:
      d = c ? 'fourth' : 'Fourth';
      break;
    default:
      fb.core.util.validation.assert(!1, 'errorPrefix_ called with argumentNumber > 4.  Need to update it?');
    }
    return a = a + ' failed: ' + (d + ' argument ');
  };
  fb.simplelogin.util.validation.validateNamespace = function (a, b, c, d) {
    if ((!d || goog.isDef(c)) && !goog.isString(c))
      throw Error(fb.simplelogin.util.validation.errorPrefix_(a, b, d) + 'must be a valid firebase namespace.');
  };
  fb.simplelogin.util.validation.validateCallback = function (a, b, c, d) {
    if ((!d || goog.isDef(c)) && !goog.isFunction(c))
      throw Error(fb.simplelogin.util.validation.errorPrefix_(a, b, d) + 'must be a valid function.');
  };
  fb.simplelogin.util.validation.validateString = function (a, b, c, d) {
    if ((!d || goog.isDef(c)) && !goog.isString(c))
      throw Error(fb.simplelogin.util.validation.errorPrefix_(a, b, d) + 'must be a valid string.');
  };
  fb.simplelogin.util.validation.validateContextObject = function (a, b, c, d) {
    if (!d || goog.isDef(c))
      if (!goog.isObject(c) || null === c)
        throw Error(fb.simplelogin.util.validation.errorPrefix_(a, b, d) + 'must be a valid context object.');
  };
  var CALLBACK_NAMESPACE = '_FirebaseSimpleLoginJSONP';
  fb.simplelogin.transports.JSONP_ = function () {
    window[CALLBACK_NAMESPACE] = window[CALLBACK_NAMESPACE] || {};
  };
  fb.simplelogin.transports.JSONP_.prototype.open = function (a, b, c) {
    a += /\?/.test(a) ? '' : '?';
    a += '&transport=jsonp';
    for (var d in b)
      a += '&' + encodeURIComponent(d) + '=' + encodeURIComponent(b[d]);
    b = this.generateRequestId_();
    a += '&callback=' + encodeURIComponent(CALLBACK_NAMESPACE + '.' + b);
    this.registerCallback_(b, c);
    this.writeScriptTag_(b, a, c);
  };
  fb.simplelogin.transports.JSONP_.prototype.generateRequestId_ = function () {
    return '_FirebaseJSONP' + new Date().getTime() + Math.floor(100 * Math.random());
  };
  fb.simplelogin.transports.JSONP_.prototype.registerCallback_ = function (a, b) {
    var c = this;
    window[CALLBACK_NAMESPACE][a] = function (d) {
      var e = d.error || null;
      delete d.error;
      b(e, d);
      c.removeCallback_(a);
    };
  };
  fb.simplelogin.transports.JSONP_.prototype.removeCallback_ = function (a) {
    setTimeout(function () {
      delete window[CALLBACK_NAMESPACE][a];
      var b = document.getElementById(a);
      b && b.parentNode.removeChild(b);
    }, 0);
  };
  fb.simplelogin.transports.JSONP_.prototype.writeScriptTag_ = function (a, b, c) {
    var d = this;
    setTimeout(function () {
      try {
        var e = document.createElement('script');
        e.type = 'text/javascript';
        e.id = a;
        e.async = !0;
        e.src = b;
        e.onerror = function () {
          var b = document.getElementById(a);
          null !== b && b.parentNode.removeChild(b);
          c && c(d.formatError_({
            code: 'SERVER_ERROR',
            message: 'An unknown server error occurred.'
          }));
        };
        var f = document.getElementsByTagName('script')[0];
        f.parentNode.insertBefore(e, f);
      } catch (g) {
        c && c(d.formatError_({
          code: 'SERVER_ERROR',
          message: 'An unknown server error occurred.'
        }));
      }
    }, 0);
  };
  fb.simplelogin.transports.JSONP_.prototype.formatError_ = function (a) {
    var b;
    a ? (b = Error(a.message), b.code = a.code || 'UNKNOWN_ERROR') : (b = Error(), b.code = 'UNKNOWN_ERROR');
    return b;
  };
  fb.simplelogin.transports.JSONP = new fb.simplelogin.transports.JSONP_();
  fb.simplelogin.providers = {};
  fb.simplelogin.providers.Password_ = function () {
  };
  fb.simplelogin.providers.Password_.prototype.getTransport_ = function () {
    return fb.simplelogin.transports.XHR.isAvailable() ? fb.simplelogin.transports.XHR : fb.simplelogin.transports.JSONP;
  };
  fb.simplelogin.providers.Password_.prototype.login = function (a, b) {
    var c = fb.simplelogin.Vars.getApiHost() + '/auth/firebase';
    if (!fb.simplelogin.util.validation.isValidNamespace(a.firebase))
      return b && b(fb.simplelogin.Errors.get('INVALID_FIREBASE'));
    this.getTransport_().open(c, a, b);
  };
  fb.simplelogin.providers.Password_.prototype.createUser = function (a, b) {
    var c = fb.simplelogin.Vars.getApiHost() + '/auth/firebase/create';
    if (!fb.simplelogin.util.validation.isValidNamespace(a.firebase))
      return b && b(fb.simplelogin.Errors.get('INVALID_FIREBASE'));
    if (!fb.simplelogin.util.validation.isValidEmail(a.email))
      return b && b(fb.simplelogin.Errors.get('INVALID_EMAIL'));
    if (!fb.simplelogin.util.validation.isValidPassword(a.password))
      return b && b(fb.simplelogin.Errors.get('INVALID_PASSWORD'));
    this.getTransport_().open(c, a, b);
  };
  fb.simplelogin.providers.Password_.prototype.changePassword = function (a, b) {
    var c = fb.simplelogin.Vars.getApiHost() + '/auth/firebase/update';
    if (!fb.simplelogin.util.validation.isValidNamespace(a.firebase))
      return b && b(fb.simplelogin.Errors.get('INVALID_FIREBASE'));
    if (!fb.simplelogin.util.validation.isValidEmail(a.email))
      return b && b(fb.simplelogin.Errors.get('INVALID_EMAIL'));
    if (!fb.simplelogin.util.validation.isValidPassword(a.newPassword))
      return b && b(fb.simplelogin.Errors.get('INVALID_PASSWORD'));
    this.getTransport_().open(c, a, b);
  };
  fb.simplelogin.providers.Password_.prototype.removeUser = function (a, b) {
    var c = fb.simplelogin.Vars.getApiHost() + '/auth/firebase/remove';
    if (!fb.simplelogin.util.validation.isValidNamespace(a.firebase))
      return b && b(fb.simplelogin.Errors.get('INVALID_FIREBASE'));
    if (!fb.simplelogin.util.validation.isValidEmail(a.email))
      return b && b(fb.simplelogin.Errors.get('INVALID_EMAIL'));
    if (!fb.simplelogin.util.validation.isValidPassword(a.password))
      return b && b(fb.simplelogin.Errors.get('INVALID_PASSWORD'));
    this.getTransport_().open(c, a, b);
  };
  fb.simplelogin.providers.Password_.prototype.sendPasswordResetEmail = function (a, b) {
    var c = fb.simplelogin.Vars.getApiHost() + '/auth/firebase/reset_password';
    if (!fb.simplelogin.util.validation.isValidNamespace(a.firebase))
      return b && b(fb.simplelogin.Errors.get('INVALID_FIREBASE'));
    if (!fb.simplelogin.util.validation.isValidEmail(a.email))
      return b && b(fb.simplelogin.Errors.get('INVALID_EMAIL'));
    this.getTransport_().open(c, a, b);
  };
  fb.simplelogin.providers.Password = new fb.simplelogin.providers.Password_();
  fb.simplelogin.transports.WindowsMetroAuthBroker_ = function () {
  };
  fb.simplelogin.transports.WindowsMetroAuthBroker_.prototype.open = function (a, b, c) {
    var d, e, f, g, h, k;
    try {
      d = window.Windows.Foundation.Uri, e = window.Windows.Security.Authentication.Web.WebAuthenticationOptions, f = window.Windows.Security.Authentication.Web.WebAuthenticationBroker, g = f.authenticateAsync;
    } catch (l) {
      return c({
        code: 'WINDOWS_METRO',
        message: '"Windows.Security.Authentication.Web.WebAuthenticationBroker" required when using Firebase Simple Login in Windows Metro context'
      });
    }
    h = !1;
    k = function () {
      var a = Array.prototype.slice.apply(arguments);
      h || (h = !0, c.apply(null, a));
    };
    a = new d(a + '&transport=internal-redirect-hash');
    d = new d(fb.simplelogin.Vars.getApiHost() + '/blank/page.html');
    g(e.none, a, d).done(function (a) {
      var b;
      if (a && a.responseData)
        try {
          var c = fb.simplelogin.util.misc.parseUrl(a.responseData), d = fb.simplelogin.util.misc.parseQuerystring(decodeURIComponent(c.hash));
          a = {};
          for (var e in d)
            a[e] = fb.simplelogin.util.json.parse(d[e]);
          b = a;
        } catch (f) {
        }
      b && b.token && b.user ? k(null, b) : b && b.error ? k(b.error) : k({
        code: 'UNKNOWN_ERROR',
        message: 'An unknown error occurred.'
      });
    }, function (a) {
      k({
        code: 'UNKNOWN_ERROR',
        message: 'An unknown error occurred.'
      });
    });
  };
  fb.simplelogin.transports.WindowsMetroAuthBroker = new fb.simplelogin.transports.WindowsMetroAuthBroker_();
  goog.string = {};
  goog.string.Unicode = { NBSP: '\xa0' };
  goog.string.startsWith = function (a, b) {
    return 0 == a.lastIndexOf(b, 0);
  };
  goog.string.endsWith = function (a, b) {
    var c = a.length - b.length;
    return 0 <= c && a.indexOf(b, c) == c;
  };
  goog.string.caseInsensitiveStartsWith = function (a, b) {
    return 0 == goog.string.caseInsensitiveCompare(b, a.substr(0, b.length));
  };
  goog.string.caseInsensitiveEndsWith = function (a, b) {
    return 0 == goog.string.caseInsensitiveCompare(b, a.substr(a.length - b.length, b.length));
  };
  goog.string.caseInsensitiveEquals = function (a, b) {
    return a.toLowerCase() == b.toLowerCase();
  };
  goog.string.subs = function (a, b) {
    for (var c = a.split('%s'), d = '', e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;)
      d += c.shift() + e.shift();
    return d + c.join('%s');
  };
  goog.string.collapseWhitespace = function (a) {
    return a.replace(/[\s\xa0]+/g, ' ').replace(/^\s+|\s+$/g, '');
  };
  goog.string.isEmpty = function (a) {
    return /^[\s\xa0]*$/.test(a);
  };
  goog.string.isEmptySafe = function (a) {
    return goog.string.isEmpty(goog.string.makeSafe(a));
  };
  goog.string.isBreakingWhitespace = function (a) {
    return !/[^\t\n\r ]/.test(a);
  };
  goog.string.isAlpha = function (a) {
    return !/[^a-zA-Z]/.test(a);
  };
  goog.string.isNumeric = function (a) {
    return !/[^0-9]/.test(a);
  };
  goog.string.isAlphaNumeric = function (a) {
    return !/[^a-zA-Z0-9]/.test(a);
  };
  goog.string.isSpace = function (a) {
    return ' ' == a;
  };
  goog.string.isUnicodeChar = function (a) {
    return 1 == a.length && ' ' <= a && '~' >= a || '\x80' <= a && '\ufffd' >= a;
  };
  goog.string.stripNewlines = function (a) {
    return a.replace(/(\r\n|\r|\n)+/g, ' ');
  };
  goog.string.canonicalizeNewlines = function (a) {
    return a.replace(/(\r\n|\r|\n)/g, '\n');
  };
  goog.string.normalizeWhitespace = function (a) {
    return a.replace(/\xa0|\s/g, ' ');
  };
  goog.string.normalizeSpaces = function (a) {
    return a.replace(/\xa0|[ \t]+/g, ' ');
  };
  goog.string.collapseBreakingSpaces = function (a) {
    return a.replace(/[\t\r\n ]+/g, ' ').replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, '');
  };
  goog.string.trim = function (a) {
    return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g, '');
  };
  goog.string.trimLeft = function (a) {
    return a.replace(/^[\s\xa0]+/, '');
  };
  goog.string.trimRight = function (a) {
    return a.replace(/[\s\xa0]+$/, '');
  };
  goog.string.caseInsensitiveCompare = function (a, b) {
    var c = String(a).toLowerCase(), d = String(b).toLowerCase();
    return c < d ? -1 : c == d ? 0 : 1;
  };
  goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
  goog.string.numerateCompare = function (a, b) {
    if (a == b)
      return 0;
    if (!a)
      return -1;
    if (!b)
      return 1;
    for (var c = a.toLowerCase().match(goog.string.numerateCompareRegExp_), d = b.toLowerCase().match(goog.string.numerateCompareRegExp_), e = Math.min(c.length, d.length), f = 0; f < e; f++) {
      var g = c[f], h = d[f];
      if (g != h)
        return c = parseInt(g, 10), !isNaN(c) && (d = parseInt(h, 10), !isNaN(d) && c - d) ? c - d : g < h ? -1 : 1;
    }
    return c.length != d.length ? c.length - d.length : a < b ? -1 : 1;
  };
  goog.string.urlEncode = function (a) {
    return encodeURIComponent(String(a));
  };
  goog.string.urlDecode = function (a) {
    return decodeURIComponent(a.replace(/\+/g, ' '));
  };
  goog.string.newLineToBr = function (a, b) {
    return a.replace(/(\r\n|\r|\n)/g, b ? '<br />' : '<br>');
  };
  goog.string.htmlEscape = function (a, b) {
    if (b)
      return a.replace(goog.string.amperRe_, '&amp;').replace(goog.string.ltRe_, '&lt;').replace(goog.string.gtRe_, '&gt;').replace(goog.string.quotRe_, '&quot;').replace(goog.string.singleQuoteRe_, '&#39;');
    if (!goog.string.allRe_.test(a))
      return a;
    -1 != a.indexOf('&') && (a = a.replace(goog.string.amperRe_, '&amp;'));
    -1 != a.indexOf('<') && (a = a.replace(goog.string.ltRe_, '&lt;'));
    -1 != a.indexOf('>') && (a = a.replace(goog.string.gtRe_, '&gt;'));
    -1 != a.indexOf('"') && (a = a.replace(goog.string.quotRe_, '&quot;'));
    -1 != a.indexOf('\'') && (a = a.replace(goog.string.singleQuoteRe_, '&#39;'));
    return a;
  };
  goog.string.amperRe_ = /&/g;
  goog.string.ltRe_ = /</g;
  goog.string.gtRe_ = />/g;
  goog.string.quotRe_ = /"/g;
  goog.string.singleQuoteRe_ = /'/g;
  goog.string.allRe_ = /[&<>"']/;
  goog.string.unescapeEntities = function (a) {
    return goog.string.contains(a, '&') ? 'document' in goog.global ? goog.string.unescapeEntitiesUsingDom_(a) : goog.string.unescapePureXmlEntities_(a) : a;
  };
  goog.string.unescapeEntitiesWithDocument = function (a, b) {
    return goog.string.contains(a, '&') ? goog.string.unescapeEntitiesUsingDom_(a, b) : a;
  };
  goog.string.unescapeEntitiesUsingDom_ = function (a, b) {
    var c = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"'
      }, d;
    d = b ? b.createElement('div') : document.createElement('div');
    return a.replace(goog.string.HTML_ENTITY_PATTERN_, function (a, b) {
      var g = c[a];
      if (g)
        return g;
      if ('#' == b.charAt(0)) {
        var h = Number('0' + b.substr(1));
        isNaN(h) || (g = String.fromCharCode(h));
      }
      g || (d.innerHTML = a + ' ', g = d.firstChild.nodeValue.slice(0, -1));
      return c[a] = g;
    });
  };
  goog.string.unescapePureXmlEntities_ = function (a) {
    return a.replace(/&([^;]+);/g, function (a, c) {
      switch (c) {
      case 'amp':
        return '&';
      case 'lt':
        return '<';
      case 'gt':
        return '>';
      case 'quot':
        return '"';
      default:
        if ('#' == c.charAt(0)) {
          var d = Number('0' + c.substr(1));
          if (!isNaN(d))
            return String.fromCharCode(d);
        }
        return a;
      }
    });
  };
  goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
  goog.string.whitespaceEscape = function (a, b) {
    return goog.string.newLineToBr(a.replace(/  /g, ' &#160;'), b);
  };
  goog.string.stripQuotes = function (a, b) {
    for (var c = b.length, d = 0; d < c; d++) {
      var e = 1 == c ? b : b.charAt(d);
      if (a.charAt(0) == e && a.charAt(a.length - 1) == e)
        return a.substring(1, a.length - 1);
    }
    return a;
  };
  goog.string.truncate = function (a, b, c) {
    c && (a = goog.string.unescapeEntities(a));
    a.length > b && (a = a.substring(0, b - 3) + '...');
    c && (a = goog.string.htmlEscape(a));
    return a;
  };
  goog.string.truncateMiddle = function (a, b, c, d) {
    c && (a = goog.string.unescapeEntities(a));
    if (d && a.length > b) {
      d > b && (d = b);
      var e = a.length - d;
      a = a.substring(0, b - d) + '...' + a.substring(e);
    } else
      a.length > b && (d = Math.floor(b / 2), e = a.length - d, a = a.substring(0, d + b % 2) + '...' + a.substring(e));
    c && (a = goog.string.htmlEscape(a));
    return a;
  };
  goog.string.specialEscapeChars_ = {
    '\0': '\\0',
    '\b': '\\b',
    '\f': '\\f',
    '\n': '\\n',
    '\r': '\\r',
    '\t': '\\t',
    '\x0B': '\\x0B',
    '"': '\\"',
    '\\': '\\\\'
  };
  goog.string.jsEscapeCache_ = { '\'': '\\\'' };
  goog.string.quote = function (a) {
    a = String(a);
    if (a.quote)
      return a.quote();
    for (var b = ['"'], c = 0; c < a.length; c++) {
      var d = a.charAt(c), e = d.charCodeAt(0);
      b[c + 1] = goog.string.specialEscapeChars_[d] || (31 < e && 127 > e ? d : goog.string.escapeChar(d));
    }
    b.push('"');
    return b.join('');
  };
  goog.string.escapeString = function (a) {
    for (var b = [], c = 0; c < a.length; c++)
      b[c] = goog.string.escapeChar(a.charAt(c));
    return b.join('');
  };
  goog.string.escapeChar = function (a) {
    if (a in goog.string.jsEscapeCache_)
      return goog.string.jsEscapeCache_[a];
    if (a in goog.string.specialEscapeChars_)
      return goog.string.jsEscapeCache_[a] = goog.string.specialEscapeChars_[a];
    var b = a, c = a.charCodeAt(0);
    if (31 < c && 127 > c)
      b = a;
    else {
      if (256 > c) {
        if (b = '\\x', 16 > c || 256 < c)
          b += '0';
      } else
        b = '\\u', 4096 > c && (b += '0');
      b += c.toString(16).toUpperCase();
    }
    return goog.string.jsEscapeCache_[a] = b;
  };
  goog.string.toMap = function (a) {
    for (var b = {}, c = 0; c < a.length; c++)
      b[a.charAt(c)] = !0;
    return b;
  };
  goog.string.contains = function (a, b) {
    return -1 != a.indexOf(b);
  };
  goog.string.countOf = function (a, b) {
    return a && b ? a.split(b).length - 1 : 0;
  };
  goog.string.removeAt = function (a, b, c) {
    var d = a;
    0 <= b && b < a.length && 0 < c && (d = a.substr(0, b) + a.substr(b + c, a.length - b - c));
    return d;
  };
  goog.string.remove = function (a, b) {
    var c = RegExp(goog.string.regExpEscape(b), '');
    return a.replace(c, '');
  };
  goog.string.removeAll = function (a, b) {
    var c = RegExp(goog.string.regExpEscape(b), 'g');
    return a.replace(c, '');
  };
  goog.string.regExpEscape = function (a) {
    return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').replace(/\x08/g, '\\x08');
  };
  goog.string.repeat = function (a, b) {
    return Array(b + 1).join(a);
  };
  goog.string.padNumber = function (a, b, c) {
    a = goog.isDef(c) ? a.toFixed(c) : String(a);
    c = a.indexOf('.');
    -1 == c && (c = a.length);
    return goog.string.repeat('0', Math.max(0, b - c)) + a;
  };
  goog.string.makeSafe = function (a) {
    return null == a ? '' : String(a);
  };
  goog.string.buildString = function (a) {
    return Array.prototype.join.call(arguments, '');
  };
  goog.string.getRandomString = function () {
    return Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ goog.now()).toString(36);
  };
  goog.string.compareVersions = function (a, b) {
    for (var c = 0, d = goog.string.trim(String(a)).split('.'), e = goog.string.trim(String(b)).split('.'), f = Math.max(d.length, e.length), g = 0; 0 == c && g < f; g++) {
      var h = d[g] || '', k = e[g] || '', l = RegExp('(\\d*)(\\D*)', 'g'), m = RegExp('(\\d*)(\\D*)', 'g');
      do {
        var n = l.exec(h) || [
            '',
            '',
            ''
          ], p = m.exec(k) || [
            '',
            '',
            ''
          ];
        if (0 == n[0].length && 0 == p[0].length)
          break;
        var c = 0 == n[1].length ? 0 : parseInt(n[1], 10), q = 0 == p[1].length ? 0 : parseInt(p[1], 10), c = goog.string.compareElements_(c, q) || goog.string.compareElements_(0 == n[2].length, 0 == p[2].length) || goog.string.compareElements_(n[2], p[2]);
      } while (0 == c);
    }
    return c;
  };
  goog.string.compareElements_ = function (a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  };
  goog.string.HASHCODE_MAX_ = 4294967296;
  goog.string.hashCode = function (a) {
    for (var b = 0, c = 0; c < a.length; ++c)
      b = 31 * b + a.charCodeAt(c), b %= goog.string.HASHCODE_MAX_;
    return b;
  };
  goog.string.uniqueStringCounter_ = 2147483648 * Math.random() | 0;
  goog.string.createUniqueString = function () {
    return 'goog_' + goog.string.uniqueStringCounter_++;
  };
  goog.string.toNumber = function (a) {
    var b = Number(a);
    return 0 == b && goog.string.isEmpty(a) ? NaN : b;
  };
  goog.string.isLowerCamelCase = function (a) {
    return /^[a-z]+([A-Z][a-z]*)*$/.test(a);
  };
  goog.string.isUpperCamelCase = function (a) {
    return /^([A-Z][a-z]*)+$/.test(a);
  };
  goog.string.toCamelCase = function (a) {
    return String(a).replace(/\-([a-z])/g, function (a, c) {
      return c.toUpperCase();
    });
  };
  goog.string.toSelectorCase = function (a) {
    return String(a).replace(/([A-Z])/g, '-$1').toLowerCase();
  };
  goog.string.toTitleCase = function (a, b) {
    var c = goog.isString(b) ? goog.string.regExpEscape(b) : '\\s';
    return a.replace(RegExp('(^' + (c ? '|[' + c + ']+' : '') + ')([a-z])', 'g'), function (a, b, c) {
      return b + c.toUpperCase();
    });
  };
  goog.string.parseInt = function (a) {
    isFinite(a) && (a = String(a));
    return goog.isString(a) ? /^\s*-?0x/i.test(a) ? parseInt(a, 16) : parseInt(a, 10) : NaN;
  };
  goog.string.splitLimit = function (a, b, c) {
    a = a.split(b);
    for (var d = []; 0 < c && a.length;)
      d.push(a.shift()), c--;
    a.length && d.push(a.join(b));
    return d;
  };
  fb.simplelogin.providers.Persona_ = function () {
  };
  fb.simplelogin.providers.Persona_.prototype.login = function (a, b) {
    navigator.id.watch({
      onlogin: function (a) {
        b(a);
      },
      onlogout: function () {
      }
    });
    a = a || {};
    a.oncancel = function () {
      b(null);
    };
    navigator.id.request(a);
  };
  fb.simplelogin.providers.Persona = new fb.simplelogin.providers.Persona_();
  var CLIENT_VERSION = '1.3.1';
  fb.simplelogin.client = function (a, b, c, d) {
    function e(a, b, c) {
      setTimeout(function () {
        a(b, c);
      }, 0);
    }
    this.mRef = a;
    this.mNamespace = fb.simplelogin.util.misc.parseSubdomain(a.toString());
    this.sessionLengthDays = null;
    window._FirebaseSimpleLogin = window._FirebaseSimpleLogin || {};
    window._FirebaseSimpleLogin.callbacks = window._FirebaseSimpleLogin.callbacks || [];
    window._FirebaseSimpleLogin.callbacks.push({
      cb: b,
      ctx: c
    });
    'file:' === window.location.protocol && !fb.simplelogin.util.env.isPhantomJS() && !fb.simplelogin.util.env.isMobileCordovaInAppBrowser() && console && console.log && console.log('FirebaseSimpleLogin(): Due to browser security restrictions, loading applications via `file://*` URLs will prevent popup-based authentication providers from working properly. When testing locally, you\'ll need to run a barebones webserver on your machine rather than loading your test files via `file://*`. The easiest way to run a barebones server on your local machine is to `cd` to the root directory of your code and run `python -m SimpleHTTPServer`, which will allow you to access your content via `http://127.0.0.1:8000/*`.');
    d && fb.simplelogin.Vars.setApiHost(d);
    this.mLoginStateChange = function (a, b) {
      var c = window._FirebaseSimpleLogin.callbacks || [];
      Array.prototype.slice.apply(arguments);
      for (var d = 0; d < c.length; d++) {
        var l = c[d], m = !!a || 'undefined' === typeof l.user;
        if (!m) {
          var n, p;
          l.user && l.user.firebaseAuthToken && (n = l.user.firebaseAuthToken);
          b && b.firebaseAuthToken && (p = b.firebaseAuthToken);
          m = (n || p) && n !== p;
        }
        window._FirebaseSimpleLogin.callbacks[d].user = b || null;
        m && e(goog.bind(l.cb, l.ctx), a, b);
      }
    };
    this.resumeSession();
  };
  fb.simplelogin.client.prototype.setApiHost = function (a) {
    fb.simplelogin.Vars.setApiHost(a);
  };
  goog.exportSymbol('fb.simplelogin.client.prototype.setApiHost', fb.simplelogin.client.prototype.setApiHost);
  fb.simplelogin.client.prototype.resumeSession = function () {
    var a = this, b;
    try {
      b = sessionStorage.getItem('firebaseRequestId'), sessionStorage.removeItem('firebaseRequestId');
    } catch (c) {
    }
    if (b) {
      var d = fb.simplelogin.transports.JSONP;
      fb.simplelogin.transports.XHR.isAvailable() && (d = fb.simplelogin.transports.XHR);
      d.open(fb.simplelogin.Vars.getApiHost() + '/auth/session', {
        requestId: b,
        firebase: a.mNamespace
      }, function (b, c) {
        c && c.token && c.user ? a.attemptAuth(c.token, c.user, !0) : b ? (fb.simplelogin.SessionStore.clear(), a.mLoginStateChange(b)) : (fb.simplelogin.SessionStore.clear(), a.mLoginStateChange(null, null));
      });
    } else
      (b = fb.simplelogin.SessionStore.get()) && b.token && b.user ? a.attemptAuth(b.token, b.user, !1) : a.mLoginStateChange(null, null);
  };
  fb.simplelogin.client.prototype.attemptAuth = function (a, b, c) {
    var d = this;
    this.mRef.auth(a, function (e, f) {
      e ? (fb.simplelogin.SessionStore.clear(), d.mLoginStateChange(null, null)) : (c && fb.simplelogin.SessionStore.set({
        token: a,
        user: b,
        sessionKey: b.sessionKey
      }, d.sessionLengthDays), 'function' == typeof f && f(), delete b.sessionKey, b.firebaseAuthToken = a, d.mLoginStateChange(null, b));
    }, function (a) {
      fb.simplelogin.SessionStore.clear();
      d.mLoginStateChange(null, null);
    });
  };
  fb.simplelogin.client.prototype.login = function () {
    fb.simplelogin.util.validation.validateString('FirebaseSimpleLogin.login()', 1, arguments[0], !1);
    fb.simplelogin.util.validation.validateArgCount('FirebaseSimpleLogin.login()', 1, 2, arguments.length);
    var a = arguments[0].toLowerCase(), b = arguments[1] || {};
    this.sessionLengthDays = b.rememberMe ? 30 : null;
    switch (a) {
    case 'anonymous':
      return this.loginAnonymously(b);
    case 'facebook-token':
      return this.loginWithFacebookToken(b);
    case 'github':
      return this.loginWithGithub(b);
    case 'google-token':
      return this.loginWithGoogleToken(b);
    case 'password':
      return this.loginWithPassword(b);
    case 'persona':
      return this.loginWithPersona(b);
    case 'twitter-token':
      return this.loginWithTwitterToken(b);
    case 'facebook':
      return b.access_token ? this.loginWithFacebookToken(b) : this.loginWithFacebook(b);
    case 'google':
      return b.access_token ? this.loginWithGoogleToken(b) : this.loginWithGoogle(b);
    case 'twitter':
      return b.oauth_token && b.oauth_token_secret ? this.loginWithTwitterToken(b) : this.loginWithTwitter(b);
    default:
      throw Error('FirebaseSimpleLogin.login(' + a + ') failed: unrecognized authentication provider');
    }
  };
  goog.exportSymbol('fb.simplelogin.client.prototype.login', fb.simplelogin.client.prototype.login);
  fb.simplelogin.client.prototype.loginAnonymously = function (a) {
    var b = this;
    a.firebase = this.mNamespace;
    a.v = CLIENT_VERSION;
    fb.simplelogin.transports.JSONP.open(fb.simplelogin.Vars.getApiHost() + '/auth/anonymous', a, function (a, d) {
      a || !d.token ? b.mLoginStateChange(fb.simplelogin.Errors.format(a), null) : b.attemptAuth(d.token, d.user, !0);
    });
  };
  fb.simplelogin.client.prototype.loginWithPassword = function (a) {
    var b = this;
    a.firebase = this.mNamespace;
    a.v = CLIENT_VERSION;
    fb.simplelogin.providers.Password.login(a, function (a, d) {
      a || !d.token ? b.mLoginStateChange(fb.simplelogin.Errors.format(a)) : b.attemptAuth(d.token, d.user, !0);
    });
  };
  fb.simplelogin.client.prototype.loginWithGithub = function (a) {
    a.height = 850;
    a.width = 950;
    this.loginViaOAuth('github', a);
  };
  fb.simplelogin.client.prototype.loginWithGoogle = function (a) {
    a.height = 650;
    a.width = 575;
    this.loginViaOAuth('google', a);
  };
  fb.simplelogin.client.prototype.loginWithFacebook = function (a) {
    a.height = 400;
    a.width = 535;
    this.loginViaOAuth('facebook', a);
  };
  fb.simplelogin.client.prototype.loginWithTwitter = function (a) {
    this.loginViaOAuth('twitter', a);
  };
  fb.simplelogin.client.prototype.loginWithFacebookToken = function (a) {
    this.loginViaToken('facebook', a);
  };
  fb.simplelogin.client.prototype.loginWithGoogleToken = function (a) {
    this.loginViaToken('google', a);
  };
  fb.simplelogin.client.prototype.loginWithTwitterToken = function (a) {
    this.loginViaToken('twitter', a);
  };
  fb.simplelogin.client.prototype.loginWithPersona = function (a) {
    var b = this;
    if (!navigator.id)
      throw Error('FirebaseSimpleLogin.login(persona): Unable to find Persona include.js');
    fb.simplelogin.providers.Persona.login(a, function (a) {
      null === a ? callback(fb.simplelogin.Errors.get('UNKNOWN_ERROR')) : fb.simplelogin.transports.JSONP.open(fb.simplelogin.Vars.getApiHost() + '/auth/persona/token', {
        firebase: b.mNamespace,
        assertion: a,
        v: CLIENT_VERSION
      }, function (a, c) {
        !a && c.token && c.user ? b.attemptAuth(c.token, c.user, !0) : b.mLoginStateChange(fb.simplelogin.Errors.format(a), null);
      });
    });
  };
  fb.simplelogin.client.prototype.logout = function () {
    fb.simplelogin.SessionStore.clear();
    this.mRef.unauth();
    this.mLoginStateChange(null, null);
  };
  goog.exportSymbol('fb.simplelogin.client.prototype.logout', fb.simplelogin.client.prototype.logout);
  fb.simplelogin.client.prototype.loginViaToken = function (a, b, c) {
    b = b || {};
    b.v = CLIENT_VERSION;
    var d = this;
    a = fb.simplelogin.Vars.getApiHost() + '/auth/' + a + '/token?firebase=' + d.mNamespace;
    fb.simplelogin.transports.JSONP.open(a, b, function (a, b) {
      !a && b.token && b.user ? d.attemptAuth(b.token, b.user, !0) : d.mLoginStateChange(fb.simplelogin.Errors.format(a), null);
    });
  };
  fb.simplelogin.client.prototype.loginViaOAuth = function (a, b, c) {
    b = b || {};
    var d = this;
    a = fb.simplelogin.Vars.getApiHost() + '/auth/' + a + '?firebase=' + this.mNamespace;
    b.scope && (a += '&scope=' + b.scope);
    b.debug && (a += '&debug=' + b.debug);
    a += '&v=' + encodeURIComponent(CLIENT_VERSION);
    c = {
      menubar: 0,
      location: 0,
      resizable: 0,
      scrollbars: 1,
      status: 0,
      dialog: 1,
      width: 700,
      height: 375
    };
    b.height && (c.height = b.height, delete b.height);
    b.width && (c.width = b.width, delete b.width);
    var e = fb.simplelogin.util.env.isMobileCordovaInAppBrowser() ? 'mobile-phonegap' : fb.simplelogin.util.env.isMobileTriggerIoTab() ? 'mobile-triggerio' : fb.simplelogin.util.env.isWindowsMetro() ? 'windows-metro' : 'desktop', f;
    if ('desktop' === e) {
      f = fb.simplelogin.transports.WinChan;
      var e = [], g;
      for (g in c)
        e.push(g + '=' + c[g]);
      b.url += '&transport=winchan';
      b.relay_url = fb.simplelogin.Vars.getApiHost() + '/auth/channel';
      b.window_features = e.join(',');
    } else
      'mobile-phonegap' === e ? f = fb.simplelogin.transports.CordovaInAppBrowser : 'mobile-triggerio' === e ? f = fb.simplelogin.transports.TriggerIoTab : 'windows-metro' === e && (f = fb.simplelogin.transports.WindowsMetroAuthBroker);
    if (b.preferRedirect || fb.simplelogin.util.env.isChromeiOS() || fb.simplelogin.util.env.isWindowsPhone() || fb.simplelogin.util.env.isStandaloneiOS() || fb.simplelogin.util.env.isTwitteriOS() || fb.simplelogin.util.env.isFacebookiOS()) {
      b = goog.string.getRandomString() + goog.string.getRandomString();
      try {
        sessionStorage.setItem('firebaseRequestId', b);
      } catch (h) {
      }
      a += '&requestId=' + b + '&fb_redirect_uri=' + encodeURIComponent(window.location.href);
      window.location = a;
    } else
      f.open(a, b, function (a, b) {
        if (b && b.token && b.user)
          d.attemptAuth(b.token, b.user, !0);
        else {
          var c = a || {
              code: 'UNKNOWN_ERROR',
              message: 'An unknown error occurred.'
            };
          'unknown closed window' === a ? c = {
            code: 'USER_DENIED',
            message: 'User cancelled the authentication request.'
          } : b && b.error && (c = b.error);
          d.mLoginStateChange(fb.simplelogin.Errors.format(c), null);
        }
      });
  };
  fb.simplelogin.client.prototype.manageFirebaseUsers = function (a, b, c) {
    b.firebase = this.mNamespace;
    fb.simplelogin.providers.Password[a](b, function (a, b) {
      return a ? c && c(fb.simplelogin.Errors.format(a), null) : c && c(null, b);
    });
  };
  fb.simplelogin.client.prototype.createUser = function (a, b, c) {
    this.manageFirebaseUsers('createUser', {
      email: a,
      password: b
    }, c);
  };
  goog.exportSymbol('fb.simplelogin.client.prototype.createUser', fb.simplelogin.client.prototype.createUser);
  fb.simplelogin.client.prototype.changePassword = function (a, b, c, d) {
    this.manageFirebaseUsers('changePassword', {
      email: a,
      oldPassword: b,
      newPassword: c
    }, function (a) {
      return d && d(a);
    });
  };
  goog.exportSymbol('fb.simplelogin.client.prototype.changePassword', fb.simplelogin.client.prototype.changePassword);
  fb.simplelogin.client.prototype.removeUser = function (a, b, c) {
    this.manageFirebaseUsers('removeUser', {
      email: a,
      password: b
    }, function (a) {
      return c && c(a);
    });
  };
  goog.exportSymbol('fb.simplelogin.client.prototype.removeUser', fb.simplelogin.client.prototype.removeUser);
  fb.simplelogin.client.prototype.sendPasswordResetEmail = function (a, b) {
    this.manageFirebaseUsers('sendPasswordResetEmail', { email: a }, function (a) {
      return b && b(a);
    });
  };
  goog.exportSymbol('fb.simplelogin.client.prototype.sendPasswordResetEmail', fb.simplelogin.client.prototype.sendPasswordResetEmail);
  fb.simplelogin.client.onOpen = function (a) {
    fb.simplelogin.transports.WinChan.onOpen(a);
  };
  goog.exportSymbol('fb.simplelogin.client.onOpen', fb.simplelogin.client.onOpen);
  var FirebaseSimpleLogin = function (a, b, c, d) {
    fb.simplelogin.util.validation.validateArgCount('new FirebaseSimpleLogin', 1, 4, arguments.length);
    fb.simplelogin.util.validation.validateCallback('new FirebaseSimpleLogin', 2, b, !1);
    if (goog.isString(a))
      throw Error('new FirebaseSimpleLogin(): Oops, it looks like you passed a string instead of a Firebase reference (i.e. new Firebase(<firebaseURL>)).');
    var e = fb.simplelogin.util.misc.parseSubdomain(a.toString());
    if (!goog.isString(e))
      throw Error('new FirebaseSimpleLogin(): First argument must be a valid Firebase reference (i.e. new Firebase(<firebaseURL>)).');
    var f = new fb.simplelogin.client(a, b, c, d);
    return {
      setApiHost: function (a) {
        fb.simplelogin.util.validation.validateArgCount('FirebaseSimpleLogin.setApiHost', 1, 1, arguments.length);
        f.setApiHost(a);
      },
      login: function () {
        f.login.apply(f, arguments);
      },
      logout: function () {
        fb.simplelogin.util.validation.validateArgCount('FirebaseSimpleLogin.logout', 0, 0, arguments.length);
        f.logout();
      },
      createUser: function (a, b, c) {
        fb.simplelogin.util.validation.validateArgCount('FirebaseSimpleLogin.createUser', 3, 3, arguments.length);
        fb.simplelogin.util.validation.validateCallback('FirebaseSimpleLogin.createUser', 3, c, !1);
        f.createUser(a, b, c);
      },
      changePassword: function (a, b, c, d) {
        fb.simplelogin.util.validation.validateArgCount('FirebaseSimpleLogin.changePassword', 4, 4, arguments.length);
        fb.simplelogin.util.validation.validateCallback('FirebaseSimpleLogin.changePassword', 4, d, !1);
        f.changePassword(a, b, c, d);
      },
      removeUser: function (a, b, c) {
        fb.simplelogin.util.validation.validateArgCount('FirebaseSimpleLogin.removeUser', 3, 3, arguments.length);
        fb.simplelogin.util.validation.validateCallback('FirebaseSimpleLogin.removeUser', 3, c, !1);
        f.removeUser(a, b, c);
      },
      sendPasswordResetEmail: function (a, b) {
        fb.simplelogin.util.validation.validateArgCount('FirebaseSimpleLogin.sendPasswordResetEmail', 2, 2, arguments.length);
        fb.simplelogin.util.validation.validateCallback('FirebaseSimpleLogin.sendPasswordResetEmail', 2, b, !1);
        f.sendPasswordResetEmail(a, b);
      }
    };
  };
  goog.exportSymbol('FirebaseSimpleLogin', FirebaseSimpleLogin);
  FirebaseSimpleLogin.onOpen = function (a) {
    fb.simplelogin.client.onOpen(a);
  };
  goog.exportProperty(FirebaseSimpleLogin, 'onOpen', FirebaseSimpleLogin.onOpen);
}());
'use strict';
!function () {
  var a, b;
  angular.module('firebase', []).value('Firebase', Firebase), angular.module('firebase').factory('$firebase', [
    '$q',
    '$parse',
    '$timeout',
    function (b, c, d) {
      return function (e) {
        var f = new a(b, c, d, e);
        return f.construct();
      };
    }
  ]), angular.module('firebase').filter('orderByPriority', function () {
    return function (a) {
      var b = [];
      if (a)
        if (a.$getIndex && 'function' == typeof a.$getIndex) {
          var c = a.$getIndex();
          if (c.length > 0)
            for (var d = 0; d < c.length; d++) {
              var e = a[c[d]];
              e && (e.$id = c[d], b.push(e));
            }
        } else
          angular.isArray(a) ? b = a.slice(0) : angular.isObject(a) && angular.forEach(a, function (a) {
            b.push(a);
          });
      return b;
    };
  }), Array.prototype.indexOf || (Array.prototype.indexOf = function (a, b) {
    if (void 0 === this || null === this)
      throw new TypeError('\'this\' is null or not defined');
    var c = this.length >>> 0;
    for (b = +b || 0, 1 / 0 === Math.abs(b) && (b = 0), 0 > b && (b += c, 0 > b && (b = 0)); c > b; b++)
      if (this[b] === a)
        return b;
    return -1;
  }), a = function (a, b, c, d) {
    if (this._q = a, this._parse = b, this._timeout = c, this._bound = !1, this._loaded = !1, this._index = [], this._on = {
        value: [],
        change: [],
        loaded: [],
        child_added: [],
        child_moved: [],
        child_changed: [],
        child_removed: []
      }, 'string' == typeof d)
      throw new Error('Please provide a Firebase reference instead of a URL, eg: new Firebase(url)');
    this._fRef = d;
  }, a.prototype = {
    construct: function () {
      var b = this, c = {};
      return c.$id = b._fRef.ref().name(), c.$bind = function (a, c, d) {
        return b._bind(a, c, d);
      }, c.$add = function (a) {
        function c(a) {
          a ? e.reject(a) : e.resolve(d);
        }
        var d, e = b._q.defer();
        return d = 'object' == typeof a ? b._fRef.ref().push(b._parseObject(a), c) : b._fRef.ref().push(a, c), e.promise;
      }, c.$save = function (a) {
        function c(a) {
          a ? d.reject(a) : d.resolve();
        }
        var d = b._q.defer();
        if (a) {
          var e = b._parseObject(b._object[a]);
          b._fRef.ref().child(a).set(e, c);
        } else
          b._fRef.ref().set(b._parseObject(b._object), c);
        return d.promise;
      }, c.$set = function (a) {
        var c = b._q.defer();
        return b._fRef.ref().set(b._parseObject(a), function (a) {
          a ? c.reject(a) : c.resolve();
        }), c.promise;
      }, c.$update = function (a) {
        var c = b._q.defer();
        return b._fRef.ref().update(b._parseObject(a), function (a) {
          a ? c.reject(a) : c.resolve();
        }), c.promise;
      }, c.$transaction = function (a, c) {
        var d = b._q.defer();
        return b._fRef.ref().transaction(a, function (a, b, c) {
          a ? d.reject(a) : d.resolve(b ? c : null);
        }, c), d.promise;
      }, c.$remove = function (a) {
        function c(a) {
          a ? d.reject(a) : d.resolve();
        }
        var d = b._q.defer();
        return a ? b._fRef.ref().child(a).remove(c) : b._fRef.ref().remove(c), d.promise;
      }, c.$child = function (c) {
        var d = new a(b._q, b._parse, b._timeout, b._fRef.ref().child(c));
        return d.construct();
      }, c.$on = function (a, d) {
        if (!b._on.hasOwnProperty(a))
          throw new Error('Invalid event type ' + a + ' specified');
        return b._sendInitEvent(a, d), 'loaded' === a && this._loaded || b._on[a].push(d), c;
      }, c.$off = function (a, c) {
        if (b._on.hasOwnProperty(a))
          if (c) {
            var d = b._on[a].indexOf(c);
            -1 !== d && b._on[a].splice(d, 1);
          } else
            b._on[a] = [];
        else
          b._fRef.off();
      }, c.$auth = function (a) {
        var c = b._q.defer();
        return b._fRef.auth(a, function (a, b) {
          null !== a ? c.reject(a) : c.resolve(b);
        }, function (a) {
          c.reject(a);
        }), c.promise;
      }, c.$getIndex = function () {
        return angular.copy(b._index);
      }, c.$getRef = function () {
        return b._fRef.ref();
      }, b._object = c, b._getInitialValue(), b._object;
    },
    _getInitialValue: function () {
      function a(a, b) {
        var c = a.name(), e = a.val(), f = g._index.indexOf(c);
        if (-1 !== f && g._index.splice(f, 1), b) {
          var h = g._index.indexOf(b);
          g._index.splice(h + 1, 0, c);
        } else
          g._index.unshift(c);
        d(e) || null === a.getPriority() || (e.$priority = a.getPriority()), g._updateModel(c, e);
      }
      function b(a, b) {
        return function (c, d) {
          b(c, d), g._broadcastEvent(a, g._makeEventSnapshot(c.name(), c.val(), d));
        };
      }
      function c(a, c) {
        g._fRef.on(a, b(a, c));
      }
      function d(a) {
        return null === a || 'object' != typeof a;
      }
      function e(a) {
        g._loaded = !0, g._broadcastEvent('loaded', a);
      }
      function f(a) {
        if (g._bound && null === a) {
          var b = g._parseObject(g._parse(g._name)(g._scope));
          switch (typeof b) {
          case 'string':
          case 'undefined':
            a = '';
            break;
          case 'number':
            a = 0;
            break;
          case 'boolean':
            a = !1;
          }
        }
        return a;
      }
      var g = this;
      c('child_added', a), c('child_moved', a), c('child_changed', a), c('child_removed', function (a) {
        var b = a.name(), c = g._index.indexOf(b);
        g._index.splice(c, 1), g._updateModel(b, null);
      }), g._fRef.on('value', function (a) {
        var b = a.val();
        d(b) ? (b = f(b), g._updatePrimitive(b)) : delete g._object.$value, g._broadcastEvent('value', g._makeEventSnapshot(a.name(), b)), g._loaded || e(b);
      });
    },
    _updateModel: function (a, b) {
      null == b ? delete this._object[a] : this._object[a] = b, this._broadcastEvent('change', a), this._triggerModelUpdate();
    },
    _triggerModelUpdate: function () {
      if (!this._runningTimer) {
        var a = this;
        this._runningTimer = a._timeout(function () {
          if (a._runningTimer = null, a._bound) {
            var b = a._object, c = a._parse(a._name)(a._scope);
            angular.equals(b, c) || a._parse(a._name).assign(a._scope, angular.copy(b));
          }
        });
      }
    },
    _updatePrimitive: function (a) {
      var b = this;
      b._timeout(function () {
        if (b._object.$value && angular.equals(b._object.$value, a) || (b._object.$value = a), b._broadcastEvent('change'), b._bound) {
          var c = b._parseObject(b._parse(b._name)(b._scope));
          angular.equals(c, a) || b._parse(b._name).assign(b._scope, a);
        }
      });
    },
    _broadcastEvent: function (a, b) {
      function c(a, b) {
        e._timeout(function () {
          a(b);
        });
      }
      var d = this._on[a] || [];
      'loaded' === a && (this._on[a] = []);
      var e = this;
      if (d.length > 0)
        for (var f = 0; f < d.length; f++)
          'function' == typeof d[f] && c(d[f], b);
    },
    _sendInitEvent: function (a, b) {
      var c = this;
      c._loaded && [
        'child_added',
        'loaded',
        'value'
      ].indexOf(a) > -1 && c._timeout(function () {
        var d = angular.isObject(c._object) ? c._parseObject(c._object) : c._object;
        switch (a) {
        case 'loaded':
          b(d);
          break;
        case 'value':
          b(c._makeEventSnapshot(c._fRef.name(), d, null));
          break;
        case 'child_added':
          c._iterateChildren(d, function (a, d, e) {
            b(c._makeEventSnapshot(a, d, e));
          });
        }
      });
    },
    _iterateChildren: function (a, b) {
      if (this._loaded && angular.isObject(a)) {
        var c = null;
        for (var d in a)
          a.hasOwnProperty(d) && (b(d, a[d], c), c = d);
      }
    },
    _makeEventSnapshot: function (a, b, c) {
      return angular.isUndefined(c) && (c = null), {
        snapshot: {
          name: a,
          value: b
        },
        prevChild: c
      };
    },
    _bind: function (a, b, c) {
      var d = this, e = d._q.defer();
      d._name = b, d._bound = !0, d._scope = a;
      var f = d._parse(b)(a);
      void 0 !== f && 'object' == typeof f && d._fRef.ref().update(d._parseObject(f));
      var g = a.$watch(b, function () {
          var c = d._parseObject(d._parse(b)(a));
          void 0 !== d._object.$value && angular.equals(c, d._object.$value) || angular.equals(c, d._parseObject(d._object)) || void 0 !== c && d._loaded && (d._fRef.set ? d._fRef.set(c) : d._fRef.ref().update(c));
        }, !0);
      return a.$on('$destroy', function () {
        g();
      }), d._fRef.once('value', function (f) {
        d._timeout(function () {
          'object' != typeof f.val() ? (null == f.val() && 'function' == typeof c && (a[b] = c()), e.resolve(g)) : d._timeout(function () {
            null == f.val() && 'function' == typeof c && (a[b] = c()), e.resolve(g);
          });
        });
      }), e.promise;
    },
    _parseObject: function (a) {
      function b(a) {
        for (var c in a)
          a.hasOwnProperty(c) && ('$priority' == c ? (a['.priority'] = a.$priority, delete a.$priority) : 'object' == typeof a[c] && b(a[c]));
        return a;
      }
      var c = b(angular.copy(a));
      return angular.fromJson(angular.toJson(c));
    }
  }, angular.module('firebase').factory('$firebaseSimpleLogin', [
    '$q',
    '$timeout',
    '$rootScope',
    function (a, c, d) {
      return function (e) {
        var f = new b(a, c, d, e);
        return f.construct();
      };
    }
  ]), b = function (a, b, c, d) {
    if (this._q = a, this._timeout = b, this._rootScope = c, this._loginDeferred = null, this._getCurrentUserDeferred = [], this._currentUserData = void 0, 'string' == typeof d)
      throw new Error('Please provide a Firebase reference instead of a URL, eg: new Firebase(url)');
    this._fRef = d;
  }, b.prototype = {
    construct: function () {
      var a = {
          user: null,
          $login: this.login.bind(this),
          $logout: this.logout.bind(this),
          $createUser: this.createUser.bind(this),
          $changePassword: this.changePassword.bind(this),
          $removeUser: this.removeUser.bind(this),
          $getCurrentUser: this.getCurrentUser.bind(this),
          $sendPasswordResetEmail: this.sendPasswordResetEmail.bind(this)
        };
      if (this._object = a, !window.FirebaseSimpleLogin) {
        var b = new Error('FirebaseSimpleLogin is undefined. Did you forget to include firebase-simple-login.js?');
        throw this._rootScope.$broadcast('$firebaseSimpleLogin:error', b), b;
      }
      var c = new FirebaseSimpleLogin(this._fRef, this._onLoginEvent.bind(this));
      return this._authClient = c, this._object;
    },
    login: function (a, b) {
      var c = this._q.defer(), d = this;
      return this.getCurrentUser().then(function () {
        d._loginDeferred = c, d._authClient.login(a, b);
      }), c.promise;
    },
    logout: function () {
      this._authClient.logout(), delete this._currentUserData;
    },
    createUser: function (a, b) {
      var c = this, d = this._q.defer();
      return c._authClient.createUser(a, b, function (a, b) {
        a ? (c._rootScope.$broadcast('$firebaseSimpleLogin:error', a), d.reject(a)) : d.resolve(b);
      }), d.promise;
    },
    changePassword: function (a, b, c) {
      var d = this, e = this._q.defer();
      return d._authClient.changePassword(a, b, c, function (a) {
        a ? (d._rootScope.$broadcast('$firebaseSimpleLogin:error', a), e.reject(a)) : e.resolve();
      }), e.promise;
    },
    getCurrentUser: function () {
      var a = this, b = this._q.defer();
      return void 0 !== a._currentUserData ? b.resolve(a._currentUserData) : a._getCurrentUserDeferred.push(b), b.promise;
    },
    removeUser: function (a, b) {
      var c = this, d = this._q.defer();
      return c._authClient.removeUser(a, b, function (a) {
        a ? (c._rootScope.$broadcast('$firebaseSimpleLogin:error', a), d.reject(a)) : d.resolve();
      }), d.promise;
    },
    sendPasswordResetEmail: function (a) {
      var b = this, c = this._q.defer();
      return b._authClient.sendPasswordResetEmail(a, function (a) {
        a ? (b._rootScope.$broadcast('$firebaseSimpleLogin:error', a), c.reject(a)) : c.resolve();
      }), c.promise;
    },
    _onLoginEvent: function (a, b) {
      if (this._currentUserData !== b || null !== a) {
        var c = this;
        a ? (c._loginDeferred && (c._loginDeferred.reject(a), c._loginDeferred = null), c._rootScope.$broadcast('$firebaseSimpleLogin:error', a)) : (this._currentUserData = b, c._timeout(function () {
          for (c._object.user = b, b ? c._rootScope.$broadcast('$firebaseSimpleLogin:login', b) : c._rootScope.$broadcast('$firebaseSimpleLogin:logout'), c._loginDeferred && (c._loginDeferred.resolve(b), c._loginDeferred = null); c._getCurrentUserDeferred.length > 0;) {
            var a = c._getCurrentUserDeferred.pop();
            a.resolve(b);
          }
        }));
      }
    }
  };
}();
'use strict';
angular.module('angularSpinkit', [
  'ngRotatingPlaneSpinner',
  'ngDoubleBounceSpinner',
  'ngWaveSpinner',
  'ngWanderingCubesSpinner',
  'ngPulseSpinner',
  'ngChasingDotsSpinner',
  'ngCircleSpinner'
]), angular.module('ngRotatingPlaneSpinner', []).directive('rotatingPlaneSpinner', function () {
  return {
    restrict: 'E',
    templateUrl: 'src/templates/rotatingPlaneSpinner.html'
  };
}), angular.module('ngDoubleBounceSpinner', []).directive('doubleBounceSpinner', function () {
  return {
    restrict: 'E',
    templateUrl: 'src/templates/doubleBounceSpinner.html'
  };
}), angular.module('ngWaveSpinner', []).directive('waveSpinner', function () {
  return {
    restrict: 'E',
    templateUrl: 'src/templates/waveSpinner.html'
  };
}), angular.module('ngWanderingCubesSpinner', []).directive('wanderingCubesSpinner', function () {
  return {
    restrict: 'E',
    templateUrl: 'src/templates/wanderingCubesSpinner.html'
  };
}), angular.module('ngPulseSpinner', []).directive('pulseSpinner', function () {
  return {
    restrict: 'E',
    templateUrl: 'src/templates/pulseSpinner.html'
  };
}), angular.module('ngChasingDotsSpinner', []).directive('chasingDotsSpinner', function () {
  return {
    restrict: 'E',
    templateUrl: 'src/templates/chasingDotsSpinner.html'
  };
}), angular.module('ngCircleSpinner', []).directive('circleSpinner', function () {
  return {
    restrict: 'E',
    templateUrl: 'src/templates/circleSpinner.html'
  };
}), angular.module('angularSpinkit').run([
  '$templateCache',
  function (a) {
    a.put('src/templates/chasingDotsSpinner.html', '<style>\n  .chasing-dots-spinner {\n    margin: 100px auto;\n    width: 40px;\n    height: 40px;\n    position: relative;\n    text-align: center;\n\n    -webkit-animation: rotate 2.0s infinite linear;\n    animation: rotate 2.0s infinite linear;\n  }\n\n  .dot1, .dot2 {\n    width: 60%;\n    height: 60%;\n    display: inline-block;\n    position: absolute;\n    top: 0;\n    background-color: #333;\n    border-radius: 100%;\n\n    -webkit-animation: bounce 2.0s infinite ease-in-out;\n    animation: bounce 2.0s infinite ease-in-out;\n  }\n\n  .dot2 {\n    top: auto;\n    bottom: 0px;\n    -webkit-animation-delay: -1.0s;\n    animation-delay: -1.0s;\n  }\n\n  @-webkit-keyframes rotate { 100% { -webkit-transform: rotate(360deg) }}\n  @keyframes rotate { 100% { transform: rotate(360deg); -webkit-transform: rotate(360deg) }}\n\n  @-webkit-keyframes bounce {\n    0%, 100% { -webkit-transform: scale(0.0) }\n    50% { -webkit-transform: scale(1.0) }\n  }\n\n  @keyframes bounce {\n    0%, 100% {\n      transform: scale(0.0);\n      -webkit-transform: scale(0.0);\n    } 50% {\n        transform: scale(1.0);\n        -webkit-transform: scale(1.0);\n      }\n  }\n</style>\n\n<div class="chasing-dots-spinner">\n  <div class="dot1"></div>\n  <div class="dot2"></div>\n</div>'), a.put('src/templates/circleSpinner.html', '<style>\n  .spinning-dots-spinner {\n    margin: 100px auto;\n    width: 20px;\n    height: 20px;\n    position: relative;\n  }\n\n  .container1 > div, .container2 > div, .container3 > div {\n    width: 6px;\n    height: 6px;\n    background-color: #333;\n\n    border-radius: 100%;\n    position: absolute;\n    -webkit-animation: bouncedelay 1.2s infinite ease-in-out;\n    animation: bouncedelay 1.2s infinite ease-in-out;\n    /* Prevent first frame from flickering when animation starts */\n    -webkit-animation-fill-mode: both;\n    animation-fill-mode: both;\n  }\n\n  .spinning-dots-spinner .spinner-container {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n\n  .container2 {\n    -webkit-transform: rotateZ(45deg);\n    transform: rotateZ(45deg);\n  }\n\n  .container3 {\n    -webkit-transform: rotateZ(90deg);\n    transform: rotateZ(90deg);\n  }\n\n  .circle1 { top: 0; left: 0; }\n  .circle2 { top: 0; right: 0; }\n  .circle3 { right: 0; bottom: 0; }\n  .circle4 { left: 0; bottom: 0; }\n\n  .container2 .circle1 {\n    -webkit-animation-delay: -1.1s;\n    animation-delay: -1.1s;\n  }\n\n  .container3 .circle1 {\n    -webkit-animation-delay: -1.0s;\n    animation-delay: -1.0s;\n  }\n\n  .container1 .circle2 {\n    -webkit-animation-delay: -0.9s;\n    animation-delay: -0.9s;\n  }\n\n  .container2 .circle2 {\n    -webkit-animation-delay: -0.8s;\n    animation-delay: -0.8s;\n  }\n\n  .container3 .circle2 {\n    -webkit-animation-delay: -0.7s;\n    animation-delay: -0.7s;\n  }\n\n  .container1 .circle3 {\n    -webkit-animation-delay: -0.6s;\n    animation-delay: -0.6s;\n  }\n\n  .container2 .circle3 {\n    -webkit-animation-delay: -0.5s;\n    animation-delay: -0.5s;\n  }\n\n  .container3 .circle3 {\n    -webkit-animation-delay: -0.4s;\n    animation-delay: -0.4s;\n  }\n\n  .container1 .circle4 {\n    -webkit-animation-delay: -0.3s;\n    animation-delay: -0.3s;\n  }\n\n  .container2 .circle4 {\n    -webkit-animation-delay: -0.2s;\n    animation-delay: -0.2s;\n  }\n\n  .container3 .circle4 {\n    -webkit-animation-delay: -0.1s;\n    animation-delay: -0.1s;\n  }\n\n  @-webkit-keyframes bouncedelay {\n    0%, 80%, 100% { -webkit-transform: scale(0.0) }\n    40% { -webkit-transform: scale(1.0) }\n  }\n\n  @keyframes bouncedelay {\n    0%, 80%, 100% {\n      transform: scale(0.0);\n      -webkit-transform: scale(0.0);\n    } 40% {\n        transform: scale(1.0);\n        -webkit-transform: scale(1.0);\n      }\n  }\n</style>\n<div class="spinning-dots-spinner">\n  <div class="spinner-container container1">\n    <div class="circle1"></div>\n    <div class="circle2"></div>\n    <div class="circle3"></div>\n    <div class="circle4"></div>\n  </div>\n  <div class="spinner-container container2">\n    <div class="circle1"></div>\n    <div class="circle2"></div>\n    <div class="circle3"></div>\n    <div class="circle4"></div>\n  </div>\n  <div class="spinner-container container3">\n    <div class="circle1"></div>\n    <div class="circle2"></div>\n    <div class="circle3"></div>\n    <div class="circle4"></div>\n  </div>\n</div>'), a.put('src/templates/doubleBounceSpinner.html', '<style>\n  .double-bounce-spinner {\n    width: 40px;\n    height: 40px;\n\n    position: relative;\n    margin: 100px auto;\n  }\n\n  .double-bounce1, .double-bounce2 {\n    width: 100%;\n    height: 100%;\n    border-radius: 50%;\n    background-color: #333;\n    opacity: 0.6;\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    -webkit-animation: bounce 2.0s infinite ease-in-out;\n    animation: bounce 2.0s infinite ease-in-out;\n  }\n\n  .double-bounce2 {\n    -webkit-animation-delay: -1.0s;\n    animation-delay: -1.0s;\n  }\n\n  @-webkit-keyframes bounce {\n    0%, 100% { -webkit-transform: scale(0.0) }\n    50% { -webkit-transform: scale(1.0) }\n  }\n\n  @keyframes bounce {\n    0%, 100% {\n      transform: scale(0.0);\n      -webkit-transform: scale(0.0);\n    } 50% {\n        transform: scale(1.0);\n        -webkit-transform: scale(1.0);\n      }\n  }\n</style>\n\n<div class="double-bounce-spinner">\n  <div class="double-bounce1"></div>\n  <div class="double-bounce2"></div>\n</div>'), a.put('src/templates/pulseSpinner.html', '<style>\n  .pulse-spinner {\n    width: 40px;\n    height: 40px;\n    margin: 100px auto;\n    background-color: #333;\n\n    border-radius: 100%;\n    -webkit-animation: scaleout 1.0s infinite ease-in-out;\n    animation: scaleout 1.0s infinite ease-in-out;\n  }\n\n  @-webkit-keyframes scaleout {\n    0% { -webkit-transform: scale(0.0) }\n    100% {\n      -webkit-transform: scale(1.0);\n      opacity: 0;\n    }\n  }\n\n  @keyframes scaleout {\n    0% {\n      transform: scale(0.0);\n      -webkit-transform: scale(0.0);\n    } 100% {\n        transform: scale(1.0);\n        -webkit-transform: scale(1.0);\n        opacity: 0;\n      }\n  }\n</style>\n\n<div class="pulse-spinner"></div>'), a.put('src/templates/rotatingPlaneSpinner.html', '<style>\n  .three-dots-row-spinner {\n    width: 30px;\n    height: 30px;\n    background-color: #333;\n\n    margin: 100px auto;\n    -webkit-animation: rotateplane 1.2s infinite ease-in-out;\n    animation: rotateplane 1.2s infinite ease-in-out;\n  }\n\n  @-webkit-keyframes rotateplane {\n    0% { -webkit-transform: perspective(120px) }\n    50% { -webkit-transform: perspective(120px) rotateY(180deg) }\n    100% { -webkit-transform: perspective(120px) rotateY(180deg)  rotateX(180deg) }\n  }\n\n  @keyframes rotateplane {\n    0% {\n      transform: perspective(120px) rotateX(0deg) rotateY(0deg);\n      -webkit-transform: perspective(120px) rotateX(0deg) rotateY(0deg)\n    } 50% {\n        transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);\n        -webkit-transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg)\n      } 100% {\n          transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\n          -webkit-transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\n        }\n  }\n</style>\n\n<div class="three-dots-row-spinner"></div>'), a.put('src/templates/wanderingCubesSpinner.html', '<style>\n  .wandering-cubes-spinner {\n    margin: 100px auto;\n    width: 32px;\n    height: 32px;\n    position: relative;\n  }\n\n  .cube1, .cube2 {\n    background-color: #333;\n    width: 10px;\n    height: 10px;\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    -webkit-animation: cubemove 1.8s infinite ease-in-out;\n    animation: cubemove 1.8s infinite ease-in-out;\n  }\n\n  .cube2 {\n    -webkit-animation-delay: -0.9s;\n    animation-delay: -0.9s;\n  }\n\n  @-webkit-keyframes cubemove {\n    25% { -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5) }\n    50% { -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg) }\n    75% { -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5) }\n    100% { -webkit-transform: rotate(-360deg) }\n  }\n\n  @keyframes cubemove {\n    25% {\n      transform: translateX(42px) rotate(-90deg) scale(0.5);\n      -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\n    } 50% {\n        transform: translateX(42px) translateY(42px) rotate(-179deg);\n        -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\n      } 50.1% {\n          transform: translateX(42px) translateY(42px) rotate(-180deg);\n          -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\n        } 75% {\n            transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n            -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n          } 100% {\n              transform: rotate(-360deg);\n              -webkit-transform: rotate(-360deg);\n            }\n  }\n</style>\n\n<div class="wandering-cubes-spinner">\n  <div class="cube1"></div>\n  <div class="cube2"></div>\n</div>'), a.put('src/templates/waveSpinner.html', '<style>\n  .wave-spinner {\n    margin: 100px auto;\n    width: 50px;\n    height: 30px;\n    text-align: center;\n    font-size: 10px;\n  }\n\n  .wave-spinner > div {\n    background-color: #333;\n    height: 100%;\n    width: 6px;\n    display: inline-block;\n\n    -webkit-animation: stretchdelay 1.2s infinite ease-in-out;\n    animation: stretchdelay 1.2s infinite ease-in-out;\n  }\n\n  .wave-spinner .rect2 {\n    -webkit-animation-delay: -1.1s;\n    animation-delay: -1.1s;\n  }\n\n  .wave-spinner .rect3 {\n    -webkit-animation-delay: -1.0s;\n    animation-delay: -1.0s;\n  }\n\n  .wave-spinner .rect4 {\n    -webkit-animation-delay: -0.9s;\n    animation-delay: -0.9s;\n  }\n\n  .wave-spinner .rect5 {\n    -webkit-animation-delay: -0.8s;\n    animation-delay: -0.8s;\n  }\n\n  @-webkit-keyframes stretchdelay {\n    0%, 40%, 100% { -webkit-transform: scaleY(0.4) }\n    20% { -webkit-transform: scaleY(1.0) }\n  }\n\n  @keyframes stretchdelay {\n    0%, 40%, 100% {\n      transform: scaleY(0.4);\n      -webkit-transform: scaleY(0.4);\n    }  20% {\n         transform: scaleY(1.0);\n         -webkit-transform: scaleY(1.0);\n       }\n  }\n</style>\n\n<div class="wave-spinner">\n  <div class="rect1"></div>\n  <div class="rect2"></div>\n  <div class="rect3"></div>\n  <div class="rect4"></div>\n  <div class="rect5"></div>\n</div>');
  }
]);
(function () {
  'use strict';
  var app = angular.module('srsmanager', [
      'ngSanitize',
      'ui.router',
      'firebase',
      'ngAnimate',
      'angularSpinkit',
      'config',
      'subscriptions',
      'requirements',
      'master',
      'toast',
      'home',
      'details',
      'add',
      'edit',
      'manageSubscriptions',
      'useractions',
      'uploader',
      'imagepreview'
    ]);
  app.config([
    '$stateProvider',
    '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
      $urlRouterProvider.otherwise('/');
      $stateProvider.state('master', {
        abstract: true,
        url: '',
        controller: 'MasterController',
        templateUrl: 'app/pages/master/master.html'
      }).state('master.home', {
        url: '/',
        views: {
          'container': {
            controller: 'HomeController',
            templateUrl: 'app/pages/home/home.html'
          }
        }
      }).state('master.details', {
        url: '/details/:id',
        views: {
          'container': {
            controller: 'DetailsController',
            templateUrl: 'app/pages/details/details.html'
          }
        }
      }).state('master.add', {
        url: '/add',
        views: {
          'container': {
            controller: 'AddController',
            templateUrl: 'app/pages/add/add.html'
          }
        }
      }).state('master.edit', {
        url: '/edit/:id',
        views: {
          'container': {
            controller: 'EditController',
            templateUrl: 'app/pages/edit/edit.html'
          }
        }
      }).state('master.manageSubscriptions', {
        url: '/subscriptions',
        views: {
          'container': {
            controller: 'ManageSubscriptionsController',
            templateUrl: 'app/pages/manageSubscriptions/manageSubscriptions.html'
          }
        }
      }).state('master.register', {
        url: '/register',
        views: {
          'container': {
            controller: 'UserActionsController',
            templateUrl: 'app/pages/useractions/register.html'
          }
        }
      }).state('master.changepassword', {
        url: '/changepassword',
        views: {
          'container': {
            controller: 'UserActionsController',
            templateUrl: 'app/pages/useractions/changepassword.html'
          }
        }
      });
    }
  ]);
  app.run([
    '$rootScope',
    'User',
    'Config',
    function ($rootScope, User, Config) {
      $rootScope.UserDetails = User.details;
    }
  ]);
}());
(function () {
  'use strict';
  var uploader = angular.module('uploader', ['toast']);
  uploader.directive('srsFilesRead', [
    'Toast',
    function (Toast) {
      return {
        scope: { filesRead: '=' },
        link: function (scope, element, attributes) {
          element.bind('change', function (changeEvent) {
            if (changeEvent.target.files) {
              scope.$apply(function () {
                if (!scope.filesRead) {
                  scope.filesRead = [];
                }
                Toast.toggle(Toast.warning, 'Loading image(s). Please wait.', 60000);
              });
              var i = 0;
              var fileread = changeEvent.target.files;
              var reader = new FileReader();
              reader.onloadend = function () {
                scope.$apply(function () {
                  scope.filesRead.push(reader.result);
                });
                if (i < fileread.length - 1) {
                  reader.readAsDataURL(fileread[++i]);
                } else {
                  scope.$apply(function () {
                    Toast.enabled.value = false;
                  });
                }
              };
              reader.readAsDataURL(fileread[i]);
            }
          });
        }
      };
    }
  ]);
}());
(function () {
  'use strict';
  var config = angular.module('config', ['firebase']);
  config.factory('Config', [
    '$firebase',
    '$log',
    function ($firebase, $log) {
      var configRef = new Firebase('https://srsmanager.firebaseio.com/Config');
      var _config = $firebase(configRef);
      var _baseurl = { value: '' }, _mailurl = { value: '' }, _mailkey = { value: '' }, _tfsurl = { value: '' }, _isLoaded = { value: false };
      _config.$on('loaded', function () {
        _isLoaded.value = true;
        _baseurl.value = _config['baseurl'];
        _mailurl.value = _config['mailurl'];
        _mailkey.value = _config['mailkey'];
        _tfsurl.value = _config['tfsurl'];
        $log.log('Loaded configuration');
      });
      return {
        baseurl: _baseurl,
        mailurl: _mailurl,
        mailkey: _mailkey,
        tfsurl: _tfsurl
      };
    }
  ]);
}());
(function () {
  'use strict';
  var lodash = angular.module('lodash', []);
  lodash.factory('_', [
    '$window',
    function ($window) {
      return $window._;
    }
  ]);
}());
(function () {
  'use strict';
  var requirements = angular.module('requirements', ['firebase']);
  requirements.factory('RequirementsManager', [
    '$firebase',
    function ($firebase) {
      var requirementsRef = new Firebase('https://srsmanager.firebaseio.com/Requirements');
      var _requirements = $firebase(requirementsRef);
      var _releaseList = [
          'R8',
          'R7'
        ];
      var _areaList = [
          'Portal',
          'Platform',
          'Desktop'
        ];
      var _statusList = [
          'Ready',
          'NotReady',
          'Closed'
        ];
      var _isLoaded = { value: false };
      _requirements.$on('loaded', function () {
        _isLoaded.value = true;
      });
      return {
        requirements: _requirements,
        isLoaded: _isLoaded,
        getReleaseList: function () {
          return _releaseList;
        },
        getAreaList: function () {
          return _areaList;
        },
        getStatusList: function () {
          return _statusList;
        }
      };
    }
  ]);
}());
(function () {
  'use strict';
  var user = angular.module('user', [
      'firebase',
      'toast'
    ]);
  user.factory('User', [
    '$firebase',
    '$firebaseSimpleLogin',
    function ($firebase, $firebaseSimpleLogin) {
      var usersRef = new Firebase('https://srsmanager.firebaseio.com/Users');
      var _users = $firebase(usersRef);
      var authRef = new Firebase('https://srsmanager.firebaseio.com/.info/authenticated');
      var _details = { isAuthenticated: false };
      var _auth = $firebaseSimpleLogin(authRef);
      var _usersLoaded = false;
      var _setupUser = function (user) {
        angular.extend(_details, user);
        angular.extend(_details, { isAuthenticated: true });
        if (_usersLoaded) {
          angular.extend(_details, _users[_details.id]);
        } else {
          _users.$on('loaded', function () {
            _usersLoaded = true;
            angular.extend(_details, _users[_details.id]);
          });
        }
      };
      var _cleanUpUser = function () {
        angular.copy({ isAuthenticated: false }, _details);
      };
      return {
        auth: _auth,
        details: _details,
        users: _users,
        setupUser: _setupUser,
        cleanUpUser: _cleanUpUser
      };
    }
  ]);
  user.run([
    '$rootScope',
    'User',
    'Toast',
    '$log',
    function ($rootScope, User, Toast, $log) {
      $rootScope.$on('$firebaseSimpleLogin:logout', function (a, b, c) {
        $log.log('logging out');
        if (User.details.isAuthenticated) {
          Toast.toggle(Toast.success, 'Logged out.');
        }
        User.cleanUpUser();
      });
      $rootScope.$on('$firebaseSimpleLogin:login', function (event, user) {
        $log.log('logging in', user);
        User.setupUser(user);
        Toast.toggle(Toast.success, 'Logged in successfully.');
      });
    }
  ]);
}());
(function () {
  'use strict';
  var subscriptions = angular.module('subscriptions', [
      'firebase',
      'user',
      'home',
      'config',
      'toast'
    ]);
  subscriptions.factory('SubscriptionsManager', [
    '$firebase',
    'User',
    '$filter',
    '$http',
    'Config',
    '$log',
    'Toast',
    '$q',
    function ($firebase, User, $filter, $http, Config, $log, Toast, $q) {
      var subscriptionsRef = new Firebase('https://srsmanager.firebaseio.com/Subscriptions');
      var _subscriptions = $firebase(subscriptionsRef);
      var _isLoaded = { value: false };
      _subscriptions.$on('loaded', function () {
        _isLoaded.value = true;
      });
      return {
        subscriptions: _subscriptions,
        isLoaded: _isLoaded,
        subscribe: function (filterObj) {
          User.auth.$getCurrentUser().then(function (user) {
            angular.extend(filterObj, { 'email': user.email });
            _subscriptions.$add(filterObj);
            Toast.toggle(Toast.success, 'Subscribed to the current filter');
          });
        },
        checkSubscriptions: function (requirement, isUpdate) {
          var subs = $filter('orderByPriority')(_subscriptions);
          angular.forEach(subs, function (subscription) {
            var res = $filter('requirementsSearch')([requirement], subscription);
            if (res.length > 0) {
              $log.log('subscription matched', subscription, ' for requirement ', requirement.versions[requirement.lastVersion], ' sending mail to ', subscription.email);
              var mailText = '<h1>SRS MANAGER</h1><br/><br/>';
              if (isUpdate) {
                mailText += 'An update is available for an existing requirement.<br/>';
              } else {
                mailText += 'A new requirement is available.<br/>';
              }
              mailText += requirement.versions[requirement.lastVersion].Name + ':<br/><a href="' + Config.baseurl.value + '/details/' + requirement.id + '">' + Config.baseurl.value + '/details/' + requirement.id + '</a>';
              var mail = {
                  'key': Config.mailkey.value,
                  'message': {
                    'from_email': 'yah@brainlab.com',
                    'from_name': 'SRS Manager',
                    'to': [{
                        'email': subscription.email,
                        'type': 'to'
                      }],
                    'subject': 'SRS Manager - A requirement has met one of your filters',
                    'html': mailText
                  }
                };
              $http({
                method: 'POST',
                url: Config.mailurl.value,
                data: mail
              }).success(function (data, status, headers, config) {
                $log.log('sent notification');
              }).error(function (data, status, headers, config) {
                $log.error('failed to send notification');
              });
            }
          });
        }
      };
    }
  ]);
  subscriptions.filter('onlyMyEmail', function () {
    return function (list, email) {
      var _filtered = [];
      angular.forEach(list, function (item) {
        if (item.email === email) {
          _filtered.push(item);
        }
      });
      return _filtered;
    };
  });
}());
(function () {
  'use strict';
  var user = angular.module('toast', []);
  user.factory('Toast', [
    '$timeout',
    function ($timeout) {
      var $this = this;
      var _enabled = { value: false };
      var _message = { value: '' };
      var _type = { value: '' };
      var _toggle = function (type, message, delay) {
        delay = delay || 3000;
        _type.value = type;
        _message.value = message;
        _enabled.value = true;
        $timeout(function () {
          _enabled.value = false;
        }, delay);
      };
      return {
        success: 'success',
        error: 'error',
        warning: 'warning',
        enabled: _enabled,
        type: _type,
        toggle: _toggle,
        message: _message
      };
    }
  ]);
}());
(function () {
  'use strict';
  var uploader = angular.module('imagepreview', []);
  uploader.directive('srsImagePreview', [function () {
      return {
        scope: {
          imagePreviewEnable: '=',
          imagePreviewSrc: '='
        },
        link: function (scope, element, attributes) {
          scope.closePreview = function () {
            scope.imagePreviewEnable = false;
          };
        },
        templateUrl: 'app/common/imagepreview/imagepreview.html'
      };
    }]);
}());
(function () {
  'use strict';
  var page = angular.module('master', [
      'user',
      'toast'
    ]);
  page.controller('MasterController', [
    '$scope',
    'User',
    'Toast',
    function ($scope, User, Toast) {
      $scope.User = User;
      $scope.Toast = Toast;
      $scope.user = {
        name: '',
        password: ''
      };
      $scope.signin = function () {
        Toast.toggle(Toast.warning, 'Logging in. Please wait.', 2000);
        User.auth.$login('password', {
          email: $scope.user.name,
          password: $scope.user.password
        }).then(function () {
          $scope.user.name = '';
          $scope.user.password = '';
        }, function (error) {
          console.error('Login failed: ', error);
          Toast.toggle(Toast.error, 'Login failed. Wrong Username or Password.');
        });
      };
      $scope.signout = function () {
        User.auth.$logout();
      };
    }
  ]);
}());
(function () {
  'use strict';
  var page = angular.module('useractions', [
      'user',
      'toast',
      'ui.router'
    ]);
  page.controller('UserActionsController', [
    '$scope',
    'User',
    'Toast',
    '$state',
    '$log',
    function ($scope, User, Toast, $state, $log) {
      $scope.User = User;
      $scope.Toast = Toast;
      $scope.register = function () {
        User.auth.$createUser($scope.newuser.email, $scope.newuser.password).then(function (user) {
          User.users[user.id] = {
            name: $scope.newuser.name,
            email: $scope.newuser.email
          };
          User.users.$update(User.users).then(function () {
            User.auth.$login('password', {
              email: $scope.newuser.email,
              password: $scope.newuser.password
            }).then(function (user) {
              $state.go('master.home');
              Toast.toggle(Toast.success, 'Registered successfully.');
            }, function (error) {
              $state.go('master.home');
              Toast.toggle(Toast.error, 'Failed to login: ' + error);
            });
          }, function (error) {
            Toast.toggle(Toast.error, 'Failed to register.');
          });
        });
      };
      $scope.changePassword = function () {
        User.auth.$getCurrentUser().then(function (user) {
          User.auth.$changePassword(user.email, $scope.changepassworduser.oldpassword, $scope.changepassworduser.newpassword).then(function () {
            $state.go('master.home');
            Toast.toggle(Toast.success, 'Password changed.');
          });
        });
      };
    }
  ]);
}());
(function () {
  'use strict';
  var page = angular.module('manageSubscriptions', [
      'lodash',
      'subscriptions',
      'toast',
      'user'
    ]);
  page.controller('ManageSubscriptionsController', [
    '$scope',
    'SubscriptionsManager',
    '_',
    'Toast',
    'User',
    '$filter',
    function ($scope, SubscriptionsManager, _, Toast, User, $filter) {
      $scope.subscriptions = SubscriptionsManager.subscriptions;
      $scope.User = User;
      $scope.deleteSubscription = function (subscriptionKey) {
        SubscriptionsManager.subscriptions.$remove(subscriptionKey);
        Toast.toggle(Toast.success, 'Deleted subscription.');
      };
    }
  ]);
}());
(function () {
  'use strict';
  var page = angular.module('home', [
      'ui.router',
      'angularSpinkit',
      'requirements',
      'subscriptions',
      'toast',
      'config'
    ]);
  page.controller('HomeController', [
    '$scope',
    'RequirementsManager',
    'SubscriptionsManager',
    '$state',
    'Toast',
    'Config',
    function ($scope, RequirementsManager, SubscriptionsManager, $state, Toast, Config) {
      $scope.Config = Config;
      $scope.RequirementsManager = RequirementsManager;
      $scope.requirements = RequirementsManager.requirements;
      $scope.showDetails = function (requirement) {
        $state.go('master.details', { id: requirement.id });
      };
      $scope.search = {
        Area: '',
        Name: '',
        Release: ''
      };
      $scope.subscribe = function () {
        SubscriptionsManager.subscribe({
          Status: $scope.search.Status,
          Release: $scope.search.Release,
          Area: $scope.search.Area,
          Name: $scope.search.Name,
          TFSRequirementNumber: $scope.search.TFSRequirementNumber
        });
      };
    }
  ]);
}());
(function () {
  'use strict';
  var page = angular.module('home');
  page.filter('requirementsSearch', function () {
    return function (requirements, searchFilters) {
      var _filteredRequirements = [];
      angular.forEach(requirements, function (requirement) {
        var lastVersion = requirement.versions[requirement.lastVersion];
        if ((lastVersion.Release === searchFilters.Release || !searchFilters.Release) && (lastVersion.Name.toLowerCase().indexOf(searchFilters.Name) > -1 || !searchFilters.Name) && (lastVersion.Status === searchFilters.Status || !searchFilters.Status) && (lastVersion.TFSRequirementNumber.toString().indexOf(searchFilters.TFSRequirementNumber) > -1 || !searchFilters.TFSRequirementNumber)) {
          var areaFilter = false;
          if (lastVersion.Areas) {
            angular.forEach(lastVersion.Areas, function (area) {
              if (area.Name === searchFilters.Area || !searchFilters.Area) {
                areaFilter = true;
              }
            });
          } else {
            areaFilter = true;
          }
          if (areaFilter) {
            _filteredRequirements.push(requirement);
          }
        }
      });
      return _filteredRequirements;
    };
  });
}());
(function () {
  'use strict';
  var page = angular.module('add', [
      'ui.router',
      'ngAnimate',
      'lodash',
      'requirements',
      'subscriptions',
      'toast',
      'angularSpinkit',
      'imagepreview',
      'user'
    ]);
  page.controller('AddController', [
    '$scope',
    'RequirementsManager',
    'SubscriptionsManager',
    '_',
    '$state',
    'Toast',
    'User',
    function ($scope, RequirementsManager, SubscriptionsManager, _, $state, Toast, User) {
      $scope.RequirementsManager = RequirementsManager;
      $scope.requirements = RequirementsManager.requirements;
      $scope.newRequirement = {
        Status: 'NotReady',
        Release: RequirementsManager.getReleaseList()[0],
        Date: new Date(),
        TFSRequirementNumber: '',
        version: 0,
        AddedBy: User.details.name,
        images: []
      };
      var _requirementToAdd = {
          lastVersion: 'v0',
          Added: new Date(),
          Modified: new Date(),
          AddedBy: User.details.name,
          versions: { 'v0': $scope.newRequirement }
        };
      $scope.toggleStatus = function () {
        if ($scope.newRequirement.Status === 'NotReady') {
          $scope.newRequirement.Status = 'Ready';
        } else {
          $scope.newRequirement.Status = 'NotReady';
        }
      };
      $scope.addRequirement = function () {
        Toast.toggle(Toast.warning, 'Adding a new requirement.');
        var re = new RegExp('\n', 'g');
        $scope.newRequirement.Description = $scope.newRequirement.Description.replace(re, '<br/>');
        RequirementsManager.requirements.$add(_requirementToAdd).then(function (ref) {
          var uid = ref.name();
          RequirementsManager.requirements[uid].id = uid;
          RequirementsManager.requirements.$save(uid).then(function () {
            SubscriptionsManager.checkSubscriptions(RequirementsManager.requirements[uid]);
            $state.go('master.home');
            Toast.toggle(Toast.success, 'Requirement added successfully.');
          });
        });
      };
      $scope.toggleArea = function (areaName) {
        $scope[areaName] = !$scope[areaName];
        $scope.newRequirement.Areas = $scope.newRequirement.Areas || [];
        var selectedArea = _.filter($scope.newRequirement.Areas, { 'Name': areaName });
        if (selectedArea.length > 0) {
          $scope.newRequirement.Areas = _.reject($scope.newRequirement.Areas, { 'Name': areaName });
        } else {
          $scope.newRequirement.Areas.push({ 'Name': areaName });
        }
      };
      $scope.removeUploadedImage = function (index) {
        $scope.newRequirement.images.splice(index, 1);
      };
      $scope.imagePreview = { enabled: false };
      $scope.setImageToPreview = function (image) {
        $scope.imagePreview.selectedImage = image;
        $scope.imagePreview.enabled = true;
      };
    }
  ]);
}());
(function () {
  'use strict';
  var page = angular.module('edit', [
      'lodash',
      'ui.router',
      'requirements',
      'subscriptions',
      'toast',
      'imagepreview'
    ]);
  page.controller('EditController', [
    '$scope',
    'RequirementsManager',
    'SubscriptionsManager',
    '_',
    '$state',
    '$stateParams',
    '$filter',
    'Toast',
    function ($scope, RequirementsManager, SubscriptionsManager, _, $state, $stateParams, $filter, Toast) {
      $scope.RequirementsManager = RequirementsManager;
      $scope.requirements = RequirementsManager.requirements;
      var _requirementToAdd;
      function setRequirementInScope() {
        _requirementToAdd = RequirementsManager.requirements[$stateParams.id];
        $scope.newRequirement = angular.copy(_requirementToAdd.versions[_requirementToAdd.lastVersion]);
        var re = new RegExp('<br/>', 'g');
        $scope.newRequirement.Description = $scope.newRequirement.Description.replace(re, '\n');
        $scope.master = angular.copy($scope.newRequirement);
        angular.forEach($scope.newRequirement.Areas, function (area) {
          $scope[area.Name] = true;
        });
      }
      if ($stateParams.id) {
        if (RequirementsManager.isLoaded.value) {
          setRequirementInScope();
        } else {
          RequirementsManager.requirements.$on('loaded', function () {
            setRequirementInScope();
          });
        }
      }
      $scope.toggleStatus = function () {
        if ($scope.newRequirement.Status === 'NotReady') {
          $scope.newRequirement.Status = 'Ready';
        } else if ($scope.newRequirement.Status === 'Ready') {
          $scope.newRequirement.Status = 'Closed';
        } else {
          $scope.newRequirement.Status = 'NotReady';
        }
      };
      $scope.updateRequirement = function () {
        var re = new RegExp('\n', 'g');
        $scope.newRequirement.Description = $scope.newRequirement.Description.replace(re, '<br/>');
        $scope.newRequirement.version++;
        $scope.newRequirement.Date = new Date().toISOString();
        _requirementToAdd.versions['v' + $scope.newRequirement.version] = $scope.newRequirement;
        _requirementToAdd.lastVersion = 'v' + $scope.newRequirement.version;
        RequirementsManager.requirements.$update(RequirementsManager.requirements);
        SubscriptionsManager.checkSubscriptions(_requirementToAdd, true);
        $state.go('master.details', { id: $stateParams.id });
        Toast.toggle(Toast.success, 'Requirement updated successfully');
      };
      $scope.toggleArea = function (areaName) {
        $scope[areaName] = !$scope[areaName];
        $scope.newRequirement.Areas = $scope.newRequirement.Areas || [];
        var selectedArea = _.filter($scope.newRequirement.Areas, { 'Name': areaName });
        if (selectedArea.length > 0) {
          $scope.newRequirement.Areas = _.reject($scope.newRequirement.Areas, { 'Name': areaName });
        } else {
          $scope.newRequirement.Areas.push({ 'Name': areaName });
        }
      };
      $scope.delete = {
        message: 'Delete This Version',
        enabled: false
      };
      $scope.deleteRequirement = function () {
        if (!$scope.delete.enabled) {
          $scope.delete.message = 'Click Again to Delete';
          $scope.delete.enabled = true;
        } else {
          delete RequirementsManager.requirements[$stateParams.id].versions['v' + $scope.newRequirement.version];
          var lastVersion = RequirementsManager.requirements[$stateParams.id].lastVersion.split('v')[1];
          if (lastVersion > 0) {
            RequirementsManager.requirements[$stateParams.id].lastVersion = 'v' + --lastVersion;
            RequirementsManager.requirements.$update(RequirementsManager.requirements);
            $state.go('master.details', { id: RequirementsManager.requirements[$stateParams.id].id });
            Toast.toggle(Toast.success, 'Version deleted successfully');
          } else {
            RequirementsManager.requirements.$remove($stateParams.id);
            $state.go('master.home');
            Toast.toggle(Toast.success, 'Requirement deleted successfully');
          }
        }
      };
      $scope.isUnchanged = function () {
        return angular.equals($scope.newRequirement, $scope.master);
      };
      $scope.cancel = function () {
        $state.go('master.details', { id: RequirementsManager.requirements[$stateParams.id].id });
      };
      $scope.removeUploadedImage = function (index) {
        $scope.newRequirement.images.splice(index, 1);
      };
      $scope.imagePreview = { enabled: false };
      $scope.setImageToPreview = function (image) {
        $scope.imagePreview.selectedImage = image;
        $scope.imagePreview.enabled = true;
      };
    }
  ]);
}());
(function () {
  'use strict';
  var page = angular.module('details', [
      'ngSanitize',
      'ui.router',
      'requirements',
      'config',
      'imagepreview'
    ]);
  page.controller('DetailsController', [
    '$scope',
    'RequirementsManager',
    '$state',
    '$stateParams',
    'Config',
    function ($scope, RequirementsManager, $state, $stateParams, Config) {
      $scope.Config = Config;
      if (RequirementsManager.isLoaded.value) {
        $scope.versionToWatch = RequirementsManager.requirements[$stateParams.id].lastVersion;
        setRequirementInScope();
      } else {
        RequirementsManager.requirements.$on('loaded', function () {
          $scope.versionToWatch = RequirementsManager.requirements[$stateParams.id].lastVersion;
          setRequirementInScope();
        });
      }
      function setRequirementInScope() {
        $scope.requirement = RequirementsManager.requirements[$stateParams.id];
        $scope.version = $scope.requirement.versions[$scope.versionToWatch];
        $scope.lastVersion = RequirementsManager.requirements[$stateParams.id].lastVersion;
      }
      $scope.$watch('versionToWatch', function (newVal, oldVal) {
        if (oldVal !== newVal) {
          setRequirementInScope();
        }
      });
      $scope.goToEditMode = function () {
        $state.go('master.edit', { id: $scope.requirement.id });
      };
      $scope.imagePreview = { enabled: false };
      $scope.setImageToPreview = function (image) {
        $scope.imagePreview.selectedImage = image;
        $scope.imagePreview.enabled = true;
      };
    }
  ]);
}());
angular.module('srsmanager').run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('app/pages/add/add.html', '<div class="row">\r' + '\n' + '    <div class="col-md-8">\r' + '\n' + '        <div class="row">\r' + '\n' + '            <div class="col-md-12">\r' + '\n' + '                <input type="text" class="form-control input-lg" placeholder="Requirement Name" autofocus ng-model="newRequirement.Name" />\r' + '\n' + '            </div>\r' + '\n' + '        </div>\r' + '\n' + '        <div class="row page-section">\r' + '\n' + '            <div class="col-md-12">\r' + '\n' + '                <textarea class="form-control" ng-model="newRequirement.Description" cols="30" rows="10" placeholder="Requirement Description"></textarea>\r' + '\n' + '            </div>\r' + '\n' + '        </div>\r' + '\n' + '        <div class="row page-section">\r' + '\n' + '            <div class="col-md-6">\r' + '\n' + '                <input type="file" srs-files-read files-read="newRequirement.images" multiple class="form-control" accept="image/*" />\r' + '\n' + '            </div>\r' + '\n' + '        </div>\r' + '\n' + '        <div class="row page-section">\r' + '\n' + '            <div ng-repeat="image in newRequirement.images track by $index" ng-mouseenter="showMenu = true" ng-mouseleave="showMenu = false" class="thumbnail col-md-3 col-md-offset-1 list-animation">\r' + '\n' + '                <span ng-show="showMenu" class="uploaded-image-menu"><button class="btn btn-sm btn-danger" ng-click="removeUploadedImage($index)">Remove</button></span>\r' + '\n' + '                <img ng-src="{{image}}" ng-click="setImageToPreview(image)" /> \r' + '\n' + '            </div>\r' + '\n' + '        </div>\r' + '\n' + '        <div srs-image-preview image-preview-enable="imagePreview.enabled" image-preview-src="imagePreview.selectedImage"></div>\r' + '\n' + '    </div>\r' + '\n' + '    <div class="col-md-4">\r' + '\n' + '        <table class="table">\r' + '\n' + '            <tr>\r' + '\n' + '                <td>\r' + '\n' + '                    Status\r' + '\n' + '                </td>\r' + '\n' + '                <td class="requirement__field">\r' + '\n' + '                    <span class="label srs-label srs-label--clickable" ng-class="{\'label-success\': newRequirement.Status == \'Ready\', \'label-danger\':  newRequirement.Status == \'NotReady\'}" ng-click="toggleStatus()">{{newRequirement.Status}}</span>\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '            <tr>\r' + '\n' + '                <td>Areas</td>\r' + '\n' + '                <td class="requirement__field">\r' + '\n' + '                    <span class="label label-default srs-label srs-label--clickable" ng-class="{\'label-success\': Portal}" ng-click="toggleArea(\'Portal\')">Portal</span>\r' + '\n' + '                    <span class="label label-default srs-label srs-label--clickable" ng-class="{\'label-danger\': Desktop}" ng-click="toggleArea(\'Desktop\')">Desktop</span>\r' + '\n' + '                    <span class="label label-default srs-label srs-label--clickable" ng-class="{\'label-warning\': Platform}" ng-click="toggleArea(\'Platform\')">Platform</span>\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '            <tr>\r' + '\n' + '                <td>\r' + '\n' + '                    Release\r' + '\n' + '                </td>\r' + '\n' + '                <td class="requirement__field">\r' + '\n' + '                    <select class="form-control input-sm" ng-model="newRequirement.Release" ng-options="r for r in RequirementsManager.getReleaseList()"></select>\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '            <tr>\r' + '\n' + '                <td>TFS</td>\r' + '\n' + '                <td class="requirement__field">\r' + '\n' + '                    <input type="text" class="form-control input-sm" ng-model="newRequirement.TFSRequirementNumber" placeholder="TFS Number" />\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '        </table>\r' + '\n' + '        <div class="row page-section">\r' + '\n' + '            <div class="col-md-12">\r' + '\n' + '                <button class="btn btn-success btn-block" ng-click="addRequirement()">Add</button>\r' + '\n' + '            </div>\r' + '\n' + '        </div>\r' + '\n' + '    </div>\r' + '\n' + '\r' + '\n' + '</div>\r' + '\n' + '\r' + '\n' + '\r' + '\n' + '\r' + '\n' + '\r' + '\n' + '    {{requirementToAdd}}');
    $templateCache.put('app/pages/details/details.html', '<div class="row">\r' + '\n' + '    <div class="col-md-8">\r' + '\n' + '        <div class="row">\r' + '\n' + '            <div class="col-md-12 page-header">\r' + '\n' + '                <h1>{{version.Name}}</h1>\r' + '\n' + '            </div>\r' + '\n' + '        </div>\r' + '\n' + '        <div class="row">\r' + '\n' + '            <div class="col-md-12">\r' + '\n' + '                <div class="panel panel-default">\r' + '\n' + '                    <div class="panel-body" ng-bind-html="version.Description">\r' + '\n' + '                    </div>\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '        </div>\r' + '\n' + '        <div class="row page-section">\r' + '\n' + '            <div ng-repeat="image in version.images track by $index" class="thumbnail col-md-3 col-md-offset-1">\r' + '\n' + '                <img ng-src="{{image}}" ng-click="setImageToPreview(image)" /> \r' + '\n' + '            </div>\r' + '\n' + '        </div>\r' + '\n' + '        <div srs-image-preview image-preview-enable="imagePreview.enabled" image-preview-src="imagePreview.selectedImage"></div>\r' + '\n' + '    </div>\r' + '\n' + '    <div class="col-md-3 col-md-offset-1">\r' + '\n' + '        <table class="table">\r' + '\n' + '            <tr>\r' + '\n' + '                <td>\r' + '\n' + '                    Status\r' + '\n' + '                </td>\r' + '\n' + '                <td class="requirement__field">\r' + '\n' + '                    <span class="label srs-label" ng-class="{\'label-success\':version.Status == \'Ready\', \'label-info\': version.Status == \'Closed\', \'label-danger\': version.Status == \'NotReady\'}">{{version.Status}}</span>\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '            <tr>\r' + '\n' + '                <td>Areas</td>\r' + '\n' + '                <td class="requirement__field"><span class="label srs-label" ng-repeat="area in version.Areas" ng-class="{\'label-success\': area.Name == \'Portal\', \'label-warning\': area.Name == \'Platform\', \'label-danger\': area.Name == \'Desktop\'}">{{area.Name}}</span></td>\r' + '\n' + '            </tr>\r' + '\n' + '            <tr>\r' + '\n' + '                <td>\r' + '\n' + '                    Release\r' + '\n' + '                </td>\r' + '\n' + '                <td class="requirement__field">\r' + '\n' + '                    {{version.Release}}\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '            <tr>\r' + '\n' + '                <td>\r' + '\n' + '                    Added\r' + '\n' + '                </td>\r' + '\n' + '                <td class="requirement__field">\r' + '\n' + '                    {{requirement.Added | date:\'short\'}}\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '            <tr>\r' + '\n' + '                <td>\r' + '\n' + '                    Modified\r' + '\n' + '                </td>\r' + '\n' + '                <td class="requirement__field">\r' + '\n' + '                    {{version.Date | date:\'short\'}}\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '            <tr>\r' + '\n' + '                <td>\r' + '\n' + '                    Added By\r' + '\n' + '                </td>\r' + '\n' + '                <td class="requirement__field">\r' + '\n' + '                    {{version.AddedBy}}\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '            <tr>\r' + '\n' + '                <td>TFS</td>\r' + '\n' + '                <td class="requirement__field">\r' + '\n' + '                    <a ng-href="{{Config.tfsurl.value + version.TFSRequirementNumber}}" target="_blank">{{version.TFSRequirementNumber}}</a>\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '            <tr>\r' + '\n' + '                <td>Versions</td>\r' + '\n' + '                <td class="requirement__field">\r' + '\n' + '                    <select class="form-control input-sm" ng-model="versionToWatch">\r' + '\n' + '                        <option ng-repeat="version in requirement.versions | orderByPriority | orderBy:\'Date\':true track by version.version" value="v{{version.version}}">\r' + '\n' + '                            {{version.Date | date:\'short\'}}\r' + '\n' + '                        </option>\r' + '\n' + '                    </select>\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '            <tr ng-if="UserDetails.role == \'admin\'">\r' + '\n' + '                <td colspan="2">\r' + '\n' + '                    <button class="btn btn-success btn-block" ng-click="goToEditMode()" ng-disabled="versionToWatch !== lastVersion">\r' + '\n' + '                        <span ng-show="versionToWatch === lastVersion">Edit</span>\r' + '\n' + '                        <span ng-hide="versionToWatch === lastVersion">Only the latest version is editable</span>\r' + '\n' + '                    </button>\r' + '\n' + '                </td>\r' + '\n' + '            </tr>\r' + '\n' + '            <!--<tr ng-if="UserDetails.role == \'admin\'">\r' + '\n' + '                <td colspan="2">\r' + '\n' + '                    <button class="btn btn-block" ng-class="{\'btn-danger\': delete.enabled, \'btn-warning\': !delete.enabled}" ng-click="deleteRequirement()" ng-disabled="versionToWatch !== lastVersion">\r' + '\n' + '                        <span ng-show="versionToWatch === lastVersion">{{delete.message}}</span>\r' + '\n' + '                        <span ng-hide="versionToWatch === lastVersion">Only the latest version is deletable</span>\r' + '\n' + '                    </button>\r' + '\n' + '                </td>\r' + '\n' + '            </tr>-->\r' + '\n' + '        </table>\r' + '\n' + '    </div>\r' + '\n' + '</div>');
    $templateCache.put('app/pages/edit/edit.html', '<form name="editRequirement">\r' + '\n' + '    <div class="row">\r' + '\n' + '        <div class="col-md-8">\r' + '\n' + '            <div class="row">\r' + '\n' + '                <div class="col-md-12">\r' + '\n' + '                    <input type="text" class="form-control input-lg" placeholder="Requirement Name" autofocus ng-model="newRequirement.Name" />\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '            <div class="row page-section">\r' + '\n' + '                <div class="col-md-12">\r' + '\n' + '                    <textarea class="form-control" ng-model="newRequirement.Description" cols="30" rows="10" placeholder="Requirement Description"></textarea>\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '            <div class="row page-section">\r' + '\n' + '                <div class="col-md-6">\r' + '\n' + '                    <input type="file" srs-files-read files-read="newRequirement.images" multiple class="form-control" accept="image/*" />\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '            <div class="row page-section">\r' + '\n' + '                <div ng-repeat="image in newRequirement.images track by $index" ng-mouseenter="showMenu = true" ng-mouseleave="showMenu = false" class="thumbnail col-md-3 col-md-offset-1 list-animation">\r' + '\n' + '                    <span ng-show="showMenu" class="uploaded-image-menu"><button class="btn btn-sm btn-danger" ng-click="removeUploadedImage($index)">Delete</button></span>\r' + '\n' + '                    <img ng-src="{{image}}" ng-click="setImageToPreview(image)" /> \r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '            <div srs-image-preview image-preview-enable="imagePreview.enabled" image-preview-src="imagePreview.selectedImage"></div>\r' + '\n' + '        </div>\r' + '\n' + '        <div class="col-md-4">\r' + '\n' + '            <table class="table">\r' + '\n' + '                <tr>\r' + '\n' + '                    <td>\r' + '\n' + '                        Status\r' + '\n' + '                    </td>\r' + '\n' + '                    <td class="requirement__field">\r' + '\n' + '                        <span class="label srs-label srs-label--clickable" ng-class="{\'label-success\': newRequirement.Status == \'Ready\', \'label-danger\':  newRequirement.Status == \'NotReady\', \'label-info\': newRequirement.Status == \'Closed\'}" ng-click="toggleStatus()">{{newRequirement.Status}}</span>\r' + '\n' + '                    </td>\r' + '\n' + '                </tr>\r' + '\n' + '                <tr>\r' + '\n' + '                    <td>Areas</td>\r' + '\n' + '                    <td class="requirement__field">\r' + '\n' + '                        <span class="label label-default srs-label srs-label--clickable" ng-class="{\'label-success\': Portal}" ng-click="toggleArea(\'Portal\')">Portal</span>\r' + '\n' + '                        <span class="label label-default srs-label srs-label--clickable" ng-class="{\'label-danger\': Desktop}" ng-click="toggleArea(\'Desktop\')">Desktop</span>\r' + '\n' + '                        <span class="label label-default srs-label srs-label--clickable" ng-class="{\'label-warning\': Platform}" ng-click="toggleArea(\'Platform\')">Platform</span>\r' + '\n' + '                    </td>\r' + '\n' + '                </tr>\r' + '\n' + '                <tr>\r' + '\n' + '                    <td>\r' + '\n' + '                        Release\r' + '\n' + '                    </td>\r' + '\n' + '                    <td class="requirement__field">\r' + '\n' + '                        <select class="form-control input-sm" ng-model="newRequirement.Release" ng-options="r for r in RequirementsManager.getReleaseList()"></select>\r' + '\n' + '                    </td>\r' + '\n' + '                </tr>\r' + '\n' + '                <tr>\r' + '\n' + '                    <td>TFS</td>\r' + '\n' + '                    <td class="requirement__field">\r' + '\n' + '                        <input type="text" class="form-control input-sm" ng-model="newRequirement.TFSRequirementNumber" placeholder="TFS Number" />\r' + '\n' + '                    </td>\r' + '\n' + '                </tr>\r' + '\n' + '            </table>\r' + '\n' + '            <div class="row page-section">\r' + '\n' + '                <div class="col-md-12">\r' + '\n' + '                    <button class="btn btn-success btn-block" ng-click="updateRequirement()" ng-if="!editRequirement.$invalid && !isUnchanged()">Update</button>\r' + '\n' + '                    <button class="btn btn-primary btn-block" ng-click="cancel()" ng-if="editRequirement.$invalid || isUnchanged()">Cancel</button>\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '            <div class="row page-section">\r' + '\n' + '                <div class="col-md-12">\r' + '\n' + '                    <button class="btn btn-block" ng-class="{\'btn-danger\': delete.enabled, \'btn-warning\': !delete.enabled}" ng-click="deleteRequirement()">\r' + '\n' + '                        {{delete.message}}\r' + '\n' + '                    </button>\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '        </div>\r' + '\n' + '    </div>\r' + '\n' + '</form>');
    $templateCache.put('app/pages/home/home.html', '<div ng-if="RequirementsManager.isLoaded.value">\r' + '\n' + '    <div class="navbar navbar-default">\r' + '\n' + '        <div class="container-fluid">\r' + '\n' + '            <form class="navbar-form navbar-left">\r' + '\n' + '                <div class="form-group">\r' + '\n' + '                    <select class="form-control" ng-model="search.Status">\r' + '\n' + '                        <option value="">- Status -</option>\r' + '\n' + '                        <option ng-repeat="Status in RequirementsManager.getStatusList()" value="{{Status}}">{{Status}}</option>\r' + '\n' + '                    </select>\r' + '\n' + '\r' + '\n' + '                    <select class="form-control" ng-model="search.Release">\r' + '\n' + '                        <option value="">- Release -</option>\r' + '\n' + '                        <option ng-repeat="Release in RequirementsManager.getReleaseList()" value="{{Release}}">{{Release}}</option>\r' + '\n' + '                    </select>\r' + '\n' + '\r' + '\n' + '                    <select class="form-control" ng-model="search.Area">\r' + '\n' + '                        <option value="">- Area -</option>\r' + '\n' + '                        <option ng-repeat="Area in RequirementsManager.getAreaList()" value="{{Area}}">{{Area}}</option>\r' + '\n' + '                    </select>\r' + '\n' + '\r' + '\n' + '                    <input class="form-control" ng-model="search.Name" placeholder="Requirement Name" />\r' + '\n' + '                    <input class="form-control" ng-model="search.TFSRequirementNumber" placeholder="Requirement Number" />\r' + '\n' + '                </div>\r' + '\n' + '            </form>\r' + '\n' + '            <div>\r' + '\n' + '                <ul class="nav navbar-nav navbar-right">\r' + '\n' + '                    <li><a href="" ng-click="subscribe()"><i class="fa fa-envelope"></i> Subscribe</a></li>\r' + '\n' + '                    <li ng-if="UserDetails.role == \'admin\'"><a ui-sref="master.add"><i class="fa fa-plus"></i> Add</a></li>\r' + '\n' + '                </ul>\r' + '\n' + '            </div>\r' + '\n' + '        </div>\r' + '\n' + '    </div>\r' + '\n' + '    <div class="table-responsive col-md-12">\r' + '\n' + '        <table class="table table-hover requirements-table">\r' + '\n' + '            <thead>\r' + '\n' + '                <tr>\r' + '\n' + '                    <th>Status</th>\r' + '\n' + '                    <th>Name</th>\r' + '\n' + '                    <th class="requirement__field">Release</th>\r' + '\n' + '                    <th class="requirement__field">Areas</th>\r' + '\n' + '                    <th class="requirement__field">Added</th>\r' + '\n' + '                    <th class="requirement__field">Modified</th>\r' + '\n' + '                    <th class="requirement__field">TFS</th>\r' + '\n' + '                </tr>\r' + '\n' + '            </thead>\r' + '\n' + '            <tr class="requirement list-animation" ng-repeat="requirement in requirements  | orderByPriority | orderBy:\'Modified\':true | requirementsSearch:search" ng-click="showDetails(requirement)" ng-class="{success: lastVersion.Status == \'Ready\', info: lastVersion.Status == \'Closed\', danger: lastVersion.Status == \'NotReady\'}" ng-init="lastVersion = requirement.versions[requirement.lastVersion]">\r' + '\n' + '                <td>\r' + '\n' + '                    <span class=" label srs-label srs-label--clickable" ng-class="{\'label-success\':lastVersion.Status == \'Ready\', \'label-info\': lastVersion.Status == \'Closed\', \'label-danger\': lastVersion.Status == \'NotReady\'}" ng-click="search.Status = lastVersion.Status;$event.stopPropagation();">\r' + '\n' + '                        {{lastVersion.Status}}\r' + '\n' + '                    </span>\r' + '\n' + '                </td>\r' + '\n' + '                <td class="requirement__name">{{lastVersion.Name}}</td>\r' + '\n' + '                <td class="requirement__field">{{lastVersion.Release}}</td>\r' + '\n' + '                <td class="requirement__field"><span class="label srs-label srs-label--clickable" ng-repeat="area in lastVersion.Areas" ng-class="{\'label-success\': area.Name == \'Portal\', \'label-warning\': area.Name == \'Platform\', \'label-danger\': area.Name == \'Desktop\'}" ng-click="search.Area = area.Name;$event.stopPropagation();">{{area.Name}}</span></td>\r' + '\n' + '                <td class="requirement__field">{{requirement.Added | date}}</td>\r' + '\n' + '                <td class="requirement__field">{{requirement.Modified | date}}</td>\r' + '\n' + '                <td class="requirement__field"><a ng-href="{{Config.tfsurl.value + lastVersion.TFSRequirementNumber}}" target="_blank">{{lastVersion.TFSRequirementNumber}}</a></td>\r' + '\n' + '            </tr>\r' + '\n' + '        </table>\r' + '\n' + '    </div>\r' + '\n' + '</div>\r' + '\n' + '<div ng-if="!RequirementsManager.isLoaded.value">\r' + '\n' + '    <wave-spinner></wave-spinner>\r' + '\n' + '</div>');
    $templateCache.put('app/pages/manageSubscriptions/manageSubscriptions.html', '<div class="row">\r' + '\n' + '    <div class="table-responsive col-md-12">\r' + '\n' + '        <table class="table table-hover subscriptions-table">\r' + '\n' + '            <thead>\r' + '\n' + '                <tr>\r' + '\n' + '                    <th>Status</th>\r' + '\n' + '                    <th>Name</th>\r' + '\n' + '                    <th>Release</th>\r' + '\n' + '                    <th>Area</th>\r' + '\n' + '                    <th>TFS</th>\r' + '\n' + '                    <th></th>\r' + '\n' + '                </tr>\r' + '\n' + '            </thead>\r' + '\n' + '            <tr class="subscription" ng-repeat="($key, subscription) in subscriptions | orderByPriority | onlyMyEmail:User.details.email">\r' + '\n' + '                <td>\r' + '\n' + '                    <span ng-show="subscription.Status" class="label srs-label" ng-class="{\'label-success\':subscription.Status == \'Ready\', \'label-info\': subscription.Status == \'Closed\', \'label-danger\': subscription.Status == \'NotReady\'}">\r' + '\n' + '                        {{subscription.Status}}\r' + '\n' + '                    </span>\r' + '\n' + '                    <span ng-hide="subscription.Status">Empty</span>\r' + '\n' + '                </td>\r' + '\n' + '                <td>{{subscription.Name || \'Empty\'}}</td>\r' + '\n' + '                <td>{{subscription.Release || \'Empty\'}}</td>\r' + '\n' + '                <td>\r' + '\n' + '                    <span ng-show="subscription.Area" class="label srs-label" ng-class="{\'label-success\': subscription.Area == \'Portal\', \'label-warning\': subscription.Area == \'Platform\', \'label-danger\': subscription.Area == \'Desktop\'}">{{subscription.Area}}</span>\r' + '\n' + '                    <span ng-hide="subscription.Area">Empty</span>\r' + '\n' + '                </td>\r' + '\n' + '                <td>\r' + '\n' + '                    <span ng-show="subscription.TFSRequirementNumber">{{subscription.TFSRequirementNumber}}</span>\r' + '\n' + '                    <span ng-hide="subscription.TFSRequirementNumber">Empty</span>\r' + '\n' + '                </td>\r' + '\n' + '                <td><button class="btn btn-danger btn-sm" ng-click="deleteSubscription(subscription.$id)">Delete</button></td>\r' + '\n' + '            </tr>\r' + '\n' + '        </table>\r' + '\n' + '    </div>\r' + '\n' + '</div>');
    $templateCache.put('app/pages/master/master.html', '<nav class="navbar navbar-default" role="navigation">\r' + '\n' + '    <div class="container-fluid">\r' + '\n' + '        <!-- Brand and toggle get grouped for better mobile display -->\r' + '\n' + '        <div class="navbar-header">\r' + '\n' + '            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">\r' + '\n' + '                <span class="sr-only">Toggle navigation</span>\r' + '\n' + '                <span class="icon-bar"></span>\r' + '\n' + '                <span class="icon-bar"></span>\r' + '\n' + '                <span class="icon-bar"></span>\r' + '\n' + '            </button>\r' + '\n' + '            \r' + '\n' + '            <a class="navbar-brand" href="#"><img src="images/quentry.png"/></a>\r' + '\n' + '        </div>\r' + '\n' + '        <ul class="nav navbar-nav">\r' + '\n' + '            <li ui-sref-active="active"><a ui-sref="master.home">Browse</a></li>\r' + '\n' + '            <li ng-if="User.details.isAuthenticated" ui-sref-active="active"><a ui-sref="master.manageSubscriptions">Manage Subscriptions</a></li>\r' + '\n' + '        </ul>\r' + '\n' + '        <div class="nav navbar-right">\r' + '\n' + '            <div class="login-panel">\r' + '\n' + '                <div ng-if="!User.details.isAuthenticated">\r' + '\n' + '                    <form class="form-inline" ng-submit="signin()">\r' + '\n' + '\r' + '\n' + '                        <input type="email" ng-model="user.name" placeholder="Username" class="form-control" />\r' + '\n' + '                        <input type="password" ng-model="user.password" placeholder="Password" class="form-control" />\r' + '\n' + '                        <input type="submit" class="btn btn-success" ng-disabled="!user.name || !user.password" value="Sign in">\r' + '\n' + '\r' + '\n' + '                    </form>\r' + '\n' + '                </div>\r' + '\n' + '                <div ng-if="User.details.isAuthenticated">\r' + '\n' + '                    <div><span class="welcome-message">Welcome {{User.details.name}}</span> (<a href="" ng-click="signout()">not {{User.details.name}}?</a>)</div>\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '        </div>\r' + '\n' + '        <div class="nav navbar-right useractions-nav">\r' + '\n' + '            <ul class="nav navbar-nav">\r' + '\n' + '                <li ui-sref-active="active" ng-if="!User.details.isAuthenticated"><a ui-sref="master.register">Register</a></li>\r' + '\n' + '                <li ui-sref-active="active" ng-if="User.details.isAuthenticated"><a ui-sref="master.changepassword">Change password</a></li>\r' + '\n' + '            </ul>\r' + '\n' + '        </div>\r' + '\n' + '    </div>\r' + '\n' + '</nav>\r' + '\n' + '\r' + '\n' + '\r' + '\n' + '<div class="container ui-view-container">\r' + '\n' + '    <div class="row">\r' + '\n' + '        <div ng-show="Toast.enabled.value" class="alert col-md-4 col-md-offset-4 text-center toast" ng-class="{\'alert-danger\': Toast.type.value == \'error\', \'alert-success\': Toast.type.value == \'success\', \'alert-warning\': Toast.type.value == \'warning\'}">{{Toast.message.value}}</div>\r' + '\n' + '    </div>\r' + '\n' + '\r' + '\n' + '    <div ui-view="container"></div>\r' + '\n' + '</div>');
    $templateCache.put('app/pages/useractions/changepassword.html', '<div class="row">\r' + '\n' + '    <div class="col-md-4 col-md-offset-4">\r' + '\n' + '        <form class="form-horizontal" role="form" name="changepassworduserform" ng-submit="changePassword()">\r' + '\n' + '            <div class="row form-group">\r' + '\n' + '                <div class="col-md-6"><label class="control-label">Old Password</label></div>\r' + '\n' + '                <div class="col-md-6">\r' + '\n' + '                    <input type="password" class="form-control" ng-model="changepassworduser.oldpassword" placeholder="Old Password" ng-hide="changepassworduser.togglepassword" required />\r' + '\n' + '                    <input type="text" class="form-control" ng-model="changepassworduser.oldpassword" placeholder="Old Password" ng-show="changepassworduser.togglepassword" required />\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '            <div class="row password-row">\r' + '\n' + '                <div class="col-md-6"><label class="control-label">New Password</label></div>\r' + '\n' + '                <div class="col-md-6">\r' + '\n' + '                    <input type="password" class="form-control" ng-model="changepassworduser.newpassword" placeholder="New Password" ng-hide="changepassworduser.togglepassword" required />\r' + '\n' + '                    <input type="text" class="form-control" ng-model="changepassworduser.newpassword" placeholder="New Password" ng-show="changepassworduser.togglepassword" required />\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '            <div class="row">\r' + '\n' + '                <div class="col-md-6 col-md-offset-6">\r' + '\n' + '                    <div class="checkbox">\r' + '\n' + '                        <label class="pull-right"><input type="checkbox" ng-model="changepassworduser.togglepassword" />Show passwords</label>\r' + '\n' + '                    </div>\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '            <div class="row">\r' + '\n' + '                <div class="col-md-12"><input type="submit" class="btn btn-success btn-block" ng-click="changePassword()" ng-disabled="changepassworduserform.$invalid" value="Change Password"></div>\r' + '\n' + '            </div>\r' + '\n' + '        </form>\r' + '\n' + '    </div>\r' + '\n' + '</div>');
    $templateCache.put('app/pages/useractions/register.html', '<div class="row">\r' + '\n' + '    <div class="col-md-4 col-md-offset-4">\r' + '\n' + '        <form class="form-horizontal" role="form" name="newuserform" ng-submit="register()">\r' + '\n' + '            <div class="row form-group">\r' + '\n' + '                <div class="col-md-6"><label class="control-label">Name</label></div>\r' + '\n' + '                <div class="col-md-6"><input type="text" class="form-control" ng-model="newuser.name" placeholder="Name" required /></div>\r' + '\n' + '            </div>\r' + '\n' + '            <div class="row form-group">\r' + '\n' + '                <div class="col-md-6"><label class="control-label">Email</label></div>\r' + '\n' + '                <div class="col-md-6"><input type="email" class="form-control" ng-model="newuser.email" placeholder="Email" required /></div>\r' + '\n' + '            </div>\r' + '\n' + '            <div class="row password-row">\r' + '\n' + '                <div class="col-md-6"><label class="control-label">Password</label></div>\r' + '\n' + '                <div class="col-md-6">\r' + '\n' + '                    <input type="password" class="form-control" ng-model="newuser.password" placeholder="Password" ng-hide="newuser.togglepassword" required />\r' + '\n' + '                    <input type="text" class="form-control" ng-model="newuser.password" placeholder="Password" ng-show="newuser.togglepassword" required />\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '            <div class="row">\r' + '\n' + '                <div class="col-md-6 col-md-offset-6">\r' + '\n' + '                    <div class="checkbox">\r' + '\n' + '                        <label class="pull-right"><input type="checkbox" ng-model="newuser.togglepassword" />Show password</label>\r' + '\n' + '                    </div>\r' + '\n' + '                </div>\r' + '\n' + '            </div>\r' + '\n' + '            <div class="row">\r' + '\n' + '                <div class="col-md-12"><input type="submit" class="btn btn-success btn-block" ng-disabled="newuserform.$invalid" value="Register" /></div>\r' + '\n' + '            </div>\r' + '\n' + '        </form>\r' + '\n' + '    </div>\r' + '\n' + '</div>');
    $templateCache.put('app/common/imagepreview/imagepreview.html', '<div ng-if="imagePreviewEnable" class="imagePreview-backdrop" ng-click="closePreview()"></div>\r' + '\n' + '<div ng-if="imagePreviewEnable" class="imagePreview-container" ng-mouseenter="displayClose = true" ng-mouseleave="displayClose=false">\r' + '\n' + '    <div class="imagePreview-close"><button class="btn btn-danger" ng-click="closePreview()" ng-show="displayClose">Close</button></div>\r' + '\n' + '    <img ng-src="{{imagePreviewSrc}}" class="imagePreview" />\r' + '\n' + '</div>');
  }
]);